[
  {
    "id": 53595,
    "date": "2021-06-27T05:38:07",
    "date_gmt": "2021-06-27T05:38:07",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=53595" },
    "modified": "2021-08-03T07:26:16",
    "modified_gmt": "2021-08-03T07:26:16",
    "slug": "code-smells",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/code-smells",
    "title": { "rendered": "Code Smells" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Most programmers strive to create good software. But, unfortunately, it&#8217;s more complex to achieve that than we&#8217;d think at first.</p>\n<p>In this tutorial, we&#8217;ll dive into software quality, and its relation to code smells.</p>\n<h2  id=\"bd-software-requirements\" data-id=\"software-requirements\">2. Software Requirements</h2>\n<div class=\"bd-anchor\" id=\"software-requirements\"></div>\n<p><strong>Creating good software is a challenging task. It has to fulfill many requirements at the same time:</strong></p>\n<ul>\n<li>Provide useful features</li>\n<li>It shouldn&#8217;t contain bugs</li>\n<li>Have a user-friendly interface</li>\n<li>Respond to actions in a reasonable timeframe</li>\n<li>Don&#8217;t consume too many resources</li>\n<li>It should be easy (and cheap) to operate (install, host, etc.) and maintain (add features, fix bugs)</li>\n</ul>\n<p>Many of these characteristics are conflicting. Therefore, we must strive for an acceptable balance between these qualities.</p>\n<p>However, some of these things are more important than others. For example, Mich Ravera said the following:</p>\n<blockquote><p>If it doesn\u2019t work, it doesn\u2019t matter how fast it doesn\u2019t work.</p></blockquote>\n<p>Like in this list, maintainability is often standing behind other qualities. <strong>However, in most cases, maintainable code inherently contains fewer bugs, has better performance characteristics, and it&#8217;s easier to operate. Therefore, if we make our code maintainable, other characteristics will most likely improve, too.</strong></p>\n<h2  id=\"bd-code-quality\" data-id=\"code-quality\">3. Code Quality</h2>\n<div class=\"bd-anchor\" id=\"code-quality\"></div>\n<p>Many factors impact maintainability, including code quality. But code quality is a complicated topic in itself, too. Usually, it&#8217;s easier to define what makes the code bad than what makes it good.</p>\n<p>When we work with a piece of bad code, we usually can feel that it&#8217;s bad. In some cases, it&#8217;s easy to spot the problem. But more often than not, it&#8217;s much less obvious. In those cases, it&#8217;s just doesn&#8217;t feel right; something&#8217;s off. <strong>Even if we can&#8217;t pinpoint the problem, we feel that the code smells.</strong></p>\n<p>These problems can have many forms. Sometimes it&#8217;s hard to understand what the code does or how does it do it. In other cases, it&#8217;s hard to change behavior when the requirements change or we have to fix a bug. Similarly, it may be hard to add new features.</p>\n<p><strong>What&#8217;s common is that problems tend to arise together.</strong> It has psychological reasons. To understand these, let&#8217;s take a look at how code evolves.</p>\n<h3  id=\"bd-codebase-evolution\" data-id=\"codebase-evolution\">3.1. Codebase Evolution</h3>\n<div class=\"bd-anchor\" id=\"codebase-evolution\"></div>\n<p>Let&#8217;s consider that we see a low-qualitys codebase. How will we change that? Will we add the most beautiful code that we ever created? Most probably not. <strong>We&#8217;ll add more garbage to the existing pile because it&#8217;s already a smelly codebase. A little more doesn&#8217;t matter.</strong></p>\n<p>One smelly part doesn&#8217;t matter, indeed. But if we behave like this, the software will be smellier each time we touch it. Eventually, it&#8217;ll rot. And no one wants to work with something that&#8217;s rotting. So we start to say phrases like &#8220;we don&#8217;t want to touch this module, because last time we had to debug it for a week&#8221; or &#8220;it would be best to rewrite it from scratch&#8221;. Usually, we don&#8217;t get the chance to dump and restart a project. So we&#8217;ll get stuck with this abomination we hate.</p>\n<p>Note that it&#8217;s not necessarily a good decision to rewrite everything from scratch. The required effort is usually underestimated. What works better is to identify and separate some parts and rewrite them without touching the other parts. Once it&#8217;s done, we can move on to the next module. This iterative approach works better in most cases.</p>\n<p>In the end, from a quality perspective, it doesn&#8217;t matter whether we rewrite the software iteratively or all at once. What matters is if our behavior changed or we work the same way we did before. <strong>If we always adapt new code to its surroundings, the process leads to another catastrophic codebase. We won&#8217;t understand why. We didn&#8217;t make the mistakes we did before. However, we made others.</strong></p>\n<h3  id=\"bd-how-to-write-good-code\" data-id=\"how-to-write-good-code\">3.2. How to Write Good Code</h3>\n<div class=\"bd-anchor\" id=\"how-to-write-good-code\"></div>\n<p>The solution is to be mindful of our behavior. Don&#8217;t adapt to the bad surroundings. We shouldn&#8217;t fix the problem but prevent it. <strong>We should always add good-quality, <a href=\"https://www.oreilly.com/library/view/clean-code-a/9780136083238/\">clean code</a>, no matter what. As a result, over time, the overall code quality will improve.</strong></p>\n<p>In the end, the old, smelly parts will start to disturb us. They&#8217;ll stand out from the rest of the code. So the last thing to do is to identify them.</p>\n<p><strong>Fortunately, we tend to repeat mistakes over and over. Smart people recognized the patterns, collected them, and organized them. We call these patterns code smells.</strong></p>\n<h2  id=\"bd-types-of-code-smells\" data-id=\"types-of-code-smells\">4. Types of Code Smells</h2>\n<div class=\"bd-anchor\" id=\"types-of-code-smells\"></div>\n<p>Code smells have a <a href=\"https://refactoring.guru/refactoring/smells\">catalog</a>. In this catalog, they&#8217;re grouped based on common characteristics. In this section, we&#8217;ll take a look at those groups without being exhaustive.</p>\n<h3  id=\"bd-bloaters\" data-id=\"bloaters\">4.1. Bloaters</h3>\n<div class=\"bd-anchor\" id=\"bloaters\"></div>\n<p><a href=\"https://refactoring.guru/refactoring/smells/bloaters\">Bloaters</a> are constructs (classes, methods, etc.) in the code which are too large, so we can&#8217;t work with them effectively. In most cases, they only appear over time as we add more functionality to the software. We add a line here, a method there, and boom, we have a class with 2000 lines.</p>\n<p>A less obvious bloater smell has the name <a href=\"https://refactoring.guru/smells/data-clumps\">data clumps</a>:</p>\n<pre><code class=\"language-java\">class DateUtil {\n    boolean isAfter(int year1, int month1, int day1, int year2, int month2, int day2) {\n        // implementation\n    }\n  \n    int differenceInDays(int year1, int month1, int day1, int year2, int month2, int day2) {\n        // implementation\n    }\n  \n    // other date methods\n}</code></pre>\n<p>All the methods above work with dates. Therefore, all of them receive three integer arguments: year, month, and day. Grouping them in a <em>Date</em> class makes the code more readable:</p>\n<pre><code class=\"language-java\">class Date {\n    int year;\n    int month;\n    int day;\n}\n\nclass DateUtil {\n    boolean isAfter(Date date1, Date date2) {\n        // implementation\n    }\n  \n    int differenceInDays(Date date1, Date date2) {\n        // implementation\n    }\n  \n    // other date methods\n}</code></pre>\n<p>In addition, we should move those methods to the <em>Date</em> class to encapsulate the data with the operations. But that&#8217;s a different story.</p>\n<h3  id=\"bd-oo-abusers\" data-id=\"oo-abusers\">4.2. Object-Orientation Abusers</h3>\n<div class=\"bd-anchor\" id=\"oo-abusers\"></div>\n<p>Sometimes it&#8217;s hard to write good object-oriented code. If we don&#8217;t follow the principles, we may run into one of these smells.</p>\n<p>For example, the <a href=\"https://refactoring.guru/smells/switch-statements\">switch-case statement</a> is considered a code smell in OO. Let&#8217;s consider this example:</p>\n<pre><code class=\"language-java\">class Animal {\n    String type;\n  \n    String makeSound() {\n        switch (type) {\n            case &quot;cat&quot;:\n                return &quot;meow&quot;;\n            case &quot;dog&quot;:\n                return &quot;woof&quot;;\n            default:\n                throw new IllegalStateException();\n        }\n    }\n}</code></pre>\n<p>Instead of switch-case, we should use polymorphism:</p>\n<pre><code class=\"language-java\">abstract class Animal {\n    abstract String makeSound();\n}\n\nclass Cat extends Animal {\n    @Override\n    String makeSound() {\n        return &quot;meow&quot;;\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    String makeSound() {\n        return &quot;woof&quot;;\n    }\n}</code></pre>\n<p>We not only got rid of the switch-case statement. On top of that, our classes won&#8217;t be able to be in an illegal state anymore.</p>\n<h3  id=\"bd-change-preventers\" data-id=\"change-preventers\">4.3. Change Preventers</h3>\n<div class=\"bd-anchor\" id=\"change-preventers\"></div>\n<p><a href=\"https://refactoring.guru/refactoring/smells/change-preventers\">Change preventers</a> violate the Single Responsibility Principle.</p>\n<p>For example, <a href=\"https://refactoring.guru/smells/shotgun-surgery\">shotgun surgery</a> means that we need to touch multiple parts of the code to make a behavior change.</p>\n<p>From a certain point of view, <a href=\"https://refactoring.guru/smells/divergent-change\">divergent change</a> is the opposite. It means that multiple behavior changes affect the same part of the code.</p>\n<p><strong>There are code smells that don&#8217;t always signal poor code.</strong> For example, we implement <a href=\"https://refactoring.guru/smells/parallel-inheritance-hierarchies\">parallel inheritance hierarchies</a> on purpose when we use the <a href=\"/java-abstract-factory-pattern\">abstract factory design pattern</a>. In other cases, it&#8217;s a wrong design that causes many headaches.</p>\n<h3  id=\"bd-dispensables\" data-id=\"dispensables\">4.4. Dispensables</h3>\n<div class=\"bd-anchor\" id=\"dispensables\"></div>\n<p><a href=\"https://refactoring.guru/refactoring/smells/dispensables\">Dispensables</a> introduce noise to the code. Without them, the code can be much cleaner.</p>\n<p>For example, consider this snippet:</p>\n<pre><code class=\"language-java\">// amount\ndouble a = order.getAmount();\n// discount factor\ndouble b = 1;\nif (a &gt; 10) {\n    b = 0.9;\n}\n// discounted price\ndouble c = product.getPrice() * b;\n// order sum price\ndouble d = a * c;</code></pre>\n<p>If we use appropriate variable names, we can get rid of the <a href=\"https://refactoring.guru/smells/comments\">comments</a>:</p>\n<pre><code class=\"language-java\">double amount = order.getAmount();\ndouble discountFactor = 1;\nif (amount &gt; 10) {\n    discountFactor = 0.9;\n}\ndouble discountedPrice = product.getPrice() * discountFactor;\ndouble orderSumPrice = amount * discountedPrice;</code></pre>\n<p><strong>Keep in mind that not all comments are code smells. If they explain what the code does or how it works, they signal that our code isn&#8217;t readable enough. But if they state why something is necessary, they provide valuable information. </strong>For example, when a weird edge case needs to be handled because of a special business requirement.</p>\n<h3  id=\"bd-couplers\" data-id=\"couplers\">4.5. Couplers</h3>\n<div class=\"bd-anchor\" id=\"couplers\"></div>\n<p><a href=\"https://refactoring.guru/refactoring/smells/couplers\">Couplers</a> prevent changing classes independently.</p>\n<p>For example, <a href=\"https://refactoring.guru/smells/inappropriate-intimacy\">inappropriate intimacy</a> violates data hiding by accessing private parts of other classes.</p>\n<p>Interestingly, sometimes two smells are the exact opposite of each other.</p>\n<p>Consider <a href=\"https://refactoring.guru/smells/message-chains\">message chains</a>, where we chain method calls:</p>\n<pre><code class=\"language-java\">class Repository {\n    Entity findById(long id) {\n        // implementation\n    }\n}\n\nclass Service {\n    Repository repository;\n\n    Repository getRepository() {\n        return repository;\n    }\n}\n\nclass Context {\n    Service service;\n\n    void useCase() {\n        // the following is a message chain\n        Entity entity = service.getRepository().findById(1);\n        // using entity\n    }\n}</code></pre>\n<p>The solution is to introduce a method in the <em>Service</em>, which calls the <em>Repository</em>:</p>\n<pre><code class=\"language-java\">class Service {\n    Repository repository;\n\n    Entity findById(long id) {\n        return repository.findById(id);\n    }\n}\n\nclass Context {\n    Service service;\n\n    void useCase() {\n        Entity entity = service.findById(1);\n        // using entity\n    }\n}</code></pre>\n<p>But in this example, the method <em>Service.findById()</em> is called a <a href=\"https://refactoring.guru/smells/middle-man\">middle man</a>, which is another smell. And to get rid of it, we should rewrite it to the original code.</p>\n<p>Does it mean that we can&#8217;t win? Of course not. <strong>It means that the correct solution depends on what we use it for.</strong></p>\n<p>For example, data can be hierarchical by nature. So message chains don&#8217;t mean a problem because we want to access the data in different granularity.</p>\n<p>For the example above, with <em>Service.getRepository()</em>, we&#8217;re violating the <a href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\">Law of Demeter</a>\u00a0because this code isn&#8217;t about data. It&#8217;s about behavior, and we&#8217;re exposing the <em>Service</em> class&#8217;s internal structure.</p>\n<p>Alternatively, we could get rid of <em>Service</em>\u00a0and use <em>Repository</em> directly from <em>Context</em>:</p>\n<pre><code class=\"language-java\">class Context {\n    Repository repository;\n\n    void useCase() {\n        Entity entity = repository.findById(1);\n        // using entity\n    }\n}</code></pre>\n<p>This way, we don&#8217;t have a middle man or message chains anymore. However, depending on the situation, it may suffer from other problems. For example, we may violate layer or module boundaries.</p>\n<p>Also, note that the <em>Service</em> class suffers from another code smell in these examples. It&#8217;s an interesting exercise to find out what&#8217;s that smell is. We stated the answer in the last section.</p>\n<h3  id=\"bd-other-problems\" data-id=\"other-problems\">4.6. Other Problems</h3>\n<div class=\"bd-anchor\" id=\"other-problems\"></div>\n<p><strong>Note that identifying and fixing code smells isn&#8217;t a silver bullet.</strong> Sometimes they represent problems. In other cases, they don&#8217;t. Like in the abstract factory example.</p>\n<p>In other cases, a fix for a potential code smell is another one, for example, in the middle man vs. message chains case. But, again, we need to understand the purpose of the code to be able to make a good decision.</p>\n<p><strong>Also, code smells are far from identifying all problems with the code. Instead, they only aim to identify a few common problems that are usually easy but not obvious to fix.</strong></p>\n<h2  id=\"bd-how-to-get-rid-of-code-smells\" data-id=\"how-to-get-rid-of-code-smells\">5. How to Get Rid of Code Smells</h2>\n<div class=\"bd-anchor\" id=\"how-to-get-rid-of-code-smells\"></div>\n<p>We talked about that we should prevent code smells by writing clean code despite the codebase quality.</p>\n<p>But sometimes, the smells are already present. Then we can identify problematic code by looking for code smells. <strong>But how can we get rid of those problems? We should change the structure of the code without altering its externally observable behavior. Refactoring is the technique that does exactly that.</strong> We won&#8217;t go into details since we already covered the topic <a href=\"/cs/refactoring\">here</a>.</p>\n<p>If we refactor regularly, we constantly improve the code quality. This process has a similar but opposing effect to introducing smelly code. We slowly make the code better, one piece at a time. And in the end, our codebase becomes great.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>Maintainable code can prevent other flaws with software. Or at least it makes them easier to address.</p>\n<p>Code smells are code quality problems. They&#8217;re general, repeating patterns that often appear in codebases. Identifying them helps us to make targeted improvements on the code quality.</p>\n<p>In this tutorial, we talked about how to prevent a codebase&#8217;s quality from decreasing. Then we saw some examples of code smells. Finally, we stated that refactoring is the go-to technique to get rid of them.</p>\n<p>Finally, as promised, <em>Service</em> is a <a href=\"https://refactoring.guru/smells/lazy-class\">lazy class</a> in the previous examples.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore ideas\u00a0how to prevent a codebase&#8217;s quality from decreasing.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49635,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [28],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/53595" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=53595"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/53595/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49635"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=53595"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=53595"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=53595"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 53162,
    "date": "2021-05-10T06:37:26",
    "date_gmt": "2021-05-10T06:37:26",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=53162" },
    "modified": "2021-07-03T07:33:13",
    "modified_gmt": "2021-07-03T07:33:13",
    "slug": "refactoring",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/refactoring",
    "title": { "rendered": "Refactoring" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>As developers, we hear quite often that someone refactored their code. Most probably, we did refactoring many times, too.</p>\n<p>It&#8217;s such a common term that we usually don&#8217;t even think about what it means. Unfortunately, some people don&#8217;t have a clear understanding of its true meaning. Therefore, they label activities as refactoring, which have very little to do with it.</p>\n<p>In this tutorial, we&#8217;ll clear the air around refactoring.</p>\n<h2  id=\"bd-what-is-refactoring\" data-id=\"what-is-refactoring\">2. What&#8217;s Refactoring?</h2>\n<div class=\"bd-anchor\" id=\"what-is-refactoring\"></div>\n<p>Martin Fowler has an excellent book called <a href=\"https://martinfowler.com/books/refactoring.html\">Refactoring</a>. Because we don&#8217;t want to be smarter than him, we&#8217;ll stick to the definition he provides:</p>\n<blockquote><p>Refactoring is the process of changing a software system in a way that does not alter the external behavior of the code yet improves its internal structure. It is a disciplined way to clean up code that minimizes the chances of introducing bugs. In essence, when you refactor, you are improving the design of the code after it has been written.</p></blockquote>\n<p>This quote describes very well the essence of refactoring. Let&#8217;s talk about its key points.</p>\n<h3  id=\"bd-behavior\" data-id=\"behavior\">2.1. Behavior</h3>\n<div class=\"bd-anchor\" id=\"behavior\"></div>\n<p><strong>The most important characteristic is that refactoring &#8220;does not alter the external behavior of the code&#8221;.</strong> It means that we don&#8217;t add or remove any features nor change how they work. For the same input, the software produces the same output. Therefore, from the user&#8217;s perspective, the software didn&#8217;t change. Except maybe the performance, but let&#8217;s put that aside for now. To clarify: the user can be the end-user (who uses the software) or another developer (for example, when we write an API or a low-level component).</p>\n<p><strong>Note that we didn&#8217;t say anything about the internal behavior. It&#8217;s because it doesn&#8217;t matter from an external point of view.</strong> Let&#8217;s say we need a function that removes double spaces from a string. We could implement it by finding and replacing using regular expressions or implementing a simple state machine and a loop. If the function removes double spaces, it fulfills its purpose. Therefore, the implementation details don&#8217;t matter.</p>\n<h3  id=\"bd-structure\" data-id=\"structure\">2.2. Structure</h3>\n<div class=\"bd-anchor\" id=\"structure\"></div>\n<p>What&#8217;s the point of refactoring if it doesn&#8217;t change the code&#8217;s functionality? <strong>Refactoring software &#8220;improves its internal structure&#8221;. &#8220;It is a disciplined way to clean up code that minimizes the chances of introducing bugs.&#8221;</strong>\u00a0It doesn&#8217;t provide direct value to the end-user. Then why do we even bother? Again, Martin Fowler says it best: &#8220;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#8221;</p>\n<p>In other words: it impacts maintainability. For example, it&#8217;ll be faster to find and fix bugs or to add new features. <strong>Therefore, it transitively provides value to the end-user by making the software easier to modify.</strong> Also, it means less headache and burnout for developers.</p>\n<h3  id=\"bd-timing\" data-id=\"timing\">2.3. Timing</h3>\n<div class=\"bd-anchor\" id=\"timing\"></div>\n<p>Last but not least, &#8220;when you refactor, you are improving the design of the code after it has been written&#8221;. The essence of this quote is that first, we should make the software work. <strong>It doesn&#8217;t matter how well-written the code is if it doesn&#8217;t fulfill the requirements.</strong> Once we&#8217;re there, we can improve its maintainability.</p>\n<h2  id=\"bd-what-is-not-refactoring\" data-id=\"what-is-not-refactoring\">3. What Isn&#8217;t Refactoring?</h2>\n<div class=\"bd-anchor\" id=\"what-is-not-refactoring\"></div>\n<p>Now that we defined refactoring, it&#8217;s easier to identify activities that don&#8217;t fulfill this definition.</p>\n<p>For example, we can hear this sentence quite often: &#8220;I refactored the code and implemented X feature.&#8221;</p>\n<p>If the developer meant that she changed the structure and added new behavior simultaneously, the previous statement is false. We should remember the definition: refactoring doesn&#8217;t change the externally observable behavior. A new feature changes it by definition.</p>\n<p><strong>Restructuring and adding new behavior to the software should be orthogonal activities.</strong> Of course, sometimes we need to restructure the code so we can change the behavior. For example, when we realize that a class isn&#8217;t enough, we need an inheritance hierarchy instead. First, we extract the common things to a class or interface. This doesn&#8217;t change the behavior, only the structure. Next, we add the second class and make it part of the class hierarchy. This doesn&#8217;t change the existing structure but adds a new element.</p>\n<p>The sentence above could be only right if she did these activities iteratively. <strong>No new capability while restructuring. No restructuring when adding new behavior.</strong></p>\n<h2  id=\"bd-prerequisites\" data-id=\"prerequisites\">4. Prerequisites</h2>\n<div class=\"bd-anchor\" id=\"prerequisites\"></div>\n<p>We identified refactoring&#8217;s three major characteristics:</p>\n<ol>\n<li>It doesn&#8217;t change external behavior</li>\n<li>Changes the code&#8217;s internal structure</li>\n<li>It&#8217;s done after the code fulfills the requirements</li>\n</ol>\n<p>How can we be sure of the 3rd point? Also, how can we enforce the 1st? Fortunately, there&#8217;s a simple solution for both: tests.</p>\n<p><strong>We should write automated tests to assert every business case. When all of them are green, we know that our software fulfills the requirements. Therefore, we&#8217;re ready to refactor.</strong> Note that tests can also be successful because they&#8217;re missing. Alternatively, they may be faulty because they&#8217;re always green. But let&#8217;s assume none of those are the case, and we have tests, which are working correctly.</p>\n<p>What about the 1st point? Since we covered the business cases with tests, it&#8217;s straightforward: we run the entire test suite after every refactoring step. If every test is green, we didn&#8217;t change the behavior. If some of them break, there are two possibilities.</p>\n<p>The first is that we changed the external interface during refactoring and forgot to modify it in the tests. For example, renamed a class or removed a function&#8217;s argument. In this case, we have to alter the test code and rerun the tests. <strong>We should never forget to maintain the tests when we change the code.</strong></p>\n<p>The second case is that during restructuring, we accidentally changed the behavior, too. Since our tests clearly state which scenarios are breaking, it should be easy to fix the code.</p>\n<p>Note that we can switch between adding new features and refactoring as often as we want. We don&#8217;t have to (and shouldn&#8217;t) wait for the software to fulfill all of the requirements before we start refactoring. <strong>The important thing is that tests should cover that part we want to refactor.</strong></p>\n<h2  id=\"bd-examples\" data-id=\"examples\">5. Examples</h2>\n<div class=\"bd-anchor\" id=\"examples\"></div>\n<p>In this section, we&#8217;ll see a few examples of refactorings. Note that there&#8217;s an enormous amount of refactoring techniques. Our only purpose with these little examples is to make it a bit easier to imagine.</p>\n<p><a href=\"https://martinfowler.com/books/refactoring.html\">Refactoring by Martin Fowler</a> contains a comprehensive list of refactoring techniques. Also, <a href=\"https://refactoring.guru/\">refactoring.guru</a> has a nice <a href=\"https://refactoring.guru/refactoring/techniques\">refactoring catalog</a>, too.</p>\n<h3  id=\"bd-simple-example\" data-id=\"simple-example\">5.1. A (Seemingly) Simple Case</h3>\n<div class=\"bd-anchor\" id=\"simple-example\"></div>\n<p>One of the simplest refactorings is renaming a variable. For example, when our web application starts, we want to change the title and log that the application started. We implemented it with the following JavaScript code:</p>\n<pre><code class=\"language-javascript\">title = &#039;Refactoring&#039;;\n\nfunction logStart() {\n  message = &#039;started&#039;;\n  console.log(message);\n}\n\nlogStart();\ndocument.title = title;</code></pre>\n<p>It works as expected. However, we decide that <em>title</em> would be a more descriptive name for the variable inside <em>logStart()</em>. The modified function looks like this:</p>\n<pre><code class=\"language-javascript\">function logStart() {\n  title = &#039;started&#039;;\n  console.log(title);\n}</code></pre>\n<p>However, the code doesn&#8217;t do the same as before: the title will be &#8220;started&#8221; instead of &#8220;Refactoring&#8221;. The reason is simple. We already defined a variable in the global scope with the name <em>title</em>. We didn&#8217;t declare it in the <em>logStart()</em> function. Therefore, we overwrite the value of the variable.</p>\n<p>The point is: even in the simplest cases, it&#8217;s important to run the tests to prevent unforeseen side effects.</p>\n<h3  id=\"bd-more-complex-example\" data-id=\"more-complex-example\">5.2. A More Complex Case</h3>\n<div class=\"bd-anchor\" id=\"more-complex-example\"></div>\n<p>Let&#8217;s say we implemented the square root calculation in a very efficient way. However, we still need to verify whether we got a valid input. We came up with this solution:</p>\n<pre><code class=\"language-javascript\">function sqrt(value) {\n  if (typeof value !== &#039;number&#039; || value &lt; 0) {\n    return NaN;\n  }\n\n  // the magic happens here\n}</code></pre>\n<p>However, we&#8217;re not satisfied with this. The <em>typeof</em> part of the validation condition could be more readable. We decide to create a function that contains the check, and we call it from the condition:</p>\n<pre><code class=\"language-javascript\">function sqrt(value) {\n  if (isNotNumber(value) || value &lt; 0) {\n    return NaN;\n  }\n\n  // the magic happens here\n}\n\nfunction isNotNumber(value) {\n  return typeof value !== &#039;number&#039;;\n}</code></pre>\n<p>This refactoring is called <a href=\"https://refactoring.guru/extract-method\">extract method</a>.</p>\n<p>Note that we could have used the already existing <em>Number.isNaN()</em> instead of <em>!isNumber(value)</em>. We wanted to provide an easily understandable example.</p>\n<h3  id=\"bd-advanced-example\" data-id=\"advanced-example\">5.3. A Somewhat Advanced Case</h3>\n<div class=\"bd-anchor\" id=\"advanced-example\"></div>\n<p>Let&#8217;s say we have the following Java class:</p>\n<pre><code class=\"language-java\">class Animal {\n  static final int TYPE_DOG = 1;\n  static final int TYPE_CAT = 2;\n  \n  int type;\n  \n  void makeSound() {\n    switch (type) {\n      case TYPE_DOG:\n        System.out.println(&quot;woof&quot;);\n        break;\n      case TYPE_CAT:\n        System.out.println(&quot;meow&quot;);\n        break;\n    }\n  }\n}</code></pre>\n<p>However, we don&#8217;t like this implementation. When we introduce new responsibilities to the class, we have to duplicate the <em>switch</em> statement in other methods, too. Also, if we want to model other animals, we have to add new cases to every <em>switch</em> statement. This makes the code fragile.</p>\n<p>Instead, we decide to get rid of the type code and create separate subclasses for each animal:</p>\n<pre><code class=\"language-java\">interface Animal {\n  void makeSound();\n}\n\nclass Dog implements Animal {\n  @Override\n  void makeSound() {\n    System.out.println(&quot;woof&quot;);\n  }\n}\n\nclass Cat implements Animal {\n  @Override\n  void makeSound() {\n    System.out.println(&quot;meow&quot;);\n  }\n}</code></pre>\n<p>If we want to add a new responsibility, we add a method to the <em>Animal</em> interface. Until we don&#8217;t implement it in every subclass, the code won&#8217;t compile. If we want to add a new animal, we create a class that implements the <em>Animal</em> interface. Again, we&#8217;ll get a compilation error until we implement every method.</p>\n<p>Why do we like compilation errors? Because that way we can&#8217;t miss the fact that we forgot to handle a case. Of course, it doesn&#8217;t matter if we cover all possible cases with tests. But we know that more often than not, our tests don&#8217;t cover everything.</p>\n<p>This refactoring is called <a href=\"https://refactoring.guru/replace-type-code-with-subclasses\">replace typecode with subclasses</a>.</p>\n<h2  id=\"bd-what-should-we-refactor\" data-id=\"what-should-we-refactor\">6. What Should We Refactor?</h2>\n<div class=\"bd-anchor\" id=\"what-should-we-refactor\"></div>\n<h3  id=\"bd-identifying-problems\" data-id=\"identifying-problems\">6.1. Identifying Problems</h3>\n<div class=\"bd-anchor\" id=\"identifying-problems\"></div>\n<p>Until this point, we defined refactoring (what is it), saw its prerequisites (when to do it), and saw three simple examples (how to do it). But how do we know what should we refactor?</p>\n<p><strong>Every time we see a code that&#8217;s readability could be improved, it&#8217;s time to refactor.</strong> But it&#8217;s still not an exact definition. We won&#8217;t be able to provide one. However, we can identify common signs in the code that we should refactor. Sometimes these signs almost scream that we should do something. For example, consider this code:</p>\n<pre><code class=\"language-javascript\">function calculatePrice(user, product, amount) {\n  // loyalty discount\n  const a = user.orders.length &gt; 10 ? 0.9 : 1;\n  // amount discount\n  const b = amount &gt; 100 ? 0.9 : 1;\n  // discounted price\n  const c = product.price * a * b;\n\n  return c * amount;\n}</code></pre>\n<p>Instead of writing comments above the variables, we should give them meaningful names:</p>\n<pre><code class=\"language-javascript\">function calculatePrice(user, product, amount) {\n  const loyaltyDiscount = user.orders.length &gt; 10 ? 0.9 : 1;\n  const amountDiscount = amount &gt; 100 ? 0.9 : 1;\n  const discountedPrice = product.price * loyaltyDiscount * amountDiscount;\n\n  return discountedPrice * amount;\n}</code></pre>\n<p>Sometimes it&#8217;s less obvious, like with the <em>Animal</em> class in the previous section.</p>\n<p><strong>Nevertheless, when we look at problematic code, we can feel that something&#8217;s not right. It smells.</strong> Indeed, we call those signs <a href=\"/cs/code-smells\">code smells</a>.\u00a0Besides code smells, Uncle Bob also calls them heuristics. He provides a list of code smells and heuristics in his excellent book, <a href=\"https://www.oreilly.com/library/view/clean-code-a/9780136083238/\">Clean Code</a>.</p>\n<h3  id=\"bd-performance\" data-id=\"performance\">6.2. Performance</h3>\n<div class=\"bd-anchor\" id=\"performance\"></div>\n<p>We briefly mentioned application performance before. <strong>Micro-optimized code is usually much harder to read. But if it&#8217;s a critical optimization, we should only refactor it to make it more readable when it doesn&#8217;t decrease the performance.</strong></p>\n<p><strong>On the other hand, it&#8217;s much easier to optimize readable code.</strong> It shouldn&#8217;t be a surprise since if we can&#8217;t understand what the code does, we can&#8217;t optimize it either.</p>\n<p>Many refactorings introduce a new level of abstraction. For example, a new method call, a new class, or an entire hierarchy of classes. These abstractions come with a computational cost. Therefore, the application&#8217;s performance slightly decreases. However, this decrease is so insignificant that we don&#8217;t even notice it.</p>\n<p>Even if the impact is noticeable, we usually go with the slower but more readable code. The reason is that usually, <strong>it&#8217;s much cheaper to buy hardware with more performance than the developer&#8217;s additional cost because the code is harder to maintain.</strong></p>\n<p>Of course, there&#8217;re exceptional cases. For example, embedded systems often come with limited resources, which we can&#8217;t improve. Or when we build a global application that handles millions of requests per second, those additional performance requirements pile up to a significant impact. But these are relatively rare cases. Most of the time, readability is the determining factor.</p>\n<h2  id=\"bd-tdd\" data-id=\"tdd\">7. TDD</h2>\n<div class=\"bd-anchor\" id=\"tdd\"></div>\n<p>We already mentioned that we need tests to be able to refactor. In TDD, we write the test before the code to fulfill it. It raises the question: how TDD and refactoring relate to each other?</p>\n<p>The answer is that <strong>TDD and refactoring have a very intimate relationship.</strong> TDD has three steps:</p>\n<ol>\n<li>We write a failing test</li>\n<li>We make the test pass by writing production code</li>\n<li>Finally, we refactor the code and/or the test to make it more readable</li>\n</ol>\n<p>We call this the red-green-refactor cycle. Red, because the tests are failing; therefore, they&#8217;re red. When we make them pass, they become green.</p>\n<p>That&#8217;s one more reason why TDD is awesome. It doesn&#8217;t only guarantee that you&#8217;ll have high test coverage. It also considers that we should make our code more readable while we still know what it does. After all, there isn&#8217;t anything more unknown than the code we wrote last week.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">8. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p><strong>Refactoring is a natural and essential part of a software&#8217;s evolution.</strong></p>\n<p>In this tutorial, we understood what it is and when and how we can do it. We talked about code smells and performance implications. We also saw that refactoring is a fundamental part of TDD.</p>\n<p>With all this, it&#8217;s time to make our code more readable!</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn that refactoring is a natural and essential part of a software&#8217;s evolution</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49633,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [28],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/53162" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=53162"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/53162/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49633"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=53162"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=53162"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=53162"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 52531,
    "date": "2021-03-07T10:29:57",
    "date_gmt": "2021-03-07T10:29:57",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=52531" },
    "modified": "2022-11-11T03:19:58",
    "modified_gmt": "2022-11-11T03:19:58",
    "slug": "program-to-interface",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/program-to-interface",
    "title": { "rendered": "What Does It Mean to Program to Interfaces?" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>At the beginning of our professional career as software developers, most of us program to implementations.</p>\n<p>Later on, either intuitively or because of need, we slowly tend to change this mindset. We write more and more code to abstractions and interfaces.</p>\n<p>In this tutorial, we&#8217;ll see what these terms mean and what pros and cons do they have.</p>\n<h2  id=\"bd-case-study\" data-id=\"case-study\">2. Case Study</h2>\n<div class=\"bd-anchor\" id=\"case-study\"></div>\n<p>To show the different techniques, we&#8217;ll walk through a few simple tasks. Remember the game series Big Car Stealing? We&#8217;re lucky enough to be the developers of the newest version.</p>\n<h3  id=\"bd-wiring-implementations\" data-id=\"wiring-implementations\">2.1. Wiring Implementations Together</h3>\n<div class=\"bd-anchor\" id=\"wiring-implementations\"></div>\n<p>The first task to solve is to make the character drive the cars. Our employer gave us absolute trust to handle the situation the best way we see.</p>\n<p>For the first proof of concept, we&#8217;re focusing only on speeding up and slowing down.</p>\n<p>Our first intuition is to create two classes: <em>Player</em> and <em>Car</em>:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"401\" height=\"90\" class=\"alignnone size-full wp-image-52534\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car.png\" alt=\"player car\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car.png 401w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-300x67.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-100x22.png 100w\" sizes=\"(max-width: 401px) 100vw, 401px\" />\n<p>The only thing we need to do is to invoke the <em>drive()</em> method of the <em>Player</em> class and pass a <em>Car</em> instance.</p>\n<p>We implement everything, and it works like a charm. However, we get our next task. On top of driving a car, we must support driving a truck, as well.</p>\n<p>No problem, we introduce the <em>Truck</em> class and the <em>Player.drive(Truck)</em> method:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"401\" height=\"220\" class=\"alignnone size-full wp-image-52536\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-truck.png\" alt=\"player car truck\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-truck.png 401w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-truck-300x165.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-car-truck-100x55.png 100w\" sizes=\"(max-width: 401px) 100vw, 401px\" />\n<p>So far, so good. But after that, we face the next task: driving boats. (Wait, what? Boats? We thought the game is about cars. Weird.)</p>\n<p><strong>We could repeat the same process we did with the truck. However, we start wondering: how many other things should we able to drive?</strong> We look at the backlog and see 31 different driveable things coming up (including bicycles, planes, submarines, jetpacks, and even space stations).</p>\n<p>Therefore, we need a different approach. How could we do better?</p>\n<h3  id=\"bd-abstractions\" data-id=\"abstractions\">2.2. Using Abstraction</h3>\n<div class=\"bd-anchor\" id=\"abstractions\"></div>\n<p>Abstractions to the rescue! <strong>We decide that we&#8217;ll create an abstract <em>Vehicle</em> class, which will be the superclass of the <em>Car</em>, <em>Truck</em>, <em>Boat</em>, and all future classes.</strong></p>\n<p>Also, this way, we&#8217;ll need a single <em>drive(Vehicle)</em> method in the <em>Player</em> class:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"591\" height=\"250\" class=\"alignnone size-full wp-image-52537\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle.png\" alt=\"player abstract vehicle\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle.png 591w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-300x127.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-100x42.png 100w\" sizes=\"(max-width: 591px) 100vw, 591px\" />\n<p>The next task we get is to handle accidents in the game. During these accidents, the vehicles suffer damage. To support this, we introduce new methods:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"591\" height=\"289\" class=\"alignnone size-full wp-image-52538\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-damage.png\" alt=\"player abstract vehicle damage\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-damage.png 591w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-damage-300x147.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/player-abstract-vehicle-damage-100x49.png 100w\" sizes=\"(max-width: 591px) 100vw, 591px\" />\n<p>However, since the method names <em>break()</em> and <em>brake()</em> are so similar, we confused them, which caused a frustrating debugging session. When we finally find the problem&#8217;s source, we propose a question. <strong>Can we somehow hide those methods we don&#8217;t need?</strong></p>\n<p>We get the idea to create multiple base classes for different scenarios: <em>Driveable</em> and <em>Breakable</em>. We took a class about the BDecreased programming language in the university, which allowed multiple inheritances. However, now we use the HotBrownStuff language, which doesn&#8217;t support that (for good reasons). How can we proceed then?</p>\n<h3  id=\"bd-multiple-abstractions\" data-id=\"multiple-abstractions\">2.3. Using Multiple Abstractions</h3>\n<div class=\"bd-anchor\" id=\"multiple-abstractions\"></div>\n<p>HotBrownStuff has a new concept over BDecreased: interfaces. <strong>A class can implement multiple interfaces, which makes it possible to solve the problem with the following class diagram:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"771\" height=\"356\" class=\"alignnone size-full wp-image-52539\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces.png\" alt=\"interfaces\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces.png 771w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-300x139.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-768x355.png 768w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-100x46.png 100w\" sizes=\"(max-width: 771px) 100vw, 771px\" />\n<p>We&#8217;re close to burnout because of the amount of refactoring we have to do every time a new feature comes. But the development must go on, so we get our next assignment: when we hit a building with a vehicle, it should suffer damage, too. We take a deep breath and get ready to rewrite half of the codebase again.</p>\n<p>However, when we think about solving it, we find a straightforward implementation.</p>\n<p>We make the building implement the <em>Breakable</em> interface:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"981\" height=\"356\" class=\"alignnone size-full wp-image-52540\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-building.png\" alt=\"interfaces building\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-building.png 981w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-building-300x109.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-building-768x279.png 768w, https://www.baeldung.com/wp-content/uploads/sites/4/2021/03/interfaces-building-100x36.png 100w\" sizes=\"(max-width: 981px) 100vw, 981px\" />\n<p>To our surprise, everything is working fine without much effort. The birds are chirping again. The sun is shining. We even smile again. <strong>We can thank all of this for a better architectural design.</strong></p>\n<h3  id=\"bd-summarizing-case-study\" data-id=\"summarizing-case-study\">2.4. Summarizing the Case Study</h3>\n<div class=\"bd-anchor\" id=\"summarizing-case-study\"></div>\n<p>What was the difference between the techniques we used?</p>\n<p><strong>First, we directly used the implementing classes from other classes. Usually, we call this method &#8220;programming to classes&#8221; or &#8220;programming to implementations&#8221;.</strong></p>\n<p>It makes the code tightly coupled because there&#8217;ll be many dependencies between different classes. This makes the code fragile because when we modify one part of the code, it tends to break things in many unexpected places.</p>\n<p><strong>Next, we introduced an abstract class, which decoupled our classes&#8217; clients from the concrete implementations. We call this technique &#8220;programming to abstraction&#8221;.</strong></p>\n<p>But we were still mixing different aspects of the functionality in the same abstraction.</p>\n<p><strong>Last, we introduced multiple abstractions: interfaces. We call this method &#8220;programming to interfaces&#8221;. Note that an interface is also an abstraction. Therefore, this method is the subset of programming to abstractions.</strong></p>\n<p>With interfaces, on top of decoupling implementations, we were able to decouple multiple concepts.</p>\n<p>In a nutshell, when we&#8217;re programming to interfaces, the different business logic parts are not connected through implementations. They&#8217;re connected through interfaces.</p>\n<h2  id=\"bd-consequences\" data-id=\"consequences\">3. Consequences</h2>\n<div class=\"bd-anchor\" id=\"consequences\"></div>\n<p>Let&#8217;s start with the cons. We have to create much more types: interfaces, classes, sometimes abstract classes. It may be overwhelming at first, but we can manage this if we use a good folder/package structure.</p>\n<p>Also, we&#8217;ll need an external component to instantiate the implementations. Preferably, it&#8217;s in the infrastructure and not in the business logic. We&#8217;ll take back to this topic in the section about design patterns.</p>\n<p>But it&#8217;s a small price comparing to the pros. We&#8217;ll explain those benefits in detail in the following sections.</p>\n<h3  id=\"bd-unified-methods\" data-id=\"unified-methods\">3.1. Unified Methods</h3>\n<div class=\"bd-anchor\" id=\"unified-methods\"></div>\n<p>Think about the example with the car, truck, and boat. We used the same method names for all of those, but we could easily name the methods differently without a common ancestor. For example, <em>accelerate()</em>, <em>speedUp()</em>, and <em>goFaster()</em> are all valid candidates to name the same functionality. We could mix those in the different classes. For example, the car could accelerate, the truck speed up, and the boat goes faster.</p>\n<p><strong>With abstractions, we declare a contract between classes. The contract states what kind of operations the implementation will provide to the client.</strong> It doesn&#8217;t say a thing about how those operations are working, though &#8211; which is a good thing. This way, we can focus on what we want to do instead of how we can do that.</p>\n<h3  id=\"bd-hiding-implementation\" data-id=\"hiding-implementation\">3.2. Hiding the Implementations</h3>\n<div class=\"bd-anchor\" id=\"hiding-implementation\"></div>\n<p><strong>Only the interface is visible to other parts of the business logic. We should strive to keep these interfaces small, simple, and straight to the point to increase cohesion. In other words, with abstractions, we introduce boundaries between different parts of the application.</strong></p>\n<p>If we do this, we won&#8217;t accidentally leak implementation details, which tend to introduce tight coupling between different components. This would make refactoring and modification hard. Also, it&#8217;ll make the code harder to understand.</p>\n<p>On top of that, since we don&#8217;t see (at first sight) the implementing classes, only the abstraction (therefore, the contract). Therefore, we can more easily comprehend the logic of the code. Again, we can focus on what the class does instead of how it does that. Also, we don&#8217;t have to keep in mind the names and responsibilities of dozens of classes. The abstraction hides all those details.</p>\n<p>For example, the JDBC API defines many interfaces and a single class. The JDBC drivers implement those interfaces. However, we don&#8217;t use those classes from our application code. We only use the core JDBC types.</p>\n<h3  id=\"bd-testability\" data-id=\"testability\">3.3. Testability</h3>\n<div class=\"bd-anchor\" id=\"testability\"></div>\n<p><strong>Louse coupling and fewer responsibilities make the code more testable.</strong></p>\n<p>Since we depend on interfaces, we can easily pass test doubles instead of concrete implementations. Also, since these interfaces are smaller and have well-defined responsibilities, providing mocks for those is straightforward.</p>\n<h3  id=\"bd-multiple-implementations\" data-id=\"multiple-implementations\">3.4. Introducing Multiple Implementations</h3>\n<div class=\"bd-anchor\" id=\"multiple-implementations\"></div>\n<p><strong>We also saw that we could introduce new implementations without modifying the client code.</strong> It&#8217;s a powerful concept because we can extend the details in any way we please. If we have new requirements, we can get rid of the old implementation and replace it with a new one. For example, if we abstract the data access layer, we can switch from an SQL database to a graph database without changing the business logic.</p>\n<p>JDBC also relies on this concept. If we decide to use a different database engine, the only thing we need to do is to replace the JDBC driver. The application code will stay the same because it&#8217;s independent of the implementing classes.</p>\n<h2  id=\"bd-connection-to-solid\" data-id=\"connection-to-solid\">4. Connection to <em>SOLID</em> Principles</h2>\n<div class=\"bd-anchor\" id=\"connection-to-solid\"></div>\n<p>Programming to interfaces makes it easier to follow multiple <a href=\"/solid-principles\">SOLID</a> principles.</p>\n<ul>\n<li id=\"single-responsibility\"><a href=\"/java-single-responsibility-principle\">Single Responsibility Principle</a>:\u00a0By creating small interfaces, we define obvious responsibilities for implementing classes. It makes it easier to follow the SRP, especially when we make our classes implement only a handful or even a single interface.</li>\n<li id=\"open-closed\"><a href=\"/java-open-closed-principle\">Open/Closed Principle</a>:\u00a0With loose coupling and hidden implementations, following OCP is also more straightforward. Since the client code doesn&#8217;t rely on the implementation, we can introduce additional subclasses as needed.</li>\n<li id=\"liskov-substitution\"><a href=\"/cs/liskov-substitution-principle\">Liskov Substitution Principle</a>:\u00a0LSP is not directly connected to this technique. However, we must take care when we&#8217;re designing our inheritance hierarchy to follow this principle, too.</li>\n<li id=\"interface-segregation\"><a href=\"/java-interface-segregation\">Interface Segregation Principle</a>: ISP isn&#8217;t a result but a good practice to follow when we&#8217;re programming interfaces. Note that we already talked about the importance of defining small, well-defined responsibilities. Those notes were hidden hints to follow ISP.</li>\n<li id=\"dependency-inversion\"><a href=\"/java-dependency-inversion-principle\">Dependency Inversion Principle</a>:\u00a0<strong>By relying on abstractions, we already did the majority of the work to follow DIP.</strong> The last thing to do is to expect dependencies from an external party instead of instantiating them internally.</li>\n</ul>\n<p>Note that with only depending on interfaces, this last step is already inferred. We cannot instantiate a class without depending on it.</p>\n<h2  id=\"bd-design-patterns\" data-id=\"design-patterns\">5. Related Design Patterns</h2>\n<div class=\"bd-anchor\" id=\"design-patterns\"></div>\n<p>We already mentioned that we need some infrastructure to instantiate the implementations. Usually, we solve this problem using the Factory, <a href=\"/creational-design-patterns#factory-method\">Factory Method</a>, Static Factory Method, <a href=\"/java-abstract-factory-pattern\">Abstract Factory</a>, and <a href=\"/creational-design-patterns#builder\">Builder</a> patterns. Using Dependency Injection (preferably through a framework, like <a href=\"/spring-dependency-injection\">Spring</a>, <a href=\"/java-ee-cdi\">CDI</a>, or <a href=\"/guice\">Guice</a>) makes this straightforward.</p>\n<p>Of course, depending on the requirements, we may mix some of these patterns. It depends on the exact problem at hand.</p>\n<p>The previous patterns make it easier to program interfaces. On the other side of the coin, some patterns rely on abstractions. Therefore, programming to interfaces will make it easier to use them. A few examples are <a href=\"/java-adapter-pattern\">Adapter</a>, <a href=\"/java-composite-pattern\">Composite</a>, <a href=\"/java-decorator-pattern\">Decorator</a>, <a href=\"/java-proxy-pattern\">Proxy</a>, <a href=\"/java-mediator-pattern\">Mediator</a>, <a href=\"/java-observer-pattern\">Observer</a>, <a href=\"/java-state-design-pattern\">State</a>, <a href=\"/java-strategy-pattern\">Strategy</a>, and <a href=\"/java-visitor-pattern\">Visitor</a>.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>Programming to interfaces looks tedious to beginners because of the higher number of interfaces and classes. Also, introducing many dependency hierarchies may be strange at first, too.</p>\n<p>However, we&#8217;re following good OO practices and principles. Programming to interfaces will make our application loosely coupled, more extensible, more testable, more flexible, and easier to understand. It takes time and practice to master it, but it&#8217;s worth the effort.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A quick and practical introduction to programming to an interface.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49635,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [28],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/52531" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=52531"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/52531/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 60943,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/52531/revisions/60943"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49635"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=52531"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=52531"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=52531"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 52002,
    "date": "2020-12-08T17:20:18",
    "date_gmt": "2020-12-08T17:20:18",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=52002" },
    "modified": "2020-12-08T17:20:18",
    "modified_gmt": "2020-12-08T17:20:18",
    "slug": "oop-vs-functional",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/oop-vs-functional",
    "title": { "rendered": "Object-Oriented vs Functional Programming" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Today the most popular programming languages are based on object-oriented or functional paradigms.</p>\n<p>In this tutorial, we&#8217;ll explore their characteristics and compare them.</p>\n<h2  id=\"bd-oo-programming\" data-id=\"oo-programming\">2. Object-Oriented Programming</h2>\n<div class=\"bd-anchor\" id=\"oo-programming\"></div>\n<p><strong>The most important building block that defines object-oriented languages is the object itself.</strong> Without objects, we can&#8217;t talk about object-orientation.</p>\n<p>Object-orientation has multiple forms. For example, class-based inheritance (like Java or C#) or prototypal inheritance (like JavaScript). On top of that, <a href=\"/cs/oop-modeling-real-world\">objects embrace many core concepts</a>. For us, the important one is encapsulation.</p>\n<p>Encapsulation states that an object contains data and the operations, which work on the data. Moreover, in pure object-oriented languages, operations (functions) can&#8217;t exist outside of objects.</p>\n<p><strong>In short, objects focus on data. Operations only come after.</strong></p>\n<p>For example, Java is a pure object-oriented language. Meanwhile, JavaScript or C++ isn&#8217;t. Even lambda expressions and methods references didn&#8217;t change Java&#8217;s pure object-oriented nature since they&#8217;re just syntactic sugar to define classes.</p>\n<p>Since primitive values aren&#8217;t objects, the presence of those makes Java impure in theory. However, getting rid of primitive values would make a language rather inconvenient.</p>\n<h2  id=\"bd-functional-programming\" data-id=\"functional-programming\">3. Functional Programming</h2>\n<div class=\"bd-anchor\" id=\"functional-programming\"></div>\n<p><strong>In <a href=\"/cs/functional-programming\">functional programming</a>, functions are the first-class-citizens.</strong> For example, they can be passed as a parameter for other functions, or we can store them in variables.</p>\n<p>Functions get arguments, make operations on those, and usually return the result. Functions can also have side effects (e.g., modifying local or global state, performing I/O operations, etc.).</p>\n<p>However, we prefer pure functions, which have the following two characteristics:</p>\n<ul>\n<li>for the same inputs, they always have the same output (therefore, they don&#8217;t depend on any state, just the inputs)</li>\n<li>they have no side effects</li>\n</ul>\n<p>Because of these attributes, pure functions are deterministic, more testable, and much easier to use with other functions.</p>\n<p>Note that a function without a return value is only useful if it has a side effect.</p>\n<p>In theory, all of this sounds fine, but an application with only pure functions wouldn&#8217;t be of such use. The reason is that without side effects, it wouldn&#8217;t be able to produce any meaningful output because it requires I/O operations.</p>\n<p><strong>To sum up, functional programming focuses on operations rather than data.</strong></p>\n<p>Some examples of a functional language are Haskell, <a href=\"/scala-intro\">Scala</a>, Clojure, or Erlang.</p>\n<h2  id=\"bd-comparison\" data-id=\"comparison\">4. Comparison</h2>\n<div class=\"bd-anchor\" id=\"comparison\"></div>\n<p>Object-oriented and functional programming have different base concepts, but what does it mean for us? How different are they?</p>\n<p>It turns out they&#8217;re very different. <strong>They&#8217;re as much different, as we can only compare them like we can compare two perpendicular lines. Indeed, we often say that they&#8217;re orthogonal paradigms.</strong> But what does it mean?</p>\n<p>It means that they aren&#8217;t mutually exclusive. <strong>A functional language can have object-oriented characteristics, and an object-oriented language can have functional characteristics.</strong> We call these languages multi-paradigm languages.</p>\n<p>Java, which is considered an object-oriented language, has the stream API, which helps functional style code. Likewise, C# has LINQ.</p>\n<p>On the other hand, objects can be used as data structures in functional languages. On top of that, Scala even has classes.</p>\n<p><strong>Even if an OO language doesn&#8217;t have first-class support for functional programming, we can mimic it using immutable objects and model functions as worker objects with a single method.</strong></p>\n<p><strong>Similarly, in functional languages, we can create objects, which operate on the encapsulated data.</strong> If the language allows variable reassignment, the objects can be mutable. Otherwise, we can only have immutable objects.</p>\n<h2  id=\"bd-when-to-use\" data-id=\"when-to-use\">5. When to Use Which?</h2>\n<div class=\"bd-anchor\" id=\"when-to-use\"></div>\n<p><strong>Since OO focuses on data, it makes a great candidate for data modeling. On the other hand, since functional programming focuses on operations, it should be used for processing data.</strong></p>\n<p>Indeed, Java 8 uses the same philosophy in its stream API. To model data, we use classes, therefore OO principles. To process that data, chain operations functional-style. What makes it more readable is defining what operations we want to do instead of how we want to do the processing.</p>\n<h2  id=\"bd-what-paradigm-comes-next\" data-id=\"what-paradigm-comes-next\">6. What Paradigm Comes Next?</h2>\n<div class=\"bd-anchor\" id=\"what-paradigm-comes-next\"></div>\n<p>Robert C. Martin has a short chapter for paradigm overview in his great book, <a href=\"https://www.pearson.com/us/higher-education/program/Martin-Clean-Architecture-A-Craftsman-s-Guide-to-Software-Structure-and-Design/PGM333762.html\">Clean Architecture</a>. It summarizes structural, object-oriented, and functional programming in the following sentences:</p>\n<blockquote><p>Structure programming imposes discipline on direct transfer of control.</p>\n<p>Object-oriented programming imposes discipline on indirect transfer of control.</p>\n<p>Functional programming imposes discipline upon assignment.</p></blockquote>\n<p>After that, he writes the following:</p>\n<blockquote><p>Notice the pattern that I&#8217;ve quite deliberately set up in introducing these three programming paradigms: Each of the paradigms <em>removes</em> capabilities from the programmer. None of them adds new capabilities. Each imposes some kind of extra discipline that is <em>negative</em> in its intent. The paradigms tell us what <em>not</em> to do, more than they tell us what <em>to</em> do.</p>\n<p>Another way to look at this issue is to recognize that each paradigm takes something away from us. The three paradigms together remove goto statements, function pointers, and assignment. Is there anything left to take away?</p>\n<p>Probably not. Thus these three paradigms are likely to be the only three we will see \u2013 at least the only three that are negative. Further evidence that there are no more such paradigms is that they were all discovered within the ten years between 1958 and 1968. In the many decades that have followed, no new paradigms have been added.</p></blockquote>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">7. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this short article, we saw that object-oriented and functional programming are not mutually exclusive. They both have their strengths, and by combining those, we can get a tool, which is better than both.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn about object-oriented and functional programming and discover that they are not mutually exclusive.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49634,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [28],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/52002" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=52002"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/52002/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49634"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=52002"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=52002"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=52002"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 51820,
    "date": "2020-11-12T19:08:46",
    "date_gmt": "2020-11-12T19:08:46",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=51820" },
    "modified": "2022-11-11T11:38:02",
    "modified_gmt": "2022-11-11T11:38:02",
    "slug": "polymorphism",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/polymorphism",
    "title": { "rendered": "The General Concept of Polymorphism" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>The <a href=\"https://www.lexico.com/en/definition/polymorphism\">dictionary</a> defines polymorphism as &#8220;the condition of occurring in several different forms&#8221;. Since polymorphism appears in multiple fields of science, it&#8217;s a general definition. Maybe the computing definition will be more meaningful for us: &#8220;<strong>[polymorphism is] a\u00a0feature of a programming language that allows routines to use variables of different types at different times</strong>&#8220;.</p>\n<p>In this tutorial, we&#8217;ll explore what this sentence means. But first, we should understand how we perceive the surrounding world.</p>\n<h2  id=\"bd-polymorphism-real-world\" data-id=\"polymorphism-real-world\">2. Polymorphism in the Real World</h2>\n<div class=\"bd-anchor\" id=\"polymorphism-real-world\"></div>\n<p><strong>Our mind generalizes things around us.</strong> It looks for similarities between them and puts them into categories. These categories can be general, therefore containing many items\u2014for example, animals. On the other hand, they can be rather specific. Hence, they contain significantly fewer elements &#8211; for instance, black, three-legged tables.</p>\n<p><strong>We call this categorization process classification. As a result, the categories are called classes.</strong></p>\n<p>Evolution led us to develop this behavior because it helped us to make better and faster decisions. As a result, we had a better chance of surviving. Think of everyday situations a prehistoric man could face. If they saw a sabertooth tiger, they ran or hid. If they saw a rabbit, they didn&#8217;t. They didn&#8217;t meet every rabbit or sabertooth tiger, but they recognized one when they saw them because they saw enough of them to create classes, which described these animals accurately enough.</p>\n<p><strong>But similar things don&#8217;t just have similar properties. Besides, they have similar behaviors. And that&#8217;s what makes polymorphism really powerful.</strong></p>\n<p>Think of employees. From the employer&#8217;s perspective, the most important behavior of an employee is working. And every employer knows how to do their job. At least in an ideal world, but let&#8217;s assume that we live in one.</p>\n<p><strong>It means that every morning the boss only has to tell the employees to start working. And they do, without the boss&#8217; interference.</strong> (Yes, it&#8217;s a ridiculous assumption. But let&#8217;s remember, it&#8217;s an ideal world.) The boss doesn&#8217;t have to tell every employee what to do. <strong>They autonomously do what they have to.</strong></p>\n<p>How would it look like if they weren&#8217;t autonomous? The boss would go around like this:</p>\n<ul>\n<li>What&#8217;s your role?</li>\n<li>I&#8217;m a backend developer.</li>\n<li>Then create an endpoint, which executes a batch job. When the job is done, store the result in the database and send a notification to the user.</li>\n</ul>\n<p>Then he moves to the next employee:</p>\n<ul>\n<li>What&#8217;s your role?</li>\n<li>I&#8217;m a UX designer.</li>\n<li>Then create a wireframe, focusing on accessibility. Use the mobile-first approach. If it&#8217;s ready, run some research with a focus group.</li>\n</ul>\n<p>And then this would go on and on. (We&#8217;re aware that this exists. It&#8217;s called micromanagement. But fortunately, it doesn&#8217;t exist in our little utopistic world.)</p>\n<p>For larger companies, the second approach isn&#8217;t feasible. That&#8217;s why they rely on employees to know how to do their job.</p>\n<h2  id=\"bd-polymorphism-programming\" data-id=\"polymorphism-programming\">3. Polymorphism in Programming</h2>\n<div class=\"bd-anchor\" id=\"polymorphism-programming\"></div>\n<p><strong>In programming, they usually associate polymorphism with the object-oriented paradigm. Since it&#8217;s far the most popular paradigm, we&#8217;ll also talk about that. However, note that functional and structural programming has polymorphic capabilities, such as higher-order functions or function pointers.</strong></p>\n<p>Let&#8217;s revisit our employee example in OO programming. How would we model this?</p>\n<p>The simplest solution is to have an\u00a0<em>Employee</em> superclass and two children:\u00a0<em>BackendDeveloper</em> and\u00a0<em>UxDesigner</em>:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"401\" height=\"184\" class=\"aligncenter size-full wp-image-51823\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-simple.png\" alt=\"employees simple\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-simple.png 401w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-simple-300x138.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-simple-100x46.png 100w\" sizes=\"(max-width: 401px) 100vw, 401px\" />\n<p>As we can see, the <em>Employee</em> class has a single abstract method: <em>work()</em>. Both of the child classes implement that method differently.</p>\n<p>With this in place, we can create a <em>Boss</em> class, which can easily order the employees to do their job:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"561\" height=\"197\" class=\"aligncenter size-full wp-image-51822\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/boss-employees-simple.png\" alt=\"boss employees simple\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/boss-employees-simple.png 561w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/boss-employees-simple-300x105.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/boss-employees-simple-100x35.png 100w\" sizes=\"(max-width: 561px) 100vw, 561px\" />\n<h2  id=\"bd-advantages\" data-id=\"advantages\">4. Advantages</h2>\n<div class=\"bd-anchor\" id=\"advantages\"></div>\n<p>Micromanagement exists for a reason (even if it&#8217;s a bad one). There are bosses, who are control freaks and love to boss around (pun intended). In programming, we like to follow a different approach.</p>\n<p><strong>When we want to control another class&#8217;s behavior completely, we have to know everything about it. Every little detail. That&#8217;s manageable for one or two external classes, but above that, things get messy. Furthermore, it makes it hard to extend the system with other classes.</strong></p>\n<p>Let&#8217;s assume the company wants to expand and produce hardware. That would mean the boss had to know what an electrical engineer, a mechanical engineer, and other new roles do. (Which is even more challenging considering he doesn&#8217;t even know what current employees do. He only thinks he does know.)</p>\n<p>In programming, that means we have to implement all new roles&#8217; behavior in the <em>Boss</em> class. It would get out of hand pretty fast.</p>\n<p>Instead, we use polymorphism. We implement the functionality in the new\u00a0<em>ElectricalEngineer</em> and\u00a0<em>MechanicalEngineer</em> classes:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"561\" height=\"317\" class=\"aligncenter size-full wp-image-51821\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-full.png\" alt=\"employees full\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-full.png 561w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-full-300x170.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/11/employees-full-100x57.png 100w\" sizes=\"(max-width: 561px) 100vw, 561px\" />\n<p><strong>After that, the only thing we have to do is to hire them and add them to the <em>employee</em> list in the\u00a0<em>Boss</em> class.</strong></p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this short article, we saw what polymorphism is. With that knowledge, we can now revisit and interpret our definition: &#8220;[polymorphism is] a feature of a programming language that allows routines to use variables of different types at different times&#8221;.</p>\n<p>A variable that has\u00a0<em>Employee</em> type can contain any employee descendant. The only thing we know (and need) that we want them to work. Therefore, we call their <em>work()</em> method. We don&#8217;t know exactly how they will do it because it&#8217;ll be determined at runtime, depending on the exact type of employee the variable holds. But that&#8217;s enough for us because we have faith that all of our employees know how to do their job.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn what polymorphism is with examples.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49634,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [11],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/51820" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=51820"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/51820/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 61032,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/51820/revisions/61032"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49634"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=51820"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=51820"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=51820"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 50780,
    "date": "2020-08-09T16:19:04",
    "date_gmt": "2020-08-09T16:19:04",
    "guid": { "rendered": "https://www.baeldung.com/cs/?p=50780" },
    "modified": "2022-11-15T14:02:12",
    "modified_gmt": "2022-11-15T14:02:12",
    "slug": "oop-modeling-real-world",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/cs/oop-modeling-real-world",
    "title": { "rendered": "Object-Orientation in the Real World" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Object-oriented programming tries to model the world similarly as our brains do.</p>\n<p>In this short tutorial, we&#8217;ll explore the core concepts behind this modeling.</p>\n<h2  id=\"bd-how-we-see-the-world\" data-id=\"how-we-see-the-world\">2. How We See the World</h2>\n<div class=\"bd-anchor\" id=\"how-we-see-the-world\"></div>\n<p><strong>The human brain doesn&#8217;t process the world as it is: it simplifies it.</strong> Otherwise, it wouldn&#8217;t be able to handle the tremendous amount of information it receives every second. Of course, it matters how we simplify the world: we take into account the important things and ignore the others.</p>\n<p><strong>In other words, we create a model of the world in our minds:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"500\" height=\"400\" class=\"aligncenter size-full wp-image-50790\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/modeling-mind.png\" alt=\"modeling mind\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/modeling-mind.png 500w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/modeling-mind-300x240.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/modeling-mind-100x80.png 100w\" sizes=\"(max-width: 500px) 100vw, 500px\" />\n<h2  id=\"bd-classes\" data-id=\"classes\">3. Modeling With Classes</h2>\n<div class=\"bd-anchor\" id=\"classes\"></div>\n<p><strong>This modeling process is based on finding similarities between things.</strong> When our brain finds two items to appear similar enough, it puts them into the same category, otherwise in different categories.</p>\n<p>For example, dogs are similar enough to put them in the same category. (Indeed, the word &#8220;dog&#8221; is the category itself. We&#8217;ll get back to this in a moment.) We know a dog has properties such as weight and color, and it can do something, for example, bark and wag its tail:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"373\" height=\"218\" class=\"aligncenter size-full wp-image-50789\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-1.png\" alt=\"classification 1\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-1.png 373w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-1-300x175.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-1-100x58.png 100w\" sizes=\"(max-width: 373px) 100vw, 373px\" />\n<p>Dogs, cats, and tables are similar in the terms that usually all of them have four legs. But we wouldn&#8217;t consider putting a table in the same category, with dogs and cats. However, dogs and cats are similar enough for us to create a category in which all of them fit: mammals, or animals:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"500\" height=\"400\" class=\"aligncenter size-full wp-image-50788\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-2.png\" alt=\"classification 2\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-2.png 500w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-2-300x240.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-2-100x80.png 100w\" sizes=\"(max-width: 500px) 100vw, 500px\" />\n<p><strong>We have many other categories, depending on how broad we want the category to be.</strong> We can even come up with a category, in which tables can fit too: four-legged-things:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"500\" height=\"400\" class=\"aligncenter size-full wp-image-50787\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-3.png\" alt=\"classification 3\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-3.png 500w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-3-300x240.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/classification-3-100x80.png 100w\" sizes=\"(max-width: 500px) 100vw, 500px\" />\n<p><strong>This categorization has a more scientific name: classification. Therefore, we prefer to call these categories classes.</strong></p>\n<h2  id=\"bd-objects\" data-id=\"objects\">4. Objects: Classes in the Real World</h2>\n<div class=\"bd-anchor\" id=\"objects\"></div>\n<p>As we&#8217;ve mentioned, a class represents the similarities between the things we label with the class.</p>\n<p><strong>These classes or models don&#8217;t exist in the real world. They&#8217;re abstractions of reality, only present in our minds:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"265\" height=\"257\" class=\"aligncenter size-full wp-image-50786\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-1.png\" alt=\"objects 1\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-1.png 265w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-1-100x97.png 100w\" sizes=\"(max-width: 265px) 100vw, 265px\" />\n<p>We never met the thing we call &#8216;dog&#8217;. Yes, it sounds ridiculous, but we need to understand the difference. When we say the sentence &#8216;I saw a dog today&#8217; is just a short version to &#8216;I saw a creature today, which I classified as a dog&#8217;:</p>\n<img decoding=\"async\" loading=\"lazy\" width=\"500\" height=\"400\" class=\"aligncenter size-full wp-image-50785\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-2.png\" alt=\"objects 2\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-2.png 500w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-2-300x240.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/objects-2-100x80.png 100w\" sizes=\"(max-width: 500px) 100vw, 500px\" />\n<p>What exists in reality (or at least, existed) are Lassie or Laika. They&#8217;re balls of fur and love, which we can pet.</p>\n<p><strong>We don&#8217;t see the dog class itself, but instances of the dog class in the real world. We often call these instances objects.</strong></p>\n<h2  id=\"bd-encapsulation\" data-id=\"encapsulation\">5. Encapsulation: Data and Behavior</h2>\n<div class=\"bd-anchor\" id=\"encapsulation\"></div>\n<p>Dogs can be big or small. They may be grey or brown. Besides, they recognize their name. <strong>These are properties of the dogs \u2014 data, which we know about them.</strong> Every dog has these properties; hence we assign these to the dog class itself. But every dog has different values for these properties.</p>\n<p>We don&#8217;t necessarily know the values of these properties, but we can obtain them because we know they exist. For example, we can look at them to see their color or ask their owner to learn their name.</p>\n<p><strong>In programming, we store theis data in fields:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"161\" height=\"89\" class=\"aligncenter size-full wp-image-50784\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-1.png\" alt=\"encapsulation 1\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-1.png 161w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-1-100x55.png 100w\" sizes=\"(max-width: 161px) 100vw, 161px\" />\n<p>On top of that, objects have behavior. Dogs can change their state (sit or lay), interact with other objects (fetch a ball), or their environment (make everyone smile around them by acting funny).</p>\n<p><strong>In programming, we represent these behaviors in methods.</strong></p>\n<p><strong>We define both fields and methods in a class. As a result, all instances will have these properties and behaviors.</strong> More importantly, we wrap these seemingly unrelated concepts (data and behavior) into a single entity. <strong>In other terms, we encapsulate data and the actions which operate on them:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"161\" height=\"164\" class=\"aligncenter size-full wp-image-50783\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-2.png\" alt=\"encapsulation 2\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-2.png 161w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/encapsulation-2-100x102.png 100w\" sizes=\"(max-width: 161px) 100vw, 161px\" />\n<p>It makes perfect sense: we tell the dog, and it sits. We don&#8217;t put a standing dog in a device, which spits out a sitting dog. Instead, we couple the action with the data because that&#8217;s how the world works.</p>\n<h2  id=\"bd-relationships\" data-id=\"relationships\">6. The Power of Relationships</h2>\n<div class=\"bd-anchor\" id=\"relationships\"></div>\n<p>Objects can do a lot of things in themselves. But they can do even more when they cooperate. In that case, they&#8217;re in a relationship. <strong>Cooperating objects are much more than the sum of them.</strong></p>\n<p>For example, when the owner throws a ball, it flies away. But the dog runs after the ball, catches it, and brings it back to its owner. This little dance between the owner, the dog, and the ball wouldn&#8217;t be possible without any of the participants.</p>\n<p><strong>These relationships can have many forms.</strong> For more details, please visit our (techy-er) articles about <a href=\"/java-inheritance\">inheritance</a>, <a href=\"/java-inheritance-composition\">composition, aggregation, association</a>, and the <a href=\"/java-composition-aggregation-association\">difference between them</a>.</p>\n<p><strong>A fun fact: in programming, we model some relationships as data.</strong></p>\n<h2  id=\"bd-visibility\" data-id=\"visibility\">7. Visibility: Hiding What Others Shouldn&#8217;t See</h2>\n<div class=\"bd-anchor\" id=\"visibility\"></div>\n<p><strong>Objects can have data and behavior we don&#8217;t want to see, or we shouldn&#8217;t see. These details are part of the inner working of the objects. In programming, we call them implementation details.</strong></p>\n<p>For example, we don&#8217;t see a dog&#8217;s organs because the dog&#8217;s body hides them. We don&#8217;t have a clue about their existence or their working.</p>\n<p>This is a good thing, as <strong>these things are too complicated for us to understand in most scenarios.</strong> We don&#8217;t usually want to know how to pump blood through a dog&#8217;s veins and lead electricity through its nerves just to make it run. We want one simple thing: a running dog.</p>\n<p><strong>The dog uses a simple solution: it publishes a set of well-defined behaviors to the outside world and keeps the other details to itself.</strong> The dog doesn&#8217;t want the outside world to have the power to intervene in its internal state. It would make it possible to have too much control over the dog, which we want to avoid. <strong>With great power comes great responsibility:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"221\" height=\"164\" class=\"aligncenter size-full wp-image-50782\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/visibility.png\" alt=\"visibility\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/visibility.png 221w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/visibility-100x74.png 100w\" sizes=\"(max-width: 221px) 100vw, 221px\" />\n<p>In programming, an object&#8217;s fields and methods can be independently accessible by other objects. For example, in Java, we control these with <a href=\"/java-access-modifiers\">access modifiers</a>.</p>\n<h2  id=\"bd-immutability\" data-id=\"immutability\">8. State Handling: Mutable or Immutable</h2>\n<div class=\"bd-anchor\" id=\"immutability\"></div>\n<p><strong>Objects can be mutable and immutable, depending on if they can change their internal state (data) or not, respectively.</strong></p>\n<p>For example, dogs are mutable because their weight changes depending on how much they eat. In contrast, a banknote is immutable. After it comes out of the printer, it&#8217;s currency and value won&#8217;t change. A $10 bill will never become a \u20ac5 bill.</p>\n<p><strong>In most programming languages, objects are mutable by default. We need to do additional work to <a href=\"/java-immutable-object\">make them immutable</a>.</strong></p>\n<h2  id=\"bd-variables\" data-id=\"variables\">9. Referencing Things</h2>\n<div class=\"bd-anchor\" id=\"variables\"></div>\n<p><strong>Sometimes we want to specify which object we&#8217;re talking about.</strong> For example, we may have multiple dogs. To avoid confusion, we name them and call them by their names. Also, they can have numerous names, for example, nicknames. Nevertheless, dogs answer to their names. We reference or point to a specific dog by its name.</p>\n<p>When we talk about a dog, we put its reference in the middle of the sentence. For example, when a family has a dog, and someone says, &#8216;I&#8217;ll walk the dog,&#8217; everyone knows which dog she means. But unfortunately, dogs have a shorter lifespan than humans do, which means that the dog can die, and the family can have a new dog. When this happens, the same &#8216;I&#8217;ll walk to the dog&#8217; sentence will mean a different thing.</p>\n<p>It&#8217;s the same variable, but it refers to a different object. <strong>The value of the variable can change:</strong></p>\n<img decoding=\"async\" loading=\"lazy\" width=\"391\" height=\"271\" class=\"aligncenter size-full wp-image-50781\" src=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/referencing.png\" alt=\"referencing\" srcset=\"https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/referencing.png 391w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/referencing-300x208.png 300w, https://www.baeldung.com/wp-content/uploads/sites/4/2020/08/referencing-100x69.png 100w\" sizes=\"(max-width: 391px) 100vw, 391px\" />\n<p>In programming, we store objects in memory. But we can&#8217;t access them directly; we need a way to refer to that particular memory address, where an object is. To do this, we use variables, which are references to parts of the memory. These variables have names, so we can understand what object they hold.</p>\n<h2  id=\"bd-constants\" data-id=\"constants\">10. Things That Don&#8217;t Change</h2>\n<div class=\"bd-anchor\" id=\"constants\"></div>\n<p>There are constant things in life. When we refer to these, the time is irrelevant; they always mean the same thing.</p>\n<p>For example, when we say Earth, it always means the same planet. Of course, someday, the Sun will expand, explode, and destroy the Earth, but there won&#8217;t be another planet that will take its place. Earth is this ball of rock we live on, and nothing else.</p>\n<p>In programming, we can&#8217;t assign a new value to a constant. Depending on the programming language, the exact time when a constant gets its value may change.</p>\n<h2  id=\"bd-constants-vs-immutables\" data-id=\"constants-vs-immutables\">11. Constants vs. Immutables</h2>\n<div class=\"bd-anchor\" id=\"constants-vs-immutables\"></div>\n<p>To put things together: variables refer to objects. Two things can change here: the internal state of the object, and the object itself that the variable points to.</p>\n<p>Immutability is about the internal state of objects. Final or nonfinal is whether we can change which objects we refer to.</p>\n<p>These things are independent. We can have all four combinations.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">12. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>Object-oriented programming works so great because it tries to model the world with the same modeling techniques as our brain does.</p>\n<p>In this article, we introduced these concepts and demonstrated them with simple, real-life examples.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the core concepts behind the object-oriented programming.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49635,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [28],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/50780" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/cs/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/comments?post=50780"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/50780/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 61211,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/posts/50780/revisions/61211"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media/49635"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/media?parent=50780"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/categories?post=50780"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/cs/wp-json/wp/v2/tags?post=50780"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
