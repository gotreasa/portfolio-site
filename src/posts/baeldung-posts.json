[
  {
    "id": 86778,
    "date": "2020-09-08T18:23:32",
    "date_gmt": "2020-09-08T16:23:32",
    "guid": { "rendered": "https://www.baeldung.com/?p=86778" },
    "modified": "2022-07-21T19:43:36",
    "modified_gmt": "2022-07-21T17:43:36",
    "slug": "difference-between-when-and-doxxx-methods-in-mockito",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-mockito-when-vs-do",
    "title": {
      "rendered": "Difference Between when() and doXxx() Methods in Mockito"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p><a href=\"/mockito-series\">Mockito</a> is a popular Java mocking framework. With it, it's simple to <a href=\"/mockito-mock-methods\">create mock objects</a>, <a href=\"/mockito-behavior\">configure mock behavior</a>, <a href=\"/mockito-argument-matchers\">capture method arguments</a>, and <a href=\"/mockito-verify\">verify interactions with mocks</a>.</p>\n<p><strong>Now, we'll focus on specifying mock behavior. We have two ways to do that: the\u00a0<em>when().thenDoSomething()</em> and the <em>doSomething().when()</em> syntax.</strong></p>\n<p>In this short tutorial, we'll see why we have both of them.</p>\n<h2  id=\"bd-when-method\" data-id=\"when-method\">2. <em>when()</em> Method</h2>\n<div class=\"bd-anchor\" id=\"when-method\"></div>\n<p>Let's consider the following <em>Employee</em> interface:</p>\n<pre><code class=\"language-java\">interface Employee {\n    String greet();\n    void work(DayOfWeek day);\n}</code></pre>\n<p>In our tests, we use a mock of this interface. Let's say we want to configure the mock's <em>greet()</em> method to return the string <em>&#8220;Hello&#8221;</em>. It's straightforward to do so using Mockito's <em>when()</em> method:</p>\n<pre><code class=\"language-java\">@Test\nvoid givenNonVoidMethod_callingWhen_shouldConfigureBehavior() {\n    // given\n    when(employee.greet()).thenReturn(&quot;Hello&quot;);\n\n    // when\n    String greeting = employee.greet();\n\n    // then\n    assertThat(greeting, is(&quot;Hello&quot;));\n}</code></pre>\n<p>What happens? The <em>employee</em> object is a mock. <strong>When we call any of its methods, Mockito registers that call. With the call of the <em>when()</em> method, Mockito knows that this invocation wasn't an interaction by the business logic. It was a statement that we want to assign some behavior to the mock object. After that, with one of the <em>thenXxx()</em> methods, we specify the expected behavior.</strong></p>\n<p>Until this point, it's good old mocking. Likewise, we want to configure the <em>work()</em> method to throw an exception, when we call it with an argument of Sunday:</p>\n<pre><code class=\"language-java\">@Test\nvoid givenVoidMethod_callingWhen_wontCompile() {\n    // given\n    when(employee.work(DayOfWeek.SUNDAY)).thenThrow(new IAmOnHolidayException());\n\n    // when\n    Executable workCall = () -&gt; employee.work(DayOfWeek.SUNDAY);\n\n    // then\n    assertThrows(IAmOnHolidayException.class, workCall);\n}</code></pre>\n<p><strong>Unfortunately, this code won't compile, because in the <em>work(employee.work(&#8230;))</em> call, the <em>work()</em> method has a <em>void</em> return type; hence we cannot wrap it into another method call.</strong> Does it mean that we can't mock void methods? Of course, we can. <em>doXxx</em> methods to the rescue!</p>\n<h2  id=\"bd-doxxx-method\" data-id=\"doxxx-method\">3. <em>doXxx()</em> Methods</h2>\n<div class=\"bd-anchor\" id=\"doxxx-method\"></div>\n<p>Let's see how we can configure the exception throwing with the <em>doThrow()</em> method:</p>\n<pre><code class=\"language-java\">@Test\nvoid givenVoidMethod_callingDoThrow_shouldConfigureBehavior() {\n    // given\n    doThrow(new IAmOnHolidayException()).when(employee).work(DayOfWeek.SUNDAY);\n\n    // when\n    Executable workCall = () -&gt; employee.work(DayOfWeek.SUNDAY);\n\n    // then\n    assertThrows(IAmOnHolidayException.class, workCall);\n}</code></pre>\n<p>This syntax is slightly different than the previous one: we don't try to wrap a <em>void</em> method call inside another method call. Therefore, this code compiles.</p>\n<p>Let's see what just happened. <strong>First, we stated that we want to throw an exception. Next, we called the <em>when()</em> method, and we passed the mock object. After that, we specified which mock interaction's behavior we want to configure.</strong></p>\n<p>Note that this isn't the same <em>when()</em> method we used before. Also, note that we chained the mock interaction after the invocation of <em>when().</em> Meanwhile, we <span style=\"letter-spacing: 0px\">defined it inside the parentheses with the first syntax.</span></p>\n<p>Why do we have the first <em>when().thenXxx()</em>, when it isn't capable of such a common task, as configuring a <em>void</em> invocation? It has multiple advantages to the <em>doXxx().when()</em> syntax.</p>\n<p>First, <strong>it's more logical for developers to write and read statements like &#8220;when some interaction, then do something&#8221; than &#8220;do something, when some interaction&#8221;.</strong></p>\n<p>Second, we can add multiple behaviors to the same interaction with chaining. That's because <em>when()</em> returns an instance of the class <a href=\"https://javadoc.io/static/org.mockito/mockito-core/3.5.10/org/mockito/stubbing/OngoingStubbing.html\"><em>OngoingStubbing&lt;T&gt;</em></a>, which's <em>thenXxx()</em> methods return the same type.</p>\n<p>On the other hand, <em>doXxx()</em> methods return a <em><a href=\"https://javadoc.io/static/org.mockito/mockito-core/3.5.10/org/mockito/stubbing/Stubber.html\">Stubber</a></em> instance, and <em>Stubber.when(T mock)</em> returns\u00a0<em>T</em>, so we can specify what kind of method invocation we want to configure. But <em>T</em> is part of our application, for example, <em>Employee</em> in our code snippets. But <em>T</em> won't return a Mockito class, so we won't be able to add multiple behaviors with chaining.</p>\n<h2  id=\"bd-bddmockito\" data-id=\"bddmockito\">4. BDDMockito</h2>\n<div class=\"bd-anchor\" id=\"bddmockito\"></div>\n<p><a href=\"/bdd-mockito\">BDDMockito</a> uses an alternative syntax to those which we covered. It's pretty simple: in our mock configurations, we have to replace the keyword &#8220;<em>when&#8221;</em> to &#8220;<em>given</em>&#8221; and the keyword &#8220;<em>do</em>&#8221; to &#8220;<em>will</em>&#8220;. Other than that, our code remains the same:</p>\n<pre><code class=\"language-java\">@Test\nvoid givenNonVoidMethod_callingGiven_shouldConfigureBehavior() {\n    // given\n    given(employee.greet()).willReturn(&quot;Hello&quot;);\n\n    // when\n    String greeting = employee.greet();\n\n    // then\n    assertThat(greeting, is(&quot;Hello&quot;));\n}\n\n@Test\nvoid givenVoidMethod_callingWillThrow_shouldConfigureBehavior() {\n    // given\n    willThrow(new IAmOnHolidayException()).given(employee).work(DayOfWeek.SUNDAY);\n\n    // when\n    Executable workCall = () -&gt; employee.work(DayOfWeek.SUNDAY);\n\n    // then\n    assertThrows(IAmOnHolidayException.class, workCall);\n}</code></pre>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>We saw the advantages and disadvantages of the configuring a mock object the <em>when().thenXxx()</em> or the <em>doXxx().when()</em> way. Also, we saw how these syntaxes work and why we have both.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/testing-modules/mockito\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn the advantages and disadvantages of the configuring a mock object the when().thenXxx() or the doXxx().when() way.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14849,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8, 17],
    "tags": [172],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/86778" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=86778"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/86778/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14849"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=86778" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=86778"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=86778"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 63116,
    "date": "2019-10-27T23:46:20",
    "date_gmt": "2019-10-27T21:46:20",
    "guid": { "rendered": "https://www.baeldung.com/?p=63116" },
    "modified": "2022-07-18T16:21:18",
    "modified_gmt": "2022-07-18T14:21:18",
    "slug": "mapping-a-single-entity-to-multiple-tables-in-jpa",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/jpa-mapping-single-entity-to-multiple-tables",
    "title": {
      "rendered": "Mapping a Single Entity to Multiple Tables in JPA"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p><a href=\"/the-persistence-layer-with-spring-and-jpa\" rel=\"noopener noreferrer\">JPA</a> makes dealing with relational database models from our Java applications less painful. Things are simple when we map every table to a single entity class.</p>\n<p>But we sometimes have reasons to model our <a href=\"/jpa-entities\" rel=\"noopener noreferrer\">entities</a> and tables differently:</p>\n<ul>\n<li>When we want to create logical groups of fields, we can map <a href=\"/jpa-embedded-embeddable\">multiple classes to a single table</a>.</li>\n<li>If inheritance is involved, we can map <a href=\"/hibernate-inheritance\">a class hierarchy to a table structure</a>.</li>\n<li>In cases when related fields are scattered between multiple tables and we want to model those tables with a single class</li>\n</ul>\n<p>In this short tutorial, we'll see how to tackle this last scenario.</p>\n<h2  id=\"bd-data-model\" data-id=\"data-model\">2. Data Model</h2>\n<div class=\"bd-anchor\" id=\"data-model\"></div>\n<p>Let's say we run a restaurant, and we want to store data about every meal we serve:</p>\n<ul>\n<li>Name</li>\n<li>Description</li>\n<li>Price</li>\n<li>What kind of allergens it contains</li>\n</ul>\n<p>Since there are many possible allergens, we're going to group this data set together.</p>\n<p>Furthermore, we'll also model this using the following table definitions:</p>\n<a href=\"/wp-content/uploads/2019/10/meals.png\"><img decoding=\"async\" class=\"alignnone size-full wp-image-164982\" src=\"https://www.baeldung.com/wp-content/uploads/2019/10/meals.png\" alt=\"meals\" /></a>\n<p>Now let's see how we can map these tables to entities using standard JPA annotations.</p>\n<h2  id=\"bd-multiple-entities\" data-id=\"multiple-entities\">3. Creating Multiple Entities</h2>\n<div class=\"bd-anchor\" id=\"multiple-entities\"></div>\n<p><strong>The most obvious solution is to create an entity for both classes.</strong></p>\n<p>Let's start by defining the <em>Meal </em>entity:</p>\n<pre><code class=\"language-java\">@Entity\n@Table(name = &quot;meal&quot;)\nclass Meal {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;id&quot;)\n    Long id;\n\n    @Column(name = &quot;name&quot;)\n    String name;\n\n    @Column(name = &quot;description&quot;)\n    String description;\n\n    @Column(name = &quot;price&quot;)\n    BigDecimal price;\n\n    @OneToOne(mappedBy = &quot;meal&quot;)\n    Allergens allergens;\n\n    // standard getters and setters\n}</code></pre>\n<p>Next, we'll add the <em>Allergens</em> entity:</p>\n<pre><code class=\"language-java\">@Entity\n@Table(name = &quot;allergens&quot;)\nclass Allergens {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;meal_id&quot;)\n    Long mealId;\n\n    @OneToOne\n    @PrimaryKeyJoinColumn(name = &quot;meal_id&quot;)\n    Meal meal;\n\n    @Column(name = &quot;peanuts&quot;)\n    boolean peanuts;\n\n    @Column(name = &quot;celery&quot;)\n    boolean celery;\n\n    @Column(name = &quot;sesame_seeds&quot;)\n    boolean sesameSeeds;\n\n    // standard getters and setters\n}</code></pre>\n<p>We can see that<em> meal_id</em> is both the primary key and also the foreign key. That means we need to define the one-to-one relationship column using <em>@PrimaryKeyJoinColumn</em>.</p>\n<p>However, this solution has two problems:</p>\n<ul>\n<li>We always want to store allergens for a meal, and this solution doesn't enforce this rule.</li>\n<li>The meal and allergen data belong together logically. <strong>Therefore, we might want to store this information in the same Java class even though we created multiple tables for them.</strong></li>\n</ul>\n<p>One possible resolution to the first problem is to add the <em>@NotNull</em> annotation to the <em>allergens</em> field on our <em>Meal</em> entity. JPA won't let us persist the <em>Meal</em> if we have a <em>null</em> <em>Allergens</em>.</p>\n<p>However, this is not an ideal solution. We want a more restrictive one, where we don't even have the opportunity to try to persist a <em>Meal</em> without <em>Allergens</em>.</p>\n<h2  id=\"bd-single-entity\" data-id=\"single-entity\">4. Creating a Single Entity With <em>@SecondaryTable</em></h2>\n<div class=\"bd-anchor\" id=\"single-entity\"></div>\n<p><strong>We can create a single entity specifying that we have columns in different tables using the <em>@SecondaryTable </em>annotation</strong>:</p>\n<pre><code class=\"language-java\">@Entity\n@Table(name = &quot;meal&quot;)\n@SecondaryTable(name = &quot;allergens&quot;, pkJoinColumns = @PrimaryKeyJoinColumn(name = &quot;meal_id&quot;))\nclass Meal {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;id&quot;)\n    Long id;\n\n    @Column(name = &quot;name&quot;)\n    String name;\n\n    @Column(name = &quot;description&quot;)\n    String description;\n\n    @Column(name = &quot;price&quot;)\n    BigDecimal price;\n\n    @Column(name = &quot;peanuts&quot;, table = &quot;allergens&quot;)\n    boolean peanuts;\n\n    @Column(name = &quot;celery&quot;, table = &quot;allergens&quot;)\n    boolean celery;\n\n    @Column(name = &quot;sesame_seeds&quot;, table = &quot;allergens&quot;)\n    boolean sesameSeeds;\n\n    // standard getters and setters\n\n}</code></pre>\n<p>Behind the scenes, JPA joins the primary table with the secondary table and populates the fields.<strong> This solution is similar to the <em>@OneToOne</em> relationship, but this way, we can have all of the properties in the same class.</strong></p>\n<p><strong>It's important to note that</strong> <strong>if we have a column that is in a secondary table, we have to specify it with the <em>table</em> argument of the <em>@Column</em> annotation.</strong> If a column is in the primary table, we can omit the <em>table</em> argument since JPA looks for columns in the primary table by default.</p>\n<p>Also note that we can have multiple secondary tables if we embed them in <em>@SecondaryTables</em>. Alternatively, from Java 8, we can mark the entity with multiple <em>@SecondaryTable</em> annotations since it's a <a href=\"/java-default-annotations\">repeatable annotation</a>.</p>\n<h2  id=\"bd-combine-secondarytable-embedded\" data-id=\"combine-secondarytable-embedded\">5. Combining <em>@SecondaryTable</em> With <em>@Embedded</em></h2>\n<div class=\"bd-anchor\" id=\"combine-secondarytable-embedded\"></div>\n<p>As we've seen, <em>@SecondaryTable</em> maps multiple tables to the same entity. We also know that <em>@Embedded</em> and @<em>Embeddable</em> do the opposite and <a href=\"/jpa-embedded-embeddable\">map a single table to multiple classes</a>.</p>\n<p>Let's see what we get when we combine <em>@SecondaryTable</em> with <em>@Embedded</em> and <em>@Embeddable</em>:</p>\n<pre><code class=\"language-java\">@Entity\n@Table(name = &quot;meal&quot;)\n@SecondaryTable(name = &quot;allergens&quot;, pkJoinColumns = @PrimaryKeyJoinColumn(name = &quot;meal_id&quot;))\nclass Meal {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = &quot;id&quot;)\n    Long id;\n\n    @Column(name = &quot;name&quot;)\n    String name;\n\n    @Column(name = &quot;description&quot;)\n    String description;\n\n    @Column(name = &quot;price&quot;)\n    BigDecimal price;\n\n    @Embedded\n    Allergens allergens;\n\n    // standard getters and setters\n\n}\n\n@Embeddable\nclass Allergens {\n\n    @Column(name = &quot;peanuts&quot;, table = &quot;allergens&quot;)\n    boolean peanuts;\n\n    @Column(name = &quot;celery&quot;, table = &quot;allergens&quot;)\n    boolean celery;\n\n    @Column(name = &quot;sesame_seeds&quot;, table = &quot;allergens&quot;)\n    boolean sesameSeeds;\n\n    // standard getters and setters\n\n}</code></pre>\n<p>It's a similar approach to what we saw using <em>@OneToOne</em>. However, it has a couple of advantages:</p>\n<ul>\n<li><strong>JPA manages the two tables together for us, so we can be sure that there will be a row for each meal in both tables.</strong></li>\n<li>Also, the code is a bit simpler since we need less configuration.</li>\n</ul>\n<p><strong>Nevertheless, this one-to-one-like solution works only when the two tables have matching ids.</strong></p>\n<p>It's worth mentioning that if we want to reuse the <em>Allergens</em> class, it would be better if we defined the columns of the secondary table in the <em>Meal</em> class with <em>@AttributeOverride</em>.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this short tutorial, we've seen how we can map multiple tables to the same entity using the <em>@SecondaryTable</em> JPA annotation.</p>\n<p>We also saw the advantages of combining <em>@SecondaryTable </em>with <em>@Embedded</em> and <em>@Embeddable</em> to get a relationship similar to one-to-one.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/persistence-modules/java-jpa-2\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn how to map a single Java entity to multiple database tables using JPA.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49881,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [11, 16],
    "tags": [375, 34],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/63116" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=63116"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/63116/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/49881"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=63116" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=63116"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=63116"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 59285,
    "date": "2019-09-06T17:03:23",
    "date_gmt": "2019-09-06T15:03:23",
    "guid": { "rendered": "https://www.baeldung.com/?p=59285" },
    "modified": "2022-06-23T16:46:11",
    "modified_gmt": "2022-06-23T14:46:11",
    "slug": "command-line-arguments-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-command-line-arguments",
    "title": { "rendered": "Command-Line Arguments in Java" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>It's quite common to run applications from the command-line using arguments. Especially on the server-side. <strong>Usually, we don't want the application to do the same thing on every run: we want to configure its behavior some way.</strong></p>\n<p>In this short tutorial, we'll explore how can we handle command-line arguments in Java.</p>\n<h2  id=\"bd-accessing-from-java\" data-id=\"accessing-from-java\">2. Accessing Command-Line Arguments in Java</h2>\n<div class=\"bd-anchor\" id=\"accessing-from-java\"></div>\n<p><strong>Since the <em>main</em> method is the entry point of a Java application, the JVM passes the command-line arguments through its arguments.</strong></p>\n<p>The traditional way is to use a <em>String</em> array:</p>\n<pre><code class=\"language-java\">public static void main(String[] args) {\n    // handle arguments\n}</code></pre>\n<p>However, Java 5 introduced varargs, which are arrays in sheep's clothing. Therefore, we can define our <em>main</em> with a <em>String</em> vararg:</p>\n<pre><code class=\"language-java\">public static void main(String... args) {\n    // handle arguments\n}</code></pre>\n<p>They're identical, therefore choosing between them is entirely up to personal taste and preference.</p>\n<p><strong>The method parameter of the <em>main</em> method contains the command-line arguments in the same order we passed at execution.</strong> If we want to access how much arguments did we get, we only have to check the <em>length</em> of the array.</p>\n<p>For example, we can print the number of arguments and their value on the standard output:</p>\n<pre><code class=\"language-java\">public static void main(String[] args) {\n    System.out.println(&quot;Argument count: &quot; + args.length);\n    for (int i = 0; i &lt; args.length; i++) {\n        System.out.println(&quot;Argument &quot; + i + &quot;: &quot; + args[i]);\n    }\n}</code></pre>\n<p>Note that in some languages, the first argument will be the name of the application. On the other hand, in Java, this array contains only the arguments.</p>\n<h2  id=\"bd-passing-arguments\" data-id=\"passing-arguments\">3. How to Pass Command-Line Arguments</h2>\n<div class=\"bd-anchor\" id=\"passing-arguments\"></div>\n<p>Now that we have an application that handles command-line arguments, we're eager to try it. Let's see what options we have.</p>\n<h3  id=\"bd-passing-command-line\" data-id=\"passing-command-line\">3.1. Command Line</h3>\n<div class=\"bd-anchor\" id=\"passing-command-line\"></div>\n<p>The most obvious way is the command-line. Let's assume we already compiled the class <em>com.baeldung.commandlinearguments.CliExample</em> with our <em>main</em> method in it.</p>\n<p>Then we can run it with the following command:</p>\n<pre><code class=\"language-bash\">java com.baeldung.commandlinearguments.CliExample</code></pre>\n<p>It produces the following output:</p>\n<pre><code class=\"language-plaintext\">Argument count: 0</code></pre>\n<p>Now, we can pass arguments after the class name:</p>\n<pre><code class=\"language-bash\">java com.baeldung.commandlinearguments.CliExample Hello World!</code></pre>\n<p>And the output is:</p>\n<pre><code class=\"language-plaintext\">Argument count: 2\nArgument 0: Hello\nArgument 1: World!</code></pre>\n<p>Usually, we publish our application as a jar file, not as a bunch of <em>.class</em> files. Let's say, we packaged it in the <em>cli-example.jar</em>, and we set <em>com.baeldung.commandlinearguments.CliExample</em> as the main class.</p>\n<p>Now we can run it without arguments the following way:</p>\n<pre><code class=\"language-bash\">java -jar cli-example.jar</code></pre>\n<p>Or with arguments:</p>\n<pre><code class=\"language-bash\">java -jar cli-example.jar Hello World!\nArgument count: 2 \nArgument 0: Hello \nArgument 1: World!</code></pre>\n<p>Note, that <strong>Java will treat every argument we pass after the class name or the jar file name as the arguments of our application</strong>. Therefore, everything we pass before that are arguments for the JVM itself.</p>\n<h3  id=\"bd-passing-eclipse\" data-id=\"passing-eclipse\">3.2. Eclipse</h3>\n<div class=\"bd-anchor\" id=\"passing-eclipse\"></div>\n<p>While we're working on our application, we'll want to check if it works the way we want.</p>\n<p>In Eclipse, we can run applications with the help of run configurations. For example, a run configuration defines which JVM to use, what is the entry point, the classpath, and so on. And of course, we can specify command-line arguments.</p>\n<p>The easiest way to create an appropriate run configuration is to right-click on our <em>main</em> method, then choose\u00a0<em>Run As &gt; Java Application</em> from the context menu:</p>\n<a href=\"/wp-content/uploads/2019/09/eclipse-run.png\"><img decoding=\"async\" loading=\"lazy\" width=\"1010\" height=\"930\" class=\"aligncenter size-full wp-image-59289\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-run.png\" alt=\"eclipse run\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-run.png 1010w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-run-300x276.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-run-768x707.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-run-100x92.png 100w\" sizes=\"(max-width: 1010px) 100vw, 1010px\" /></a>\n<p>With this, we instantly run our application with settings that honor our project settings.</p>\n<p>To provide arguments, we should then edit that run configuration. We can do it through the <em>Run &gt; Run Configurations&#8230;</em> menu option. Here, we should click the <em>Arguments</em> tab and fill the <em>Program arguments</em> textbox:</p>\n<a href=\"/wp-content/uploads/2019/09/eclipse-configure.png\"><img decoding=\"async\" loading=\"lazy\" width=\"872\" height=\"695\" class=\"aligncenter size-full wp-image-59288\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-configure.png\" alt=\"eclipse configure\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-configure.png 872w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-configure-300x239.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-configure-768x612.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/eclipse-configure-100x80.png 100w\" sizes=\"(max-width: 872px) 100vw, 872px\" /></a>\n<p>Hitting\u00a0<em>Run</em> will run the application and pass the arguments we just entered.</p>\n<h3  id=\"bd-passing-intellij\" data-id=\"passing-intellij\">3.3. IntelliJ</h3>\n<div class=\"bd-anchor\" id=\"passing-intellij\"></div>\n<p>IntelliJ uses a similar process to run applications. It calls these options simply as configurations.</p>\n<p>First, we need to right-click on the\u00a0<em>main</em> method, then choose\u00a0<em>Run &#8216;CliExample.main()':</em></p>\n<a href=\"/wp-content/uploads/2019/09/intellij-run.png\"><img decoding=\"async\" loading=\"lazy\" width=\"960\" height=\"722\" class=\"aligncenter size-full wp-image-59291\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/intellij-run.png\" alt=\"intellij run\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/intellij-run.png 960w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-run-300x226.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-run-768x578.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-run-100x75.png 100w\" sizes=\"(max-width: 960px) 100vw, 960px\" /></a>\n<p>This will run our program, but it will also add it to the <em>Run</em> list for further configuration.</p>\n<p>So, then to configure arguments, we should choose <em>Run &gt; Edit Configurations&#8230;</em> and edit the\u00a0<em>Program arguments</em> textbox:</p>\n<a href=\"/wp-content/uploads/2019/09/intellij-configure-1024x646.png\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"646\" class=\"aligncenter size-full wp-image-59290\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/intellij-configure-1024x646.png\" alt=\"intellij configure\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/intellij-configure-1024x646.png 1024w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-configure-1024x646-300x189.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-configure-1024x646-768x485.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/intellij-configure-1024x646-100x63.png 100w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></a>\n<p>After that, we should hit OK and rerun our application, for example with the run button in the toolbar.</p>\n<h3  id=\"bd-passing-netbeans\" data-id=\"passing-netbeans\">3.4. NetBeans</h3>\n<div class=\"bd-anchor\" id=\"passing-netbeans\"></div>\n<p>NetBeans also falls into line with its running and configuration processes.</p>\n<p>We should run our application first by right-clicking on the\u00a0<em>main</em> method and choosing\u00a0<em>Run File:</em></p>\n<a href=\"/wp-content/uploads/2019/09/netbeans-run.png\"><img decoding=\"async\" loading=\"lazy\" width=\"1001\" height=\"766\" class=\"aligncenter size-full wp-image-59293\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-run.png\" alt=\"netbeans run\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-run.png 1001w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-run-300x230.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-run-768x588.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-run-100x77.png 100w\" sizes=\"(max-width: 1001px) 100vw, 1001px\" /></a>\n<p>Like before, this creates a run configuration and runs the program.</p>\n<p>Next, we have to configure the arguments in that run configuration. We can do that by choosing <em>Run &gt; Set Project Configuration &gt; Customize&#8230; </em>Then we should <em>Run</em> on the left and fill the\u00a0<em>Arguments</em> text field:</p>\n<a href=\"/wp-content/uploads/2019/09/netbeans-configure.png\"><img decoding=\"async\" loading=\"lazy\" width=\"802\" height=\"581\" class=\"aligncenter size-full wp-image-59292\" src=\"https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-configure.png\" alt=\"netbeans configure\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-configure.png 802w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-configure-300x217.png 300w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-configure-768x556.png 768w, https://www.baeldung.com/wp-content/uploads/2019/09/netbeans-configure-100x72.png 100w\" sizes=\"(max-width: 802px) 100vw, 802px\" /></a>\n<p>After that, we should hit OK and start the application.</p>\n<h2  id=\"bd-libraries\" data-id=\"libraries\">4. Third-Party Libraries</h2>\n<div class=\"bd-anchor\" id=\"libraries\"></div>\n<p><strong>Manual handling of the command-line arguments is straightforward in simple scenarios. However, as our requirements become more and more complex, so does our code.</strong> Therefore, if we want to create an application with multiple command-line options, it would be easier to use a third-party library.</p>\n<p>Fortunately, there're a plethora of those libraries which support most use cases. Two popular examples are <a href=\"/java-picocli-create-command-line-program\">Picocli</a> and <a href=\"/spring-shell-cli\">Spring Shell</a>.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>It's always a good idea to make your application's behavior configurable. In this article, we saw how to do that using command-line arguments. Additionally, we covered various ways to pass those arguments.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-lang-2\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore how to configure your Java applications using command-line arguments.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14849,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/59285" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=59285"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/59285/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14849"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=59285" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=59285"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=59285"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 57215,
    "date": "2019-08-03T12:58:09",
    "date_gmt": "2019-08-03T10:58:09",
    "guid": { "rendered": "https://www.baeldung.com/?p=57215" },
    "modified": "2022-06-23T16:11:47",
    "modified_gmt": "2022-06-23T14:11:47",
    "slug": "composition-aggregation-and-association-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-composition-aggregation-association",
    "title": {
      "rendered": "Composition, Aggregation, and Association in Java"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Objects have relationships between them, both in real life and in programming. Sometimes it's difficult to understand or implement these relationships.</p>\n<p>In this tutorial, we'll focus on Java's take on three sometimes easily mixed up types of relationships: composition, aggregation, and association.</p>\n<h2  id=\"bd-composition\" data-id=\"composition\">2. Composition</h2>\n<div class=\"bd-anchor\" id=\"composition\"></div>\n<p><em>Composition</em> is a &#8220;belongs-to&#8221; type of relationship. It means that one of the objects is a logically larger structure, which contains the other object. In other words, it's part or member of the other object.</p>\n<p>Alternatively, <strong>we often call it a &#8220;has-a&#8221; relationship</strong> (as opposed to an &#8220;is-a&#8221; relationship, which is <a href=\"/java-inheritance\">inheritance</a>).</p>\n<p>For example, a room belongs to a building, or in other words a building has a room. So basically, whether we call it &#8220;belongs-to&#8221; or &#8220;has-a&#8221; is only a matter of point of view.</p>\n<p>Composition is a strong kind of &#8220;has-a&#8221; relationship because the containing object owns it. Therefore, <strong>the objects' lifecycles are tied. It means that if we destroy the owner object, its members also will be destroyed with it.</strong> For example, the room is destroyed with the building in our previous example.</p>\n<p>Note that doesn't mean, that the containing object can't exist without any of its parts. For example, we can tear down all the walls inside a building, hence destroy the rooms. But the building will still exist.</p>\n<p>In terms of cardinality, a containing object can have as many parts as we want. However, <strong>all of the parts need to have exactly one container</strong>.</p>\n<h3  id=\"bd-composition-uml\" data-id=\"composition-uml\">2.1. UML</h3>\n<div class=\"bd-anchor\" id=\"composition-uml\"></div>\n<p>In UML, we indicate composition with the following symbol:</p>\n<a href=\"/wp-content/uploads/2019/08/composition.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"35\" class=\"aligncenter size-full wp-image-57226\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition.png\" alt=\"composition\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/composition-100x13.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>Note, that the diamond is at the containing object and is the base of the line, not an arrowhead. For the sake of clarity, we often draw the arrowhead too:</p>\n<a href=\"/wp-content/uploads/2019/08/composition-arrow.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"35\" class=\"aligncenter size-full wp-image-57225\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition-arrow.png\" alt=\"composition arrow\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition-arrow.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/composition-arrow-100x13.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>So, then, we can use this UML construct for our Building-Room example:</p>\n<a href=\"/wp-content/uploads/2019/08/composition-example.png\"><img decoding=\"async\" loading=\"lazy\" width=\"251\" height=\"61\" class=\"aligncenter size-full wp-image-57224\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition-example.png\" alt=\"composition example\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/composition-example.png 251w, https://www.baeldung.com/wp-content/uploads/2019/08/composition-example-100x24.png 100w\" sizes=\"(max-width: 251px) 100vw, 251px\" /></a>\n<h3  id=\"bd-composition-source\" data-id=\"composition-source\">2.2. Source Code</h3>\n<div class=\"bd-anchor\" id=\"composition-source\"></div>\n<p>In Java, we can model this with a non-static inner class:</p>\n<pre><code class=\"language-java\">class Building {\n    class Room {}   \n}</code></pre>\n<p>Alternatively, we can declare that class in a method body as well. It doesn't matter if it's a named class, an anonymous class or a lambda:</p>\n<pre><code class=\"language-java\">class Building {\n    Room createAnonymousRoom() {\n        return new Room() {\n            @Override\n            void doInRoom() {}\n        };\n    }\n\n    Room createInlineRoom() {\n        class InlineRoom implements Room {\n            @Override\n            void doInRoom() {}\n        }\n        return new InlineRoom();\n    }\n    \n    Room createLambdaRoom() {\n        return () -&gt; {};\n    }\n\n    interface Room {\n        void doInRoom();\n    }\n}</code></pre>\n<p>Note, that it's essential, that our inner class should be non-static since it binds all of its instances to the containing class.</p>\n<p>Usually, the containing object wants to access its members. Therefore, we should store their references:</p>\n<pre><code class=\"language-java\">class Building {\n    List&lt;Room&gt; rooms;\n    class Room {}   \n}</code></pre>\n<p>Note, that all inner class objects store an implicit reference to their containing object. As a result, we don't need to store it manually to access it:</p>\n<pre><code class=\"language-java\">class Building {\n    String address;\n    \n    class Room {\n        String getBuildingAddress() {\n            return Building.this.address;\n        }   \n    }   \n}</code></pre>\n<h2  id=\"bd-aggregation\" data-id=\"aggregation\">3. Aggregation</h2>\n<div class=\"bd-anchor\" id=\"aggregation\"></div>\n<p>Aggregation is also a &#8220;has-a&#8221; relationship. What distinguishes it from composition, that it doesn't involve owning. As a result, the lifecycles of the objects aren't tied: every one of them can exist independently of each other.</p>\n<p>For example, a car and its wheels. <strong>We can take off the wheels, and they'll still exist.</strong> We can mount other (preexisting) wheels, or install these to another car and everything will work just fine.</p>\n<p>Of course, a car without wheels or a detached wheel won't be as useful as a car with its wheels on. But that's why this relationship existed in the first place: to<strong> assemble the parts to a bigger construct, which is capable of more things than its parts</strong>.</p>\n<p>Since aggregation doesn't involve owning, <strong>a member doesn't need to be tied to only one container</strong>. For example, a triangle is made of segments. But triangles can share segments as their sides.</p>\n<h3  id=\"bd-aggregation-uml\" data-id=\"aggregation-uml\">3.1. UML</h3>\n<div class=\"bd-anchor\" id=\"aggregation-uml\"></div>\n<p>Aggregation is very similar to composition. The only logical difference is aggregation is a weaker relationship.</p>\n<p>Therefore, UML representations are also very similar. The only difference is the diamond is empty:</p>\n<a href=\"/wp-content/uploads/2019/08/aggregation.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"35\" class=\"aligncenter size-full wp-image-57223\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/aggregation.png\" alt=\"aggregation\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/aggregation.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/aggregation-100x13.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>For cars and wheels, then, we'd do:</p>\n<a href=\"/wp-content/uploads/2019/08/aggregation-example.png\"><img decoding=\"async\" loading=\"lazy\" width=\"251\" height=\"61\" class=\"aligncenter size-full wp-image-57222\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/aggregation-example.png\" alt=\"aggregation example\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/aggregation-example.png 251w, https://www.baeldung.com/wp-content/uploads/2019/08/aggregation-example-100x24.png 100w\" sizes=\"(max-width: 251px) 100vw, 251px\" /></a>\n<h3  id=\"bd-aggregation-source\" data-id=\"aggregation-source\">3.2. Source Code</h3>\n<div class=\"bd-anchor\" id=\"aggregation-source\"></div>\n<p>In Java, we can model aggregation with a plain old reference:</p>\n<pre><code class=\"language-java\">class Wheel {}\n\nclass Car {\n    List&lt;Wheel&gt; wheels;\n}</code></pre>\n<p>The member can be any type of class, except a non-static inner class.</p>\n<p>In the code snippet above both classes have their separate source file. However, we can also use a static inner class:</p>\n<pre><code class=\"language-java\">class Car {\n    List&lt;Wheel&gt; wheels;\n    static class Wheel {}\n}</code></pre>\n<p>Note that Java will create an implicit reference only in non-static inner classes. Because of that, we have to maintain the relationship manually where we need it:</p>\n<pre><code class=\"language-java\">class Wheel {\n    Car car;\n}\n\nclass Car {\n    List&lt;Wheel&gt; wheels;\n}</code></pre>\n<h2  id=\"bd-association\" data-id=\"association\">4. Association</h2>\n<div class=\"bd-anchor\" id=\"association\"></div>\n<p>Association is the weakest relationship between the three. <strong>It isn't a &#8220;has-a&#8221; relationship</strong>, none of the objects are parts or members of another.</p>\n<p><strong>Association only means that the objects &#8220;know&#8221; each other. </strong>For example, a mother and her child.</p>\n<h3  id=\"bd-association-uml\" data-id=\"association-uml\">4.1. UML</h3>\n<div class=\"bd-anchor\" id=\"association-uml\"></div>\n<p>In UML, we can mark an association with an arrow:</p>\n<a href=\"/wp-content/uploads/2019/08/association.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"35\" class=\"aligncenter size-full wp-image-57221\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/association.png\" alt=\"association\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/association.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/association-100x13.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>If the association is bidirectional, we can use two arrows, an arrow with an arrowhead on both ends, or a line without any arrowheads:</p>\n<a href=\"/wp-content/uploads/2019/08/association-bidirectional.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"175\" class=\"aligncenter size-full wp-image-57220\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/association-bidirectional.png\" alt=\"association-bidirectional\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/association-bidirectional.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/association-bidirectional-100x67.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>We can represent a mother and her child in UML, then:</p>\n<a href=\"/wp-content/uploads/2019/08/association-example.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"35\" class=\"aligncenter size-full wp-image-57219\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/association-example.png\" alt=\"association example\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/association-example.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/association-example-100x13.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<h3  id=\"bd-associaton-source\" data-id=\"associaton-source\">4.2. Source Code</h3>\n<div class=\"bd-anchor\" id=\"associaton-source\"></div>\n<p>In Java, we can model association the same way as aggregation:</p>\n<pre><code class=\"language-java\">class Child {}\n\nclass Mother {\n    List&lt;Child&gt; children;\n}</code></pre>\n<p>But wait, <strong>how can we tell if a reference means aggregation or association? </strong></p>\n<p><strong>Well, we can't.</strong> The difference is only logical: whether one of the objects is part of the other or not.</p>\n<p>Also, we have to maintain the references manually on both ends as we did with aggregation:</p>\n<pre><code class=\"language-java\">class Child {\n    Mother mother;\n}\n\nclass Mother {\n    List&lt;Child&gt; children;\n}</code></pre>\n<h2  id=\"bd-uml-sidenote\" data-id=\"uml-sidenote\">5. UML Sidenote</h2>\n<div class=\"bd-anchor\" id=\"uml-sidenote\"></div>\n<p>For the sake of clarity, sometimes we want to define the cardinality of a relationship on a UML diagram. We can do this by writing it to the ends of the arrow:</p>\n<a href=\"/wp-content/uploads/2019/08/cardinality-1.png\"><img decoding=\"async\" loading=\"lazy\" width=\"251\" height=\"61\" class=\"aligncenter size-full wp-image-57218\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-1.png\" alt=\"cardinality 1\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-1.png 251w, https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-1-100x24.png 100w\" sizes=\"(max-width: 251px) 100vw, 251px\" /></a>\n<p>Note, that it doesn't make sense to write zero as cardinality, because it means there's no relationship. The only exception is when we want to use a range to indicate an optional relationship:</p>\n<a href=\"/wp-content/uploads/2019/08/cardinality-2.png\"><img decoding=\"async\" loading=\"lazy\" width=\"261\" height=\"38\" class=\"aligncenter size-full wp-image-57217\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-2.png\" alt=\"cardinality 2\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-2.png 261w, https://www.baeldung.com/wp-content/uploads/2019/08/cardinality-2-100x15.png 100w\" sizes=\"(max-width: 261px) 100vw, 261px\" /></a>\n<p>Also note, that since in composition there's precisely one owner we don't indicate it on the diagrams.</p>\n<h2  id=\"bd-complex-example\" data-id=\"complex-example\">6. A Complex Example</h2>\n<div class=\"bd-anchor\" id=\"complex-example\"></div>\n<p>Let's see a (little) more complex example!</p>\n<p>We'll model a university, which has its departments. Professors work in each department, who also has friends among each other.</p>\n<p>Will the departments exist after we close the university? Of course not, therefore it's a composition.</p>\n<p>But the professors will still exist (hopefully). We have to decide which is more logical: if we consider professors as parts of the departments or not. Alternatively: are they members of the departments or not? Yes, they are. Hence it's an aggregation. On top of that, a professor can work in multiple departments.</p>\n<p>The relationship between professors is association because it doesn't make any sense to say that a professor is part of another one.</p>\n<p>As a result, we can model this example with the following UML diagram:</p>\n<a href=\"/wp-content/uploads/2019/08/complex-example.png\"><img decoding=\"async\" loading=\"lazy\" width=\"161\" height=\"381\" class=\"aligncenter size-full wp-image-57216\" src=\"https://www.baeldung.com/wp-content/uploads/2019/08/complex-example.png\" alt=\"complex example\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/08/complex-example.png 161w, https://www.baeldung.com/wp-content/uploads/2019/08/complex-example-127x300.png 127w, https://www.baeldung.com/wp-content/uploads/2019/08/complex-example-100x237.png 100w\" sizes=\"(max-width: 161px) 100vw, 161px\" /></a>\n<p>And the Java code looks like this:</p>\n<pre><code class=\"language-java\">class University {\n    List&lt;Department&gt; department;   \n}\n\nclass Department {\n    List&lt;Professor&gt; professors;\n}\n\nclass Professor {\n    List&lt;Department&gt; department;\n    List&lt;Professor&gt; friends;\n}</code></pre>\n<p>Note, that if we <strong>rely on the terms &#8220;has-a&#8221;, &#8220;belongs-to&#8221;, &#8220;member-of&#8221;, &#8220;part-of&#8221;</strong>, and so on, we can more easily identify the relationships between our objects.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">7. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw the properties and representation of composition, aggregation, and association. We also saw how to model those relationships in UML and Java.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-lang-oop-patterns\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the properties and representation of composition, aggregation, and association in Java.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14523,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/57215" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=57215"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/57215/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14523"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=57215" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=57215"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=57215"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 50716,
    "date": "2019-03-07T20:33:19",
    "date_gmt": "2019-03-07T18:33:19",
    "guid": { "rendered": "https://www.baeldung.com/?p=50716" },
    "modified": "2022-03-31T17:34:10",
    "modified_gmt": "2022-03-31T15:34:10",
    "slug": "an-introduction-to-epsilon-gc-a-no-op-experimental-garbage-collector",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/jvm-epsilon-gc-garbage-collector",
    "title": {
      "rendered": "An Introduction to Epsilon GC: A No-Op Experimental Garbage Collector"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Java 11 introduced a <a href=\"https://openjdk.java.net/jeps/318\">No-Op Garbage Collector</a> called Epsilon, which <strong>promises the lowest GC overhead possible</strong>.</p>\n<p>In this short tutorial, we'll explore how Epsilon works, and we'll mention the common use cases.</p>\n<h2  id=\"bd-hands-on\" data-id=\"hands-on\">2. Quick Hands-On</h2>\n<div class=\"bd-anchor\" id=\"hands-on\"></div>\n<p>Let's start with getting our hands dirty, and take Epsilon GC for a spin!</p>\n<p>We'll first need an application, which creates garbage:</p>\n<pre><code class=\"language-java\">class MemoryPolluter {\n\n    static final int MEGABYTE_IN_BYTES = 1024 * 1024;\n    static final int ITERATION_COUNT = 1024 * 10;\n\n    static void main(String[] args) {\n        System.out.println(&quot;Starting pollution&quot;);\n\n        for (int i = 0; i &lt; ITERATION_COUNT; i++) {\n            byte[] array = new byte[MEGABYTE_IN_BYTES];\n        }\n\n        System.out.println(&quot;Terminating&quot;);\n    }\n}</code></pre>\n<p>This code creates one-megabyte-arrays in a loop. Since we repeat the loop 10240 times, it means we allocate 10 gigabytes of memory, which is probably higher than the available maximum heap size.</p>\n<p>We also provided some helper prints to see when the application terminates.</p>\n<p><strong>To enable Epsilon GC, we need to pass the following VM arguments:</strong></p>\n<pre><code class=\"language-bash\">-XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC</code></pre>\n<p>And when we run the application, we get the following error:</p>\n<pre><code class=\"language-plaintext\">Starting pollution\nTerminating due to java.lang.OutOfMemoryError: Java heap space</code></pre>\n<p>However, when we run the same application with the standard VM options, it completes fine:</p>\n<pre><code class=\"language-plaintext\">Starting pollution\nTerminating</code></pre>\n<p>Why did the first run fail? <strong>It seems like even the most basic garbage collectors could clean up</strong> the child's play that we just demonstrated!</p>\n<p>So, let's take a look at the concepts behind Epsilon GC to understand what just happened.</p>\n<h2  id=\"bd-how-epsilon-works\" data-id=\"how-epsilon-works\">3. How Epsilon GC Works</h2>\n<div class=\"bd-anchor\" id=\"how-epsilon-works\"></div>\n<p>Epsilon is a no-op garbage collector.</p>\n<p><a href=\"https://openjdk.java.net/jeps/318\">JEP 318</a> explains that &#8220;<strong>[Epsilon] &#8230; handles memory allocation but does not implement any actual memory reclamation mechanism. Once the available Java heap is exhausted, the JVM will shut down.</strong>&#8221;</p>\n<p>So, this explains why our application terminated with an <em>OutOfMemoryError.</em></p>\n<p>But, it raises the question: Why do we need to have a garbage collector, that doesn't collect any garbage?</p>\n<p>There are some cases when <strong>we know that the available heap will be enough, so we don't want the JVM to use resources to run GC tasks.</strong></p>\n<p>Some examples of such cases (also from the related JEP):</p>\n<ul>\n<li>Performance testing</li>\n<li>Memory pressure testing</li>\n<li>VM interface testing</li>\n<li>Extremely short lived jobs</li>\n<li>Last-drop latency improvements</li>\n<li>Last-drop throughput improvements</li>\n</ul>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">4. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this short article, we learned about Epsilon, a no-op GC available in Java 11. We learned about the implications of using it and reviewed some cases where it may be handy.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-11\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn how Epsilon works, and explore the common use cases.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14846,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [362, 146],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/50716" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=50716"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/50716/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14846"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=50716" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=50716"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=50716"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 49506,
    "date": "2019-02-09T11:29:22",
    "date_gmt": "2019-02-09T09:29:22",
    "guid": { "rendered": "https://www.baeldung.com/?p=49506" },
    "modified": "2022-06-07T07:58:08",
    "modified_gmt": "2022-06-07T05:58:08",
    "slug": "an-introduction-to-zgc-a-scalable-and-experimental-low-latency-jvm-garbage-collector",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/jvm-zgc-garbage-collector",
    "title": {
      "rendered": "An Introduction to ZGC: A Scalable and Experimental Low-Latency JVM Garbage Collector"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Today, it's not uncommon for applications to serve thousands or even millions of users concurrently. Such applications need enormous amounts of memory. However, managing all that memory may easily impact application performance.</p>\n<p>To address this issue, Java 11 introduced the <a href=\"https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html\">Z Garbage Collector</a> (ZGC) as an experimental garbage collector (GC) implementation.</p>\n<p>In this tutorial, we'll see <strong>how ZGC manages to keep low pause times on even multi-terabyte heaps</strong>.</p>\n<h2  id=\"bd-main-concepts\" data-id=\"main-concepts\">2. Main Concepts</h2>\n<div class=\"bd-anchor\" id=\"main-concepts\"></div>\n<p>To understand how ZGC works, we need to understand the basic concepts and terminology behind <a href=\"/java-memory-management-interview-questions\">memory management</a> and <a href=\"/jvm-garbage-collectors\">garbage collectors</a>.</p>\n<h3  id=\"bd-memory-management\" data-id=\"memory-management\">2.1. Memory Management</h3>\n<div class=\"bd-anchor\" id=\"memory-management\"></div>\n<p>Physical memory is the RAM that our hardware provides.</p>\n<p>The operating system (OS) allocates <a href=\"/cs/virtual-memory\">virtual memory</a> space for each application.</p>\n<p>Of course, <strong>we store virtual memory in physical memory, and the OS is responsible for maintaining the mapping between the two.</strong> This mapping usually involves hardware acceleration.</p>\n<h3  id=\"bd-multi-mapping\" data-id=\"multi-mapping\">2.2. Multi-Mapping</h3>\n<div class=\"bd-anchor\" id=\"multi-mapping\"></div>\n<p>Multi-mapping means that there are specific addresses in the virtual memory, which points to the same address in physical memory. Since applications access data through virtual memory, they know nothing about this mechanism (and they don't need to).</p>\n<p><strong>Effectively, we map multiple ranges of the virtual memory to the same range in the physical memory:</strong></p>\n<a href=\"/wp-content/uploads/2019/02/zgc-multimapping.png\"><img decoding=\"async\" loading=\"lazy\" width=\"601\" height=\"282\" class=\"aligncenter size-full wp-image-49508\" src=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-multimapping.png\" alt=\"zgc multimapping\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-multimapping.png 601w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-multimapping-300x141.png 300w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-multimapping-100x47.png 100w\" sizes=\"(max-width: 601px) 100vw, 601px\" /></a>\n<p>At first glance, its use cases aren't obvious, but we'll see later, that ZGC needs it to do its magic. Also, it provides some security because it separates the memory spaces of the applications.</p>\n<h3  id=\"bd-relocation\" data-id=\"relocation\">2.3. Relocation</h3>\n<div class=\"bd-anchor\" id=\"relocation\"></div>\n<p>Since we use dynamic memory allocation, the memory of an average application becomes fragmented over time. It's because when we free up an object in the middle of the memory, a gap of free space remains there. Over time, these gaps accumulate, and our memory will look like a chessboard made of alternating areas of free and used space.</p>\n<p>Of course, we could try to fill these gaps with new objects. To do this, we should scan the memory for free space that's big enough to hold our object. Doing this is an expensive operation, especially if we have to do it each time we want to allocate memory. Besides, the memory will still be fragmented, since probably we won't be able to find a free space which has the exact size we need. Therefore, there will be gaps between the objects. Of course, these gaps are smaller. Also, we can try to minimize these gaps, but it uses even more processing power.</p>\n<p>The other strategy is to frequently <strong>relocate objects from fragmented memory areas to free areas in a more compact format</strong>. To be more effective, we split the memory space into blocks. We relocate all objects in a block or none of them. This way, memory allocation will be faster since we know there are whole empty blocks in the memory.</p>\n<h3  id=\"bd-garbage-collection\" data-id=\"garbage-collection\">2.4. Garbage Collection</h3>\n<div class=\"bd-anchor\" id=\"garbage-collection\"></div>\n<p>When we create a Java application, we don't have to free the memory we allocated, because garbage collectors do it for us. In summary, <strong>GC watches which objects can we reach from our application through a chain of references and frees up the ones we can't reach</strong>.</p>\n<p>A GC needs to track the state of the objects in the heap space to do its work. For example, a possible state is reachable. It means the application holds a reference to the object. This reference might be transitive. The only thing that matters that the application can access these objects through references. Another example is finalizable: objects which we can't access. These are the objects we consider garbage.</p>\n<a href=\"/wp-content/uploads/2019/02/zgc-marking.png\"><img decoding=\"async\" loading=\"lazy\" width=\"502\" height=\"282\" class=\"aligncenter size-full wp-image-49507\" src=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-marking.png\" alt=\"zgc marking\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-marking.png 502w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-marking-300x169.png 300w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-marking-100x56.png 100w\" sizes=\"(max-width: 502px) 100vw, 502px\" /></a>\n<p>To achieve it, garbage collectors have multiple phases.</p>\n<h3  id=\"bd-gc-phase-properties\" data-id=\"gc-phase-properties\">2.5. GC Phase Properties</h3>\n<div class=\"bd-anchor\" id=\"gc-phase-properties\"></div>\n<p>GC phases can have different properties:</p>\n<ul>\n<li>a <strong>parallel</strong> phase can run on multiple GC threads</li>\n<li>a <strong>serial</strong> phase runs on a single thread</li>\n<li>a <strong>stop-the-world</strong> phase can't run concurrently with application code</li>\n<li>a <strong>concurrent</strong> phase can run in the background, while our application does its work</li>\n<li>an <strong>incremental</strong> phase can terminate before finishing all of its work and continue it later</li>\n</ul>\n<p>Note that all of the above techniques have their strengths and weaknesses. For example, let's say we have a phase that can run concurrently with our application. A serial implementation of this phase requires 1% of the overall CPU performance and runs for 1000ms. In contrast, a parallel implementation utilizes 30% of CPU and completes its work in 50ms.</p>\n<p>In this example, the <strong>parallel solution uses more CPU overall, because it may be more complex and have to synchronize the threads</strong>. For CPU heavy applications (for example, batch jobs), it's a problem since we have less computing power to do useful work.</p>\n<p>Of course, this example has made-up numbers. However, it's clear that all applications have their characteristics, so they have different GC requirements.</p>\n<p>For more detailed descriptions, please visit <a href=\"/java-memory-management-interview-questions\">our article on Java memory management</a>.</p>\n<h2  id=\"bd-zgc-concepts\" data-id=\"zgc-concepts\">3. ZGC Concepts</h2>\n<div class=\"bd-anchor\" id=\"zgc-concepts\"></div>\n<p>ZGC intends to provide stop-the-world phases as short as possible. It achieves it in such a way that the duration of these pause times doesn't increase with the heap size. <strong>These characteristics make ZGC a good fit for server applications, where large heaps are common, and fast application response times are a requirement.</strong></p>\n<p>On top of the tried and tested GC techniques, ZGC introduces new concepts, which we'll cover in the following sections.</p>\n<p>But for now, let's take a look at the overall picture of how ZGC works.</p>\n<h3  id=\"bd-big-picture\" data-id=\"big-picture\">3.1. Big Picture</h3>\n<div class=\"bd-anchor\" id=\"big-picture\"></div>\n<p>ZGC has a phase called marking, where we find the reachable objects. A GC can store object state information in multiple ways. For example, we could create a <em>Map,</em> where the keys are memory addresses, and the value is the state of the object at that address. It's simple but needs additional memory to store this information. Also, maintaining such a map can be challenging.</p>\n<p><strong>ZGC uses a different approach: it stores the reference state as the bits of the reference.</strong> It's called reference coloring. But this way we have a new challenge. Setting bits of a reference to store metadata about an object means that multiple references can point to the same object since the state bits don't hold any information about the location of the object. Multimapping to the rescue!</p>\n<p>We also want to decrease memory fragmentation. ZGC uses relocation to achieve this. But with a large heap, relocation is a slow process. <strong>Since ZGC doesn't want long pause times, it does most of the relocating in parallel with the application.</strong> But this introduces a new problem.</p>\n<p>Let's say we have a reference to an object. ZGC relocates it, and a context switch occurs, where the application thread runs and tries to access this object through its old address. ZGC uses load barriers to solve this. <strong>A load barrier is a piece of code that runs when a thread loads a reference from the heap</strong> \u2013 for example, when we access a non-primitive field of an object.</p>\n<p>In ZGC, load barriers check the metadata bits of the reference. Depending on these bits, <strong>ZGC may perform some processing on the reference before we get it.</strong> Therefore, it might produce an entirely different reference. We call this remapping.</p>\n<h3  id=\"bd-marking\" data-id=\"marking\">3.2. Marking</h3>\n<div class=\"bd-anchor\" id=\"marking\"></div>\n<p>ZGC breaks marking into three phases.</p>\n<p>The first phase is a stop-the-world phase. In this phase, we look for root references and mark them. <strong>Root references are the starting points to reach objects in the heap</strong>, for example, local variables or static fields. Since the number of root references is usually small, this phase is short.</p>\n<p>The next phase is concurrent. In this phase, <strong>we traverse the object graph, starting from the root references. We mark every object we reach.</strong> Also, when a load barrier detects an unmarked reference, it marks it too.</p>\n<p>The last phase is also a stop-the-world phase to handle some edge cases, like weak references.</p>\n<p>At this point, we know which objects we can reach.</p>\n<p>ZGC uses the <em>marked0</em> and <em>marked1</em> metadata bits for marking.</p>\n<h3  id=\"bd-reference-coloring\" data-id=\"reference-coloring\">3.3. Reference Coloring</h3>\n<div class=\"bd-anchor\" id=\"reference-coloring\"></div>\n<p>A reference represents the position of a byte in the virtual memory. However, we don't necessarily have to use all bits of a reference to do that \u2013 <strong>some bits can represent properties of the reference</strong>. That's what we call reference coloring.</p>\n<p>With 32 bits, we can address 4 gigabytes. Since nowadays it's widespread for a computer to have more memory than this, we obviously can't use any of these 32 bits for coloring. Therefore, ZGC uses 64-bit references. It means <strong>ZGC is only available on 64-bit platforms:</strong></p>\n<a href=\"/wp-content/uploads/2019/02/zgc-pointer.png\"><img decoding=\"async\" loading=\"lazy\" width=\"641\" height=\"91\" class=\"aligncenter size-full wp-image-49509\" src=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-pointer.png\" alt=\"zgc pointer\" srcset=\"https://www.baeldung.com/wp-content/uploads/2019/02/zgc-pointer.png 641w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-pointer-300x43.png 300w, https://www.baeldung.com/wp-content/uploads/2019/02/zgc-pointer-100x14.png 100w\" sizes=\"(max-width: 641px) 100vw, 641px\" /></a>\n<p>ZGC references use 42 bits to represent the address itself. As a result, ZGC references can address 4 terabytes of memory space.</p>\n<p>On top of that, we have 4 bits to store reference states:</p>\n<ul>\n<li><strong><em>finalizable</em></strong> bit \u2013 the object is only reachable through a finalizer</li>\n<li><strong><em>remap</em></strong> bit \u2013 the reference is up to date and points to the current location of the object (see relocation)</li>\n<li><strong><em>marked0</em></strong> and <strong><em>marked1</em></strong> bits \u2013 these are used to mark reachable objects</li>\n</ul>\n<p>We also called these bits metadata bits. In ZGC, precisely one of these metadata bits is 1.</p>\n<h3  id=\"bd-relocation-1\" data-id=\"relocation-1\">3.4. Relocation</h3>\n<div class=\"bd-anchor\" id=\"relocation-1\"></div>\n<p>In ZGC, relocation consists of the following phases:</p>\n<ol>\n<li>A concurrent phase, which looks for blocks, we want to relocate and puts them in the relocation set.</li>\n<li>A stop-the-world phase relocates all root references in the relocation set and updates their references.</li>\n<li>A concurrent phase relocates all remaining objects in the relocation set and stores the mapping between the old and new addresses in the forwarding table.</li>\n<li>The rewriting of the remaining references happens in the next marking phase. This way, we don't have to traverse the object tree twice. Alternatively, load barriers can do it, as well.</li>\n</ol>\n<h3  id=\"bd-remapping\" data-id=\"remapping\">3.5. Remapping and Load Barriers</h3>\n<div class=\"bd-anchor\" id=\"remapping\"></div>\n<p>Note that in the relocation phase, we didn't rewrite most of the references to the relocated addresses. Therefore, using those references, we wouldn't access the objects we wanted to. Even worse, we could access garbage.</p>\n<p>ZGC uses load barriers to solve this issue. <strong>Load barriers fix the references pointing to relocated objects with a technique called remapping.</strong></p>\n<p>When the application loads a reference, it triggers the load barrier, which then follows the following steps to return the correct reference:</p>\n<ol>\n<li>Checks whether the <em>remap</em> bit is set to 1. If so, it means that the reference is up to date, so can safely we return it.</li>\n<li>Then we check whether the referenced object was in the relocation set or not. If it wasn't, that means we didn't want to relocate it. To avoid this check next time we load this reference, we set the\u00a0<em>remap</em> bit to 1 and return the updated reference.</li>\n<li>Now we know that the object we want to access was the target of relocation. The only question is whether the relocation happened or not? If the object has been relocated, we skip to the next step. Otherwise, we relocate it now and create an entry in the forwarding table, which stores the new address for each relocated object. After this, we continue with the next step.</li>\n<li>Now we know that the object was relocated. Either by ZGC, us in the previous step, or the load barrier during an earlier hit of this object. We update this reference to the new location of the object (either with the address from the previous step or by looking it up in the forwarding table), set the <em>remap</em> bit, and return the reference.</li>\n</ol>\n<p>And that's it, with the steps above we ensured that each time we try to access an object, we get the most recent reference to it. Since every time we load a reference, it triggers the load barrier. Therefore it decreases application performance. Especially the first time we access a relocated object. But this is a price we have to pay if we want short pause times. And since these steps are relatively fast, it doesn't impact the application performance significantly.</p>\n<h2  id=\"bd-enabling\" data-id=\"enabling\">4. How to Enable ZGC?</h2>\n<div class=\"bd-anchor\" id=\"enabling\"></div>\n<p>We can enable ZGC with the following command-line options when running our application:</p>\n<pre><code class=\"language-bash\">-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code></pre>\n<p>Note that since ZGC is an experimental GC, it'll take some time to become officially supported.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw that ZGC intends to support large heap sizes with low application pause times.</p>\n<p>To reach this goal, it uses techniques, including colored 64-bit references, load barriers, relocation, and remapping.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore how Z Garbage Collector manages to keep low pause times on even multi-terabyte heaps.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14849,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [362, 146],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/49506" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=49506"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/49506/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14849"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=49506" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=49506"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=49506"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 48450,
    "date": "2019-01-16T22:28:19",
    "date_gmt": "2019-01-16T20:28:19",
    "guid": { "rendered": "https://www.baeldung.com/?p=48450" },
    "modified": "2021-05-20T11:39:50",
    "modified_gmt": "2021-05-20T09:39:50",
    "slug": "java-8-streams-peek-api",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-streams-peek-api",
    "title": { "rendered": "Java 8 Streams peek() API" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>The <a href=\"/java-8-streams\">Java Stream API</a> introduces us to a powerful alternative for processing data.</p>\n<p>In this short tutorial, we'll focus on <em>peek()</em>, an often misunderstood method.</p>\n<h2  id=\"bd-quick-example\" data-id=\"quick-example\">2. Quick Example</h2>\n<div class=\"bd-anchor\" id=\"quick-example\"></div>\n<p>Let's get our hands dirty and try to use <em>peek()</em>. We have a stream of names, and we want to print them to the console.</p>\n<p>Since <em>peek()</em> expects a <em>Consumer&lt;T&gt;</em> as its only argument, it seems like a good fit, so let's give it a try:</p>\n<pre><code class=\"language-java\">Stream&lt;String&gt; nameStream = Stream.of(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Chuck&quot;);\nnameStream.peek(System.out::println);</code></pre>\n<p>However, the snippet above produces no output. To understand why,\u00a0let's do a quick refresher on aspects of the stream lifecycle.</p>\n<h2  id=\"bd-stream-lifecycle\" data-id=\"stream-lifecycle\">3. Intermediate vs. Terminal Operations</h2>\n<div class=\"bd-anchor\" id=\"stream-lifecycle\"></div>\n<p>Recall that streams have three parts: a data source, zero or more intermediate operations, and zero or one terminal operation.</p>\n<p>The source provides the elements to the pipeline.</p>\n<p>Intermediate operations get elements one-by-one and process them. <strong>All intermediate operations are lazy, and, as a result,\u00a0no operations will have any effect until the pipeline starts to work.</strong></p>\n<p>Terminal operations mean the end of the stream lifecycle. Most importantly for our scenario, they\u00a0<strong>initiate the work in the pipeline</strong>.</p>\n<h2  id=\"bd-usage\" data-id=\"usage\">4. <em>peek()</em> Usage</h2>\n<div class=\"bd-anchor\" id=\"usage\"></div>\n<p>The reason <em>peek()</em> didn't work in our first example is that <strong>it's an <em>intermediate</em> operation and we didn't apply a <em>terminal</em> operation</strong> to the pipeline. Alternatively, we could have used <em>forEach()</em> with the same argument to get the desired behavior:</p>\n<pre><code class=\"language-java\">Stream&lt;String&gt; nameStream = Stream.of(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Chuck&quot;);\nnameStream.forEach(System.out::println);</code></pre>\n<p><em>peek()</em>&#8216;s <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/Stream.html#peek(java.util.function.Consumer)\">Javadoc page</a> says: &#8220;<strong>This method exists mainly to support debugging, where you want to see the elements as they flow past a certain point in a pipeline</strong>&#8220;.</p>\n<p>Let's consider this snippet from the same Javadoc page:</p>\n<pre><code class=\"language-java\">Stream.of(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n  .filter(e -&gt; e.length() &gt; 3)\n  .peek(e -&gt; System.out.println(&quot;Filtered value: &quot; + e))\n  .map(String::toUpperCase)\n  .peek(e -&gt; System.out.println(&quot;Mapped value: &quot; + e))\n  .collect(Collectors.toList());</code></pre>\n<p>It demonstrates, how we observe the elements that passed each operation.</p>\n<p>On top of that, <em>peek()</em> can be useful in another scenario: when <strong>we want to alter the inner state of an element</strong>. For example, let's say we want to convert all user's name to lowercase before printing them:</p>\n<pre><code class=\"language-java\">Stream&lt;User&gt; userStream = Stream.of(new User(&quot;Alice&quot;), new User(&quot;Bob&quot;), new User(&quot;Chuck&quot;));\nuserStream.peek(u -&gt; u.setName(u.getName().toLowerCase()))\n  .forEach(System.out::println);</code></pre>\n<p>Alternatively, we could have used\u00a0<em>map()</em>, but <em>peek()</em> is more convenient since we don't want to replace the element.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this short tutorial, we saw a summary of the stream lifecycle to understand how <em>peek()</em> works. We also saw two everyday use cases when using <em>peek()</em> is the most straightforward option.</p>\n<p>And as usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-streams-2\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn about the peek() method and explore the lifecycle of a stream.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14523,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [161],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/48450" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=48450"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/48450/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14523"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=48450" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=48450"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=48450"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 47383,
    "date": "2018-12-26T16:56:23",
    "date_gmt": "2018-12-26T14:56:23",
    "guid": { "rendered": "https://www.baeldung.com/?p=47383" },
    "modified": "2022-04-14T09:03:13",
    "modified_gmt": "2022-04-14T07:03:13",
    "slug": "mapping-a-dynamic-json-object-with-jackson",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/jackson-mapping-dynamic-object",
    "title": { "rendered": "Mapping a Dynamic JSON Object with Jackson" },
    "content": {
      "rendered": "<h2 id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Working with predefined JSON data structures with Jackson is straightforward. However, sometimes we need to handle dynamic\u00a0<strong>JSON objects, which have unknown properties</strong>.</p>\n<p>In this quick tutorial, we'll learn multiple ways of mapping dynamic JSON objects into Java classes.</p>\n<p>Note that in all of the tests, we assume we have the field <em>objectMapper</em> of type <em>com.fasterxml.jackson.databind.ObjectMapper</em>.</p>\n\n<h2 id=\"bd-using-jsonnode\" data-id=\"using-jsonnode\">2. Using <em>JsonNode</em></h2>\n<div class=\"bd-anchor\" id=\"using-jsonnode\"></div>\n<p>Let's say we want to process product specifications in a web shop. <strong>All the products have some common properties, but they have different ones as well, depending on the type of the product.</strong></p>\n<p>For example, we want to know the aspect ratio of the display of a cell phone, but this property doesn't make much sense for a shoe.</p>\n<p>The data structure looks like this:</p>\n<pre><code class=\"language-javascript\">{\n    &quot;name&quot;: &quot;Pear yPhone 72&quot;,\n    &quot;category&quot;: &quot;cellphone&quot;,\n    &quot;details&quot;: {\n        &quot;displayAspectRatio&quot;: &quot;97:3&quot;,\n        &quot;audioConnector&quot;: &quot;none&quot;\n    }\n}</code></pre>\n<p>We store the dynamic properties in the <em>details</em> object.</p>\n<p>We can map the common properties with the following Java class:</p>\n<pre><code class=\"language-java\">class Product {\n\n    String name;\n    String category;\n\n    // standard getters and setters\n}</code></pre>\n<p>On top of that, we need an appropriate representation for the <em>details</em> object. For example, <strong><em>com.fasterxml.jackson.databind.JsonNode</em> can handle dynamic keys</strong>.</p>\n<p>To use it, we have to add it as a field to our <em>Product</em> class:</p>\n<pre><code class=\"language-java\">class Product {\n\n    // common fields\n\n    JsonNode details;\n\n    // standard getters and setters\n}</code></pre>\n<p>Finally, we verify that it works:</p>\n<pre><code class=\"language-java\">String json = &quot;&lt;json object&gt;&quot;;\n\nProduct product = objectMapper.readValue(json, Product.class);\n\nassertThat(product.getName()).isEqualTo(&quot;Pear yPhone 72&quot;);\nassertThat(product.getDetails().get(&quot;audioConnector&quot;).asText()).isEqualTo(&quot;none&quot;);</code></pre>\n<p>However, there's a problem with this solution;<strong> our class depends on the Jackson library, since we have a <em>JsonNode</em> field.</strong></p>\n<h2 id=\"bd-using-map\" data-id=\"using-map\">3. Using <em>Map</em></h2>\n<div class=\"bd-anchor\" id=\"using-map\"></div>\n<p>We can solve this issue by using <em>java.util.Map</em> for the <em>details</em> field. More precisely, we have to use <em>Map&lt;String, Object&gt;</em>.</p>\n<p>Everything else can stay the same:</p>\n<pre><code class=\"language-java\">class Product {\n\n    // common fields\n\n    Map&lt;String, Object&gt; details;\n\n    // standard getters and setters\n}</code></pre>\n<p>And then we can verify it with a test:</p>\n<pre><code class=\"language-java\">String json = &quot;&lt;json object&gt;&quot;;\n\nProduct product = objectMapper.readValue(json, Product.class);\n\nassertThat(product.getName()).isEqualTo(&quot;Pear yPhone 72&quot;);\nassertThat(product.getDetails().get(&quot;audioConnector&quot;)).isEqualTo(&quot;none&quot;);</code></pre>\n<h2 id=\"bd-using-jsonanysetter\" data-id=\"using-jsonanysetter\">4. Using <em>@JsonAnySetter</em></h2>\n<div class=\"bd-anchor\" id=\"using-jsonanysetter\"></div>\n<p>The previous solutions are good options when an object contains only dynamic properties. However, sometimes we have <strong>fixed and dynamic properties mixed in a single JSON object</strong>.</p>\n<p>For example, we may need to\u00a0flatten our product representation:</p>\n<pre><code class=\"language-javascript\">{\n    &quot;name&quot;: &quot;Pear yPhone 72&quot;,\n    &quot;category&quot;: &quot;cellphone&quot;,\n    &quot;displayAspectRatio&quot;: &quot;97:3&quot;,\n    &quot;audioConnector&quot;: &quot;none&quot;\n}</code></pre>\n<p>We can treat this kind of structure as a dynamic object. Unfortunately, this means we can't define common properties, we have to treat them dynamically, too.</p>\n<p>Alternatively, we could use <strong><em>@JsonAnySetter</em> to mark a method for handling additional, unknown properties</strong>. Such a method should accept two arguments, the name and value of the property:</p>\n<pre><code class=\"language-java\">class Product {\n\n    // common fields\n\n    Map&lt;String, Object&gt; details = new LinkedHashMap&lt;&gt;();\n\n    @JsonAnySetter\n    void setDetail(String key, Object value) {\n        details.put(key, value);\n    }\n\n    // standard getters and setters\n}</code></pre>\n<p>Note that we have to instantiate the <em>details</em> object to avoid <em>NullPointerExceptions</em>.</p>\n<p>Since we store the dynamic properties in a <em>Map</em>, we can use it the same way we did before:</p>\n<pre><code class=\"language-java\">String json = &quot;&lt;json object&gt;&quot;;\n\nProduct product = objectMapper.readValue(json, Product.class);\n\nassertThat(product.getName()).isEqualTo(&quot;Pear yPhone 72&quot;);\nassertThat(product.getDetails().get(&quot;audioConnector&quot;)).isEqualTo(&quot;none&quot;);</code></pre>\n<h2 id=\"bd-creating-a-custom-deserializer\" data-id=\"creating-a-custom-deserializer\">5. Creating a Custom Deserializer</h2>\n<div class=\"bd-anchor\" id=\"creating-a-custom-deserializer\"></div>\n<p>For most cases, these solutions work just fine; however, sometimes we need much more control. For example, we could store deserialization information about our JSON objects in a database.</p>\n<p>We can target those situations with a custom deserializer. Since that's a more complex topic, we cover it in a different article, <a href=\"/jackson-deserialization\">getting Started with Custom Deserialization in Jackson</a>.</p>\n<h2 id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we discussed multiple ways of handling dynamic JSON objects with Jackson.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/jackson-modules/jackson-conversions-2\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore multiple ways of\u00a0handling dynamic JSON objects with Jackson.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14850,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [7, 55],
    "tags": [375],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/47383" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=47383"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/47383/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14850"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=47383" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=47383"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=47383"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 46490,
    "date": "2018-12-03T22:03:53",
    "date_gmt": "2018-12-03T20:03:53",
    "guid": { "rendered": "https://www.baeldung.com/?p=46490" },
    "modified": "2022-01-19T10:11:43",
    "modified_gmt": "2022-01-19T08:11:43",
    "slug": "remove-leading-and-trailing-characters-from-a-string",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-remove-trailing-characters",
    "title": {
      "rendered": "Remove Leading and Trailing Characters from a String"
    },
    "content": {
      "rendered": "<h2 id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>In this short tutorial, we'll see several ways to remove leading and trailing characters from a <em>String</em>. For the sake of simplicity, we'll remove zeroes in the examples.</p>\n<p>With each implementation, we'll create two methods: one for leading, and one for trailing zeroes.</p>\n<p>This problem has an edge case: what do we want to do, when the input contains zeroes only? Return an empty <em>String</em>, or a <em>String</em> containing a single zero? We'll see implementations for both use cases in each of the solutions.</p>\n<p>We have unit tests for each implementation, which you can find <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-string-algorithms-2\">on GitHub</a>.</p>\n<h2 id=\"bd-using-stringbuilder\" data-id=\"using-stringbuilder\">2. Using <em>StringBuilder</em></h2>\n<div class=\"bd-anchor\" id=\"using-stringbuilder\"></div>\n<p>In our first solution, we'll create a <strong><em>StringBuilder</em> with the original <em>String</em>, and we'll delete the unnecessary characters</strong> from the beginning or the end:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    while (sb.length() &gt; 0 && sb.charAt(0) == &#039;0&#039;) {\n        sb.deleteCharAt(0);\n    }\n    return sb.toString();\n}\n\nString removeTrailingZeroes(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    while (sb.length() &gt; 0 && sb.charAt(sb.length() - 1) == &#039;0&#039;) {\n        sb.setLength(sb.length() - 1);\n    }\n    return sb.toString();\n}</code></pre>\n<p>Note, that we use <em>StringBuilder.setLength()</em> instead of <em>StringBuilder.deleteCharAt()</em> when we remove trailing zeroes because it also deletes the last few characters and it's more performant.</p>\n<p>If we <strong>don't want to return an empty <em>String</em></strong> when the input contains only zeroes, the only thing we need to do is to <strong>stop the loop if there's only a single character left</strong>.</p>\n<p>Therefore, we change the loop condition:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    while (sb.length() &gt; 1 && sb.charAt(0) == &#039;0&#039;) {\n        sb.deleteCharAt(0);\n    }\n    return sb.toString();\n}\n\nString removeTrailingZeroes(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    while (sb.length() &gt; 1 && sb.charAt(sb.length() - 1) == &#039;0&#039;) {\n        sb.setLength(sb.length() - 1);\n    }\n    return sb.toString();\n}</code></pre>\n<h2 id=\"bd-using-stringsubstring\" data-id=\"using-stringsubstring\">3. Using <em>String.subString()</em></h2>\n<div class=\"bd-anchor\" id=\"using-stringsubstring\"></div>\n<p>In this solution when we remove leading or trailing zeroes, we<strong> find the position of the first or last non-zero character. </strong></p>\n<p>After that, we only have to call <em>substring()</em>, to return the remaining parts:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    int index;\n    for (index = 0; index &lt; s.length(); index++) {\n        if (s.charAt(index) != &#039;0&#039;) {\n            break;\n        }\n    }\n    return s.substring(index);\n}\n\nString removeTrailingZeroes(String s) {\n    int index;\n    for (index = s.length() - 1; index &gt;= 0; index--) {\n        if (s.charAt(index) != &#039;0&#039;) {\n            break;\n        }\n    }\n    return s.substring(0, index + 1);\n}</code></pre>\n<p>Note, that we have to declare the variable <em>index</em> before the for loop because we want to use the variable outside the loop's scope.</p>\n<p>Also note, that we have to look for non-zero characters manually, since <em>String.indexOf()</em> and <em>String.lastIndexOf()</em> work only for exact matching.</p>\n<p>If we <strong>don't want to return an empty <em>String</em></strong>, we have to do the same thing like before: <strong>change the loop condition</strong>:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    int index;\n    for (index = 0; index &lt; s.length() - 1; index++) {\n        if (s.charAt(index) != &#039;0&#039;) {\n            break;\n        }\n    }\n    return s.substring(index);\n}\n\nString removeTrailingZeroes(String s) {\n    int index;\n    for (index = s.length() - 1; index &gt; 0; index--) {\n        if (s.charAt(index) != &#039;0&#039;) {\n            break;\n        }\n    }\n    return s.substring(0, index + 1);\n}</code></pre>\n<h2 id=\"bd-using-apache-commons\" data-id=\"using-apache-commons\">4. Using Apache Commons</h2>\n<div class=\"bd-anchor\" id=\"using-apache-commons\"></div>\n<p>Apache Commons has many useful classes, including <em>org.apache.commons.lang.StringUtils</em>. To be more precise, this class is in Apache Commons Lang3.</p>\n<h3 id=\"bd-1-dependencies\" data-id=\"1-dependencies\">4.1. Dependencies</h3>\n<div class=\"bd-anchor\" id=\"1-dependencies\"></div>\n<p>We can use <a href=\"https://search.maven.org/search?q=a:commons-lang3\">Apache Commons Lang3</a> by inserting this dependency into our <em>pom.xml</em> file:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;\n    &lt;version&gt;3.12.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<h3 id=\"bd-2-implementation\" data-id=\"2-implementation\">4.2. Implementation</h3>\n<div class=\"bd-anchor\" id=\"2-implementation\"></div>\n<p>In the <em>StringUtils</em> class, we have the methods <em>stripStart()</em> and <em>stripEnd()</em>. They remove leading and trailing characters respectively.</p>\n<p>Since it's exactly what we need, our solution is pretty straightforward:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    return StringUtils.stripStart(s, &quot;0&quot;);\n}\n\nString removeTrailingZeroes(String s) {\n    return StringUtils.stripEnd(s, &quot;0&quot;);\n}</code></pre>\n<p>Unfortunately, we can't configure, if we want to remove all occurrences or not. Therefore, we need to control it manually.</p>\n<p>If the input wasn't empty, but the stripped <em>String</em> is empty, then we have to return exactly one zero:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    String stripped = StringUtils.stripStart(s, &quot;0&quot;);\n    if (stripped.isEmpty() && !s.isEmpty()) {\n        return &quot;0&quot;;\n    }\n    return stripped;\n}\n\nString removeTrailingZeroes(String s) {\n    String stripped = StringUtils.stripEnd(s, &quot;0&quot;);\n    if (stripped.isEmpty() && !s.isEmpty()) {\n        return &quot;0&quot;;\n    }\n    return stripped;\n}</code></pre>\n<p>Note, that these methods accept a <em>String</em> as their second parameter. This <em>String</em> represents a set of characters, not a sequence we want to remove.</p>\n<p>For example, if we pass <em>&#8220;01&#8221;</em>, they'll remove any leading or trailing characters, that are either <em>&#8216;0'</em> or <em>&#8216;1'</em>.</p>\n<h2 id=\"bd-using-guava\" data-id=\"using-guava\">5. Using Guava</h2>\n<div class=\"bd-anchor\" id=\"using-guava\"></div>\n<p>Guava also provides many utility classes. For this problem, we can use <em>com.google.common.base.CharMatcher</em>, which provides utility methods to interact with matching characters.</p>\n<h3 id=\"bd-1-dependencies-1\" data-id=\"1-dependencies-1\">5.1. Dependencies</h3>\n<div class=\"bd-anchor\" id=\"1-dependencies-1\"></div>\n<p>To use Guava, we should add the following <a href=\"https://search.maven.org/search?q=a:guava\">dependencies</a> to our <em>pom.xml</em> file:</p>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n    &lt;artifactId&gt;guava&lt;/artifactId&gt;\n    &lt;version&gt;31.0.1-jre&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p>Note, that if we want to use Guava in an Android application, we should use version <em>27.0-android</em> instead.</p>\n<h3 id=\"bd-2-implementation-1\" data-id=\"2-implementation-1\">5.2. Implementation</h3>\n<div class=\"bd-anchor\" id=\"2-implementation-1\"></div>\n<p>In our case, we're interested in <em>trimLeadingFrom()</em> and <em>trimTrailingFrom()</em>.</p>\n<p>As their name suggests, they remove any leading or trailing character respectively from a <em>String</em>, which matches the <em>CharMatcher</em>:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    return CharMatcher.is(&#039;0&#039;).trimLeadingFrom(s);\n}\n\nString removeTrailingZeroes(String s) {\n    return CharMatcher.is(&#039;0&#039;).trimTrailingFrom(s);\n}</code></pre>\n<p>They have the same characteristics, as the Apache Commons methods we saw.</p>\n<p>Therefore, if we don't want to remove all zeroes, we can use the same trick:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    String stripped = CharMatcher.is(&#039;0&#039;).trimLeadingFrom(s);\n    if (stripped.isEmpty() && !s.isEmpty()) {\n        return &quot;0&quot;;\n    }\n    return stripped;\n}\n\nString removeTrailingZeroes(String s) {\n    String stripped = CharMatcher.is(&#039;0&#039;).trimTrailingFrom(s);\n    if (stripped.isEmpty() && !s.isEmpty()) {\n        return &quot;0&quot;;\n    }\n    return stripped;\n}</code></pre>\n<p>Note, that with <em>CharMatcher</em> we can create more complex matching rules.</p>\n<h2 id=\"bd-using-regular-expressions\" data-id=\"using-regular-expressions\">6. Using Regular Expressions</h2>\n<div class=\"bd-anchor\" id=\"using-regular-expressions\"></div>\n<p>Since our problem is a pattern matching problem, we can use regular expressions: <strong>we want to match all zeroes at the beginning or the end</strong> of a <em>String</em>.</p>\n<p>On top of that, we want to remove those matching zeroes. In other words, we want to <strong>replace them with nothing, or in other words, an empty <em>String</em></strong>.</p>\n<p>We can do exactly that, with the <em>String.replaceAll()</em> method:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    return s.replaceAll(&quot;^0+&quot;, &quot;&quot;);\n}\n\nString removeTrailingZeroes(String s) {\n    return s.replaceAll(&quot;0+$&quot;, &quot;&quot;);\n}</code></pre>\n<p>If we don't want to remove all zeroes, we could use the same solution we used with Apache Commons and Guava. However, there's a pure regular expression way to do this: we have to provide a pattern, which doesn't match the whole <em>String</em>.</p>\n<p>That way, if the input contains only zeroes, the regexp engine will keep exactly one out from the matching. We can do this with the following patterns:</p>\n<pre><code class=\"language-java\">String removeLeadingZeroes(String s) {\n    return s.replaceAll(&quot;^0+(?!$)&quot;, &quot;&quot;);\n}\n\nString removeTrailingZeroes(String s) {\n    return s.replaceAll(&quot;(?!^)0+$&quot;, &quot;&quot;);\n}</code></pre>\n<p>Note, that <em>&#8220;(?!^)&#8221;</em> and <em>&#8220;(?!$)&#8221;</em> means that it's not the beginning or the end of the <em>String</em> respectively.</p>\n<h2 id=\"bd-conclusion\" data-id=\"conclusion\">7. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this tutorial, we saw several ways to remove leading and trailing characters from a <em>String</em>. The choice between these implementations is often simply personal preference.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-string-algorithms-2\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore several ways to remove leading and trailing characters from a String.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14846,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8],
    "tags": [177],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/46490" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=46490"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/46490/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14846"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=46490" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=46490"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=46490"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 45364,
    "date": "2018-11-15T10:52:50",
    "date_gmt": "2018-11-15T08:52:50",
    "guid": { "rendered": "https://www.baeldung.com/?p=45364" },
    "modified": "2022-06-07T06:42:22",
    "modified_gmt": "2022-06-07T04:42:22",
    "slug": "many-to-many-relationship-in-jpa",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/jpa-many-to-many",
    "title": { "rendered": "Many-To-Many Relationship in JPA" },
    "content": {
      "rendered": "<h2 id=\"bd-overview\" data-id=\"overview\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"overview\"></div>\n<p>In this tutorial, we'll see multiple ways to <strong>deal with many-to-many relationships using JPA.</strong></p>\n<p>We'll use a model of students, courses, and various relationships between them.</p>\n<p>For the sake of simplicity, in the code examples, we'll only show the attributes and JPA configuration that's related to the many-to-many relationships.</p>\n\n<h2 id=\"bd-basic-many-to-many\" data-id=\"basic-many-to-many\">2. Basic Many-to-Many</h2>\n<div class=\"bd-anchor\" id=\"basic-many-to-many\"></div>\n<h3 id=\"bd-1-modeling-a-many-to-many-relationship\" data-id=\"1-modeling-a-many-to-many-relationship\">2.1. Modeling a Many-to-Many Relationship</h3>\n<div class=\"bd-anchor\" id=\"1-modeling-a-many-to-many-relationship\"></div>\n<p><strong>A relationship is a connection between two types of entities. In the case of a many-to-many relationship, both sides can relate to multiple instances of the other side.</strong></p>\n<p>Note that it's possible for entity types to be in a relationship with themselves. Think about the example of modeling family trees: Every node is a person, so if we talk about the parent-child relationship, both participants will be a person.</p>\n<p>However, it doesn't make such a difference whether we talk about a relationship between single or multiple entity types. Since it's easier to think about relationships between two different entity types, we'll use that to illustrate our cases.</p>\n<p>Let's take the example of students marking the courses they like.</p>\n<p>A student can like <strong>many</strong> courses, and <strong>many</strong> students can like the same course:</p>\n<a href=\"/wp-content/uploads/2018/11/simple-er.png\"><img decoding=\"async\" loading=\"lazy\" width=\"442\" height=\"62\" class=\"alignnone size-full wp-image-45367\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/simple-er.png\" alt=\"simple-er\" srcset=\"https://www.baeldung.com/wp-content/uploads/2018/11/simple-er.png 442w, https://www.baeldung.com/wp-content/uploads/2018/11/simple-er-300x42.png 300w, https://www.baeldung.com/wp-content/uploads/2018/11/simple-er-100x14.png 100w\" sizes=\"(max-width: 442px) 100vw, 442px\" /></a>\n<p>As we know, in RDBMSs we can create relationships with foreign keys. Since both sides should be able to reference the other, <strong>we need to create a separate table to hold the foreign keys</strong>:</p>\n<a href=\"/wp-content/uploads/2018/11/simple-model-updated.png\"><img decoding=\"async\" class=\"alignnone size-full wp-image-45369\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/simple-model-updated.png\" alt=\"simple-model-updated\" /></a>\n<p>Such a table is called a <strong>join table.</strong> In a join table, the combination of the foreign keys will be its composite primary key.</p>\n<h3 id=\"bd-2-implementation-in-jpa\" data-id=\"2-implementation-in-jpa\">2.2. Implementation in JPA</h3>\n<div class=\"bd-anchor\" id=\"2-implementation-in-jpa\"></div>\n<p><strong>Modeling a many-to-many relationship with POJOs</strong> is easy. We should <strong>include a <em>Collection</em> in both classes</strong>, which contains the elements of the others.</p>\n<p>After that, we need to mark the class with <em>@Entity</em>\u00a0and the primary key with <em>@Id</em> to make them proper JPA entities.</p>\n<p>Also, we should configure the relationship type. So, <strong>we mark the collections with <em>@ManyToMany</em></strong> annotations:</p>\n<pre><code class=\"language-java\">@Entity\nclass Student {\n\n    @Id\n    Long id;\n\n    @ManyToMany\n    Set&lt;Course&gt; likedCourses;\n\n    // additional properties\n    // standard constructors, getters, and setters\n}\n\n@Entity\nclass Course {\n\n    @Id\n    Long id;\n\n    @ManyToMany\n    Set&lt;Student&gt; likes;\n\n    // additional properties\n    // standard constructors, getters, and setters\n}</code></pre>\n<p>Additionally, we have to configure how to model the relationship in the RDBMS.</p>\n<p>The owner side is where we configure the relationship. We'll use the <em>Student</em> class.</p>\n<p><strong>We can do this with the <em>@JoinTable</em> annotation in the <em>Student</em> class.</strong> We provide the name of the join table (<em>course_like</em>) as well as the foreign keys with the <em>@JoinColumn</em> annotations. The <em>joinColumn</em> attribute will connect to the owner side of the relationship, and the <em>inverseJoinColumn</em> to the other side:</p>\n<pre><code class=\"language-java\">@ManyToMany\n@JoinTable(\n  name = &quot;course_like&quot;, \n  joinColumns = @JoinColumn(name = &quot;student_id&quot;), \n  inverseJoinColumns = @JoinColumn(name = &quot;course_id&quot;))\nSet&lt;Course&gt; likedCourses;</code></pre>\n<p>Note that using <em>@JoinTable</em>\u00a0or even <em>@JoinColumn</em> isn't required. JPA will generate the table and column names for us. However, the strategy JPA uses won't always match the naming conventions we use. So, we need the possibility to configure table and column names.</p>\n<p><strong>On the target side, we only have to provide the name of the field, which maps the relationship.</strong></p>\n<p>Therefore, we set the <em>mappedBy</em> attribute of the <em>@ManyToMany</em> annotation in the <em>Course</em> class:</p>\n<pre><code class=\"language-java\">@ManyToMany(mappedBy = &quot;likedCourses&quot;)\nSet&lt;Student&gt; likes;</code></pre>\n<p>Keep in mind that since <strong>a many-to-many relationship doesn't have an owner side in the database</strong>, we could configure the join table in the <em>Course</em> class and reference it from the <em>Student </em>class.</p>\n<h2 id=\"bd-many-to-many-using-a-composite-key\" data-id=\"many-to-many-using-a-composite-key\">3. Many-to-Many Using a Composite Key</h2>\n<div class=\"bd-anchor\" id=\"many-to-many-using-a-composite-key\"></div>\n<h3 id=\"bd-1-modeling-relationship-attributes\" data-id=\"1-modeling-relationship-attributes\">3.1. Modeling Relationship Attributes</h3>\n<div class=\"bd-anchor\" id=\"1-modeling-relationship-attributes\"></div>\n<p>Let's say we want to let students rate the courses. A student can rate any number of courses, and any number of students can rate the same course. Therefore, it's also a many-to-many relationship.</p>\n<p>What makes this example a bit more complicated is that <strong>there is more to the rating relationship than the fact that it exists. We need to store the rating score the student gave on the course.</strong></p>\n<p>Where can we store this information? We can't put it in the <em>Student</em> entity since a student can give different ratings to different courses. Similarly, storing it in the <em>Course</em> entity wouldn't be a good solution either.</p>\n<p>This is a situation when <strong>the relationship itself has an attribute.</strong></p>\n<p>Using this example, attaching an attribute to a relation looks like this in an ER diagram:</p>\n<a href=\"/wp-content/uploads/2018/11/relation-attribute-er.png\"><img decoding=\"async\" loading=\"lazy\" width=\"442\" height=\"133\" class=\"alignnone size-full wp-image-45370\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er.png\" alt=\"relation-attribute-er\" srcset=\"https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er.png 442w, https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er-300x90.png 300w, https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er-100x30.png 100w\" sizes=\"(max-width: 442px) 100vw, 442px\" /></a>\n<p><strong>We can model it almost the same way as the simple many-to-many relationship. </strong><strong>The only difference is that we attach a new attribute to the join table:</strong></p>\n<a href=\"/wp-content/uploads/2018/11/relation-attribute-model-updated.png\"><img decoding=\"async\" class=\"alignnone size-full wp-image-45371\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-model-updated.png\" alt=\"relation attribute model updated\" /></a>\n<h3 id=\"bd-2-creating-a-composite-key-in-jpa\" data-id=\"2-creating-a-composite-key-in-jpa\">3.2. Creating a Composite Key in JPA</h3>\n<div class=\"bd-anchor\" id=\"2-creating-a-composite-key-in-jpa\"></div>\n<p>The implementation of a simple many-to-many relationship was rather straightforward. The only problem is that we cannot add a property to a relationship that way because we connected the entities directly. Therefore, <strong>we had no way to add a property to the relationship itself.</strong></p>\n<p>Since we map DB attributes to class fields in JPA,<strong> we need to create a new entity class for the relationship.</strong></p>\n<p>Of course, every JPA entity needs a primary key. <strong>Because our primary key is a composite key, we have to create a new class that will hold the different parts of the key</strong>:</p>\n<pre><code class=\"language-java\">@Embeddable\nclass CourseRatingKey implements Serializable {\n\n    @Column(name = &quot;student_id&quot;)\n    Long studentId;\n\n    @Column(name = &quot;course_id&quot;)\n    Long courseId;\n\n    // standard constructors, getters, and setters\n    // hashcode and equals implementation\n}</code></pre>\n<p>Note that a composite key class has to fulfill some <strong>key requirements</strong>:</p>\n<ul>\n<li>We have to mark it with <em>@Embeddable</em>.</li>\n<li>It has to implement <em>java.io.Serializable</em>.</li>\n<li>We need to provide an implementation of the <em>hashcode()</em> and <em>equals()</em> methods.</li>\n<li>None of the fields can be an entity themselves.</li>\n</ul>\n<h3 id=\"bd-3-using-a-composite-key-in-jpa\" data-id=\"3-using-a-composite-key-in-jpa\">3.3. Using a Composite Key in JPA</h3>\n<div class=\"bd-anchor\" id=\"3-using-a-composite-key-in-jpa\"></div>\n<p>Using this composite key class, we can create the entity class, which models the join table:</p>\n<pre><code class=\"language-java\">@Entity\nclass CourseRating {\n\n    @EmbeddedId\n    CourseRatingKey id;\n\n    @ManyToOne\n    @MapsId(&quot;studentId&quot;)\n    @JoinColumn(name = &quot;student_id&quot;)\n    Student student;\n\n    @ManyToOne\n    @MapsId(&quot;courseId&quot;)\n    @JoinColumn(name = &quot;course_id&quot;)\n    Course course;\n\n    int rating;\n    \n    // standard constructors, getters, and setters\n}</code></pre>\n<p>This code is very similar to a regular entity implementation. However, we have some key differences:</p>\n<ul>\n<li>We used <strong><em>@EmbeddedId</em>\u00a0to mark the primary key</strong>, which is an instance of the <em>CourseRatingKey</em> class.</li>\n<li><strong>We marked the <em>student</em> and <em>course</em> fields with <em>@MapsId</em>.</strong></li>\n</ul>\n<p><em>@MapsId</em> means that we tie those fields to a part of the key, and they're the foreign keys of a many-to-one relationship. We need it because, as we mentioned, we can't have entities in the composite key.</p>\n<p>After this, we can configure the inverse references in the <em>Student</em> and <em>Course</em> entities as before:</p>\n<pre><code class=\"language-java\">class Student {\n\n    // ...\n\n    @OneToMany(mappedBy = &quot;student&quot;)\n    Set&lt;CourseRating&gt; ratings;\n\n    // ...\n}\n\nclass Course {\n\n    // ...\n\n    @OneToMany(mappedBy = &quot;course&quot;)\n    Set&lt;CourseRating&gt; ratings;\n\n    // ...\n}</code></pre>\n<p>Note that there's an alternative way to use composite keys: the <a href=\"/hibernate-identifiers\"><em>@IdClass</em></a> annotation.</p>\n<h3 id=\"bd-4-further-characteristics\" data-id=\"4-further-characteristics\">3.4. Further Characteristics</h3>\n<div class=\"bd-anchor\" id=\"4-further-characteristics\"></div>\n<p><strong>We configured the relationships to the <em>Student</em> and <em>Course</em> classes as <em>@ManyToOne</em>. We could do this because with the new entity we structurally decomposed the many-to-many relationship to two many-to-one relationships.</strong></p>\n<p>Why were we able to do this? If we inspect the tables closely in the previous case, we can see that it contained two many-to-one relationships. <strong>In other words, there isn't any many-to-many relationship in an RDBMS. We call the structures we create with join tables many-to-many relationships because that's what we model.</strong></p>\n<p>Besides, it's more clear if we talk about many-to-many relationships because that's our intention. Meanwhile, a join table is just an implementation detail; we don't really care about it.</p>\n<p>Moreover, this solution has an additional feature we haven't mentioned yet. The simple many-to-many solution creates a relationship between two entities. Therefore, we cannot expand the relationship to more entities. But we don't have this limit in this solution: <strong>we can model relationships between any number of entity types.</strong></p>\n<p>For example, when multiple teachers can teach a course, students can rate how a specific teacher teaches a specific course. <strong>That way, a rating would be a relationship between three entities: a student, a course and a teacher.</strong></p>\n<h2 id=\"bd-many-to-many-with-a-new-entity\" data-id=\"many-to-many-with-a-new-entity\">4. Many-to-Many With a New Entity</h2>\n<div class=\"bd-anchor\" id=\"many-to-many-with-a-new-entity\"></div>\n<h3 id=\"bd-1-modeling-relationship-attributes-1\" data-id=\"1-modeling-relationship-attributes-1\">4.1. Modeling Relationship Attributes</h3>\n<div class=\"bd-anchor\" id=\"1-modeling-relationship-attributes-1\"></div>\n<p>Let's say we want to let students register for courses. Also, <strong>we need to store the point when a student registered for a specific course.</strong> On top of that, we want to store what grade she received in the course.</p>\n<p>In an ideal world, we could solve this with the previous solution, where we had an entity with a composite key. However, the world is far from ideal, and students don't always accomplish a course on the first try.</p>\n<p>In this case, there are <strong>multiple connections between the same student-course pairs</strong>, or multiple rows, with the same <em>student_id-course_id</em> pairs. We can't model it using any of the previous solutions because all primary keys must be unique. So, we need to use a separate primary key.</p>\n<p>Therefore, <strong>we can introduce an entity</strong>, which will hold the attributes of the registration:</p>\n<a href=\"/wp-content/uploads/2018/11/relation-entity-er-updated.png\"><img decoding=\"async\" class=\"alignnone size-full wp-image-45372\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/relation-entity-er-updated.png\" alt=\"relation entity-er updated\" /></a>\n<p>In this case, <strong>the Registration entity represents the relationship</strong> between the other two entities.</p>\n<p>Since it's an entity, it'll have its own primary key.</p>\n<p>In the previous solution, remember that we had a composite primary key we created from the two foreign keys.</p>\n<p>Now the two foreign keys won't be part of the primary key:</p>\n<a href=\"/wp-content/uploads/2018/11/relation-entity-model-updated.png\"><img decoding=\"async\" class=\"alignnone size-full wp-image-45373\" src=\"https://www.baeldung.com/wp-content/uploads/2018/11/relation-entity-model-updated.png\" alt=\"relation entity model updated\" /></a>\n<h3 id=\"bd-2-implementation-in-jpa-1\" data-id=\"2-implementation-in-jpa-1\">4.2. Implementation in JPA</h3>\n<div class=\"bd-anchor\" id=\"2-implementation-in-jpa-1\"></div>\n<p>Since the <em>course_registration</em> became a regular table, we can create a plain old JPA entity modeling it:</p>\n<pre><code class=\"language-java\">@Entity\nclass CourseRegistration {\n\n    @Id\n    Long id;\n\n    @ManyToOne\n    @JoinColumn(name = &quot;student_id&quot;)\n    Student student;\n\n    @ManyToOne\n    @JoinColumn(name = &quot;course_id&quot;)\n    Course course;\n\n    LocalDateTime registeredAt;\n\n    int grade;\n    \n    // additional properties\n    // standard constructors, getters, and setters\n}</code></pre>\n<p>We also need to configure the relationships in the <em>Student</em> and <em>Course</em> classes:</p>\n<pre><code class=\"language-java\">class Student {\n\n    // ...\n\n    @OneToMany(mappedBy = &quot;student&quot;)\n    Set&lt;CourseRegistration&gt; registrations;\n\n    // ...\n}\n\nclass Course {\n\n    // ...\n\n    @OneToMany(mappedBy = &quot;course&quot;)\n    Set&lt;CourseRegistration&gt; registrations;\n\n    // ...\n}</code></pre>\n<p>Again, we configured the relationship earlier, so we only need to tell JPA where can it find that configuration.</p>\n<p>We could also use this solution to address the previous problem of students rating courses. However, it feels weird to create a dedicated primary key unless we have to.</p>\n<p>Moreover, from an RDBMS perspective, it doesn't make much sense since combining the two foreign keys made a perfect composite key. Besides, that <strong>composite key had a clear meaning: which entities we connect in the relationship.</strong></p>\n<p>Otherwise, the choice between these two implementations is often simply personal preference.</p>\n<h2 id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw what a many-to-many relationship is and how can we model it in an RDBMS using JPA.</p>\n<p>We saw three ways to model it in JPA. All three have different advantages and disadvantages when it comes to these aspects:</p>\n<ul>\n<li>code clarity</li>\n<li>DB clarity</li>\n<li>ability to assign attributes to the relationship</li>\n<li>how many entities we can link with the relationship</li>\n<li>support for multiple connections between the same entities</li>\n</ul>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-jpa-2\" target=\"_blank\" rel=\"noopener noreferrer\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn how to model a many-to-many relationship in Java using JPA</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14854,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [11],
    "tags": [375, 34],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/45364" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=45364"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/45364/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14854"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=45364" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=45364"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=45364"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 42525,
    "date": "2018-10-18T20:45:12",
    "date_gmt": "2018-10-18T18:45:12",
    "guid": { "rendered": "/?p=42525" },
    "modified": "2022-07-22T13:13:37",
    "modified_gmt": "2022-07-22T11:13:37",
    "slug": "heap-sort-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-heap-sort",
    "title": { "rendered": "Heap Sort in Java" },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>In this tutorial, we'll see how <a href=\"/cs/understanding-heapsort\">Heap Sort</a> works, and we'll implement it in Java.</p>\n<p><strong>Heap Sort is based on the Heap data structure. </strong>In order to understand Heap Sort properly, we'll first dig into Heaps and how they are implemented.</p>\n<h2  id=\"bd-heap-data-structure\" data-id=\"heap-data-structure\">2. Heap Data Structure</h2>\n<div class=\"bd-anchor\" id=\"heap-data-structure\"></div>\n<p>A Heap is a <strong>specialized tree-based data structure</strong>. Therefore it's composed of nodes. We assign the elements to nodes: every node contains exactly one element.</p>\n<p>Also, nodes can have children. <strong>If a node doesn't have any children, we call it leaf.</strong></p>\n<p>What Heap makes special are two things:</p>\n<ol>\n<li>every node's value must be <strong>less or equal to all values stored in its children</strong></li>\n<li>it's a <strong>complete tree</strong>, which means it has the least possible height</li>\n</ol>\n<p>Because of the 1st rule, <strong>the least element always will be in the root of the tree</strong>.</p>\n<p>How we enforce these rules is implementation-dependent.</p>\n<p>Heaps are usually used to implement priority queues because Heap is a very efficient implementation of extracting the least (or greatest) element.</p>\n<h3  id=\"bd-heap-variants\" data-id=\"heap-variants\">2.1. Heap Variants</h3>\n<div class=\"bd-anchor\" id=\"heap-variants\"></div>\n<p>Heap has many variants, all of them differ in some implementation details.</p>\n<p>For example, what we described above is a <strong>Min-Heap, because a parent is always less than all of its children</strong>. Alternatively, we could have defined Max-Heap, in which case a parent is always greater than it's children. Hence, the greatest element will be in the root node.</p>\n<p>We can choose from many tree implementations. The most straightforward is a Binary Tree. <strong>In a Binary Tree, every node can have at most two children.</strong> We call them <strong>left child</strong> and <strong>right child</strong>.</p>\n<p>The easiest way to enforce the 2nd rule is to use a Full Binary Tree. A Full Binary Tree follows some simple rules:</p>\n<ol>\n<li>if a node has only one child, that should be its left child</li>\n<li>only the rightmost node on the deepest level can have exactly one child</li>\n<li>leaves can only be on the deepest level</li>\n</ol>\n<p>Let's see these rules with some examples:</p>\n<pre><code class=\"language-plaintext\">  1        2      3        4        5        6         7         8        9       10\n ()       ()     ()       ()       ()       ()        ()        ()       ()       ()\n         /         \\     /  \\     /  \\     /  \\      /  \\      /        /        /  \\\n        ()         ()   ()  ()   ()  ()   ()  ()    ()  ()    ()       ()       ()  ()\n                                /          \\       /  \\      /  \\     /        /  \\\n                               ()          ()     ()  ()    ()  ()   ()       ()  ()\n                                                                             /\n                                                                            ()</code></pre>\n<p>The trees 1, 2, 4, 5 and 7 follow the rules.</p>\n<p>Tree 3 and 6 violate the 1st rule, 8 and 9 the 2nd rule, and 10 violate the 3rd rule.</p>\n<p>In this tutorial, <strong>we'll focus on Min-Heap with a Binary Tree</strong> implementation.</p>\n<h3  id=\"bd-heap-insert\" data-id=\"heap-insert\">2.2. Inserting Elements</h3>\n<div class=\"bd-anchor\" id=\"heap-insert\"></div>\n<p>We should implement all operations in a way, that keeps the Heap invariants. This way, we can <strong>build the Heap with repeated insertions</strong>, so we'll focus on the single insert operation.</p>\n<p>We can insert an element with the following steps:</p>\n<ol>\n<li>create a new leaf which is the rightmost available slot on the deepest level and store the item in that node</li>\n<li>if the element is less than it's parent, we swap them</li>\n<li>continue with step 2, until the element is less than it's parent or it becomes the new root</li>\n</ol>\n<p>Note, that step 2 won't violate the Heap rule, because if we replace a node's value with a less one, it still will be less than it's children.</p>\n<p>Let's see an example! We want to insert 4 into this Heap:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     6\n    / \\\n   5   7</code></pre>\n<p>The first step is to create a new leaf which stores 4:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     6\n    / \\   /\n   5   7 4</code></pre>\n<p>Since 4 is less than it's parent, 6, we swap them:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     4\n    / \\   /\n   5   7 6</code></pre>\n<p>Now we check whether 4 is less than it's parent or not. Since its parent is 2, we stop. The Heap is still valid, and we inserted number 4.</p>\n<p>Let's insert 1:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     4\n    / \\   / \\\n   5   7 6   1</code></pre>\n<p>We have to swap 1 and 4:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     1\n    / \\   / \\\n   5   7 6   4</code></pre>\n<p>Now we should swap 1 and 2:</p>\n<pre><code class=\"language-plaintext\">        1\n       / \\\n      /   \\\n     3     2\n    / \\   / \\\n   5   7 6   4</code></pre>\n<p>Since 1 is the new root, we stop.</p>\n<h2  id=\"bd-heap-implementation\" data-id=\"heap-implementation\">3. Heap Implementation in Java</h2>\n<div class=\"bd-anchor\" id=\"heap-implementation\"></div>\n<p>Since we use a <strong>Full Binary Tree, we can implement it with an array</strong>: an element in the array will be a node in the tree. We mark every node with the array indices from left-to-right, from top-to-bottom the following way:</p>\n<pre><code class=\"language-plaintext\">        0\n       / \\\n      /   \\\n     1     2\n    / \\   /\n   3   4 5</code></pre>\n<p>The only thing we need is to keep track of how many elements we store in the tree. This way the index of the next element we want to insert will be the size of the array.</p>\n<p>Using this indexing, we can calculate the index of the parent and child nodes:</p>\n<ul>\n<li>parent: <em>(index &#8211; 1) / 2</em></li>\n<li>left child: <em>2 * index + 1</em></li>\n<li>right child: <em>2 * index + 2</em></li>\n</ul>\n<p>Since we don't want to bother with array reallocating, we'll simplify the implementation even more and use an <em>ArrayList</em>.</p>\n<p>A basic Binary Tree implementation looks like this:</p>\n<pre><code class=\"language-java\">class BinaryTree&lt;E&gt; {\n\n    List&lt;E&gt; elements = new ArrayList&lt;&gt;();\n\n    void add(E e) {\n        elements.add(e);\n    }\n\n    boolean isEmpty() {\n        return elements.isEmpty();\n    }\n\n    E elementAt(int index) {\n        return elements.get(index);\n    }\n\n    int parentIndex(int index) {\n        return (index - 1) / 2;\n    }\n\n    int leftChildIndex(int index) {\n        return 2 * index + 1;\n    }\n\n    int rightChildIndex(int index) {\n        return 2 * index + 2;\n    }\n\n}</code></pre>\n<p>The code above only adds the new element to the end of the tree. Therefore, we need to traverse the new element up if necessary. We can do it with the following code:</p>\n<pre><code class=\"language-java\">class Heap&lt;E extends Comparable&lt;E&gt;&gt; {\n\n    // ...\n\n    void add(E e) {\n        elements.add(e);\n        int elementIndex = elements.size() - 1;\n        while (!isRoot(elementIndex) && !isCorrectChild(elementIndex)) {\n            int parentIndex = parentIndex(elementIndex);\n            swap(elementIndex, parentIndex);\n            elementIndex = parentIndex;\n        }\n    }\n\n    boolean isRoot(int index) {\n        return index == 0;\n    }\n\n    boolean isCorrectChild(int index) {\n        return isCorrect(parentIndex(index), index);\n    }\n\n    boolean isCorrect(int parentIndex, int childIndex) {\n        if (!isValidIndex(parentIndex) || !isValidIndex(childIndex)) {\n            return true;\n        }\n\n        return elementAt(parentIndex).compareTo(elementAt(childIndex)) &lt; 0;\n    }\n\n    boolean isValidIndex(int index) {\n        return index &lt; elements.size();\n    }\n\n    void swap(int index1, int index2) {\n        E element1 = elementAt(index1);\n        E element2 = elementAt(index2);\n        elements.set(index1, element2);\n        elements.set(index2, element1);\n    }\n    \n    // ...\n\n}</code></pre>\n<p>Note, that since we need to compare the elements, they need to implement <em>java.util.Comparable</em>.</p>\n<h2  id=\"bd-heap-sort\" data-id=\"heap-sort\">4. Heap Sort</h2>\n<div class=\"bd-anchor\" id=\"heap-sort\"></div>\n<p>Since the root of the Heap always contains the smallest element, <strong>the idea behind Heap Sort is pretty simple: remove the root node until the Heap becomes empty</strong>.</p>\n<p>The only thing we need is a remove operation, which keeps the Heap in a consistent state. We must ensure that we don't violate the structure of the Binary Tree or the Heap property.</p>\n<p><strong>To keep the structure, we can't delete any element, except the rightmost leaf.</strong> So the idea is to remove the element from the root node and store the rightmost leaf in the root node.</p>\n<p>But this operation will most certainly violate the Heap property. So <strong>if the new root is greater than any of its child nodes, we swap it with its least child node</strong>. Since the least child node is less than all other child nodes, it doesn't violate the Heap property.</p>\n<p>We keep swapping until the element becomes a leaf, or it's less than all of its children.</p>\n<p>Let's delete the root from this tree:</p>\n<pre><code class=\"language-plaintext\">        1\n       / \\\n      /   \\\n     3     2\n    / \\   / \\\n   5   7 6   4</code></pre>\n<p>First, we place the last leaf in the root:</p>\n<pre><code class=\"language-plaintext\">        4\n       / \\\n      /   \\\n     3     2\n    / \\   /\n   5   7 6</code></pre>\n<p>Then, since it's greater than both of its children, we swap it with its least child, which is 2:</p>\n<pre><code class=\"language-plaintext\">        2\n       / \\\n      /   \\\n     3     4\n    / \\   /\n   5   7 6</code></pre>\n<p>4 is less than 6, so we stop.</p>\n<h2  id=\"bd-heap-sort-implementation\" data-id=\"heap-sort-implementation\">5. Heap Sort Implementation in Java</h2>\n<div class=\"bd-anchor\" id=\"heap-sort-implementation\"></div>\n<p>With all we have, removing the root (popping) looks like this:</p>\n<pre><code class=\"language-java\">class Heap&lt;E extends Comparable&lt;E&gt;&gt; {\n\n    // ...\n\n    E pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(&quot;You cannot pop from an empty heap&quot;);\n        }\n\n        E result = elementAt(0);\n\n        int lasElementIndex = elements.size() - 1;\n        swap(0, lasElementIndex);\n        elements.remove(lasElementIndex);\n\n        int elementIndex = 0;\n        while (!isLeaf(elementIndex) && !isCorrectParent(elementIndex)) {\n            int smallerChildIndex = smallerChildIndex(elementIndex);\n            swap(elementIndex, smallerChildIndex);\n            elementIndex = smallerChildIndex;\n        }\n\n        return result;\n    }\n    \n    boolean isLeaf(int index) {\n        return !isValidIndex(leftChildIndex(index));\n    }\n\n    boolean isCorrectParent(int index) {\n        return isCorrect(index, leftChildIndex(index)) && isCorrect(index, rightChildIndex(index));\n    }\n    \n    int smallerChildIndex(int index) {\n        int leftChildIndex = leftChildIndex(index);\n        int rightChildIndex = rightChildIndex(index);\n        \n        if (!isValidIndex(rightChildIndex)) {\n            return leftChildIndex;\n        }\n\n        if (elementAt(leftChildIndex).compareTo(elementAt(rightChildIndex)) &lt; 0) {\n            return leftChildIndex;\n        }\n\n        return rightChildIndex;\n    }\n    \n    // ...\n\n}</code></pre>\n<p>Like we said before, sorting is just creating a Heap, and removing the root repeatedly:</p>\n<pre><code class=\"language-java\">class Heap&lt;E extends Comparable&lt;E&gt;&gt; {\n\n    // ...\n\n    static &lt;E extends Comparable&lt;E&gt;&gt; List&lt;E&gt; sort(Iterable&lt;E&gt; elements) {\n        Heap&lt;E&gt; heap = of(elements);\n\n        List&lt;E&gt; result = new ArrayList&lt;&gt;();\n\n        while (!heap.isEmpty()) {\n            result.add(heap.pop());\n        }\n\n        return result;\n    }\n    \n    static &lt;E extends Comparable&lt;E&gt;&gt; Heap&lt;E&gt; of(Iterable&lt;E&gt; elements) {\n        Heap&lt;E&gt; result = new Heap&lt;&gt;();\n        for (E element : elements) {\n            result.add(element);\n        }\n        return result;\n    }\n    \n    // ...\n\n}</code></pre>\n<p>We can verify it's working with the following test:</p>\n<pre><code class=\"language-java\">@Test\nvoid givenNotEmptyIterable_whenSortCalled_thenItShouldReturnElementsInSortedList() {\n    // given\n    List&lt;Integer&gt; elements = Arrays.asList(3, 5, 1, 4, 2);\n    \n    // when\n    List&lt;Integer&gt; sortedElements = Heap.sort(elements);\n    \n    // then\n    assertThat(sortedElements).isEqualTo(Arrays.asList(1, 2, 3, 4, 5));\n}</code></pre>\n<p>Note, that <strong>we could provide an implementation, which sorts in-place</strong>, which means we provide the result in the same array we got the elements. Additionally, this way we don't need any intermediate memory allocation. However, that implementation would be a bit harder to understand.</p>\n<h2  id=\"bd-time-complexity\" data-id=\"time-complexity\">6. Time Complexity</h2>\n<div class=\"bd-anchor\" id=\"time-complexity\"></div>\n<p>Heap sort consists of <strong>two key steps</strong>, <strong>inserting</strong> an element and <strong>removing</strong> the root node. Both steps have the complexity <em>O(log n)</em>.</p>\n<p><strong>Since we repeat both steps n times, the overall sorting complexity is <em>O(n log n)</em>.</strong></p>\n<p>Note, that we didn't mention the cost of array reallocation, but since it's <em>O(n)</em>, it doesn't affect the overall complexity. Also, as we mentioned before, it's possible to implement an in-place sorting, which means no array reallocation is necessary.</p>\n<p>Also worth mentioning, that 50% of the elements are leaves, and 75% of elements are at the two bottommost levels. Therefore, most insert operations won't take more, than two steps.</p>\n<p><strong>Note, that on real-world data, Quicksort is usually more performant than Heap Sort. The silver lining is that Heap Sort always has a worst-case <em>O(n log n)</em> time complexity.</strong></p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">7. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this tutorial, we saw an implementation of Binary Heap and Heap Sort.</p>\n<p><strong>Even though it's time complexity is <em>O(n log n)</em>, in most cases, it isn't the best algorithm on real-world data.</strong></p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/algorithms-modules/algorithms-sorting\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn how to implement a Binary Heap and Heap Sort in Java.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14849,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [116, 8],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/42525" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=42525"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/42525/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14849"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=42525" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=42525"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=42525"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 39943,
    "date": "2018-08-30T07:59:02",
    "date_gmt": "2018-08-30T05:59:02",
    "guid": { "rendered": "/?p=39943" },
    "modified": "2022-09-05T15:49:20",
    "modified_gmt": "2022-09-05T13:49:20",
    "slug": "use-criteria-queries-in-a-spring-data-application",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-data-criteria-queries",
    "title": {
      "rendered": "Use Criteria Queries in a Spring Data Application"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Spring Data JPA provides many ways to deal with entities, including <a href=\"/the-persistence-layer-with-spring-data-jpa\">query methods</a> and custom <a href=\"/spring-data-jpa-query\">JPQL queries</a>. But sometimes, we need a more programmatic approach, such as <a href=\"/hibernate-criteria-queries\">Criteria API</a> or <a href=\"/querydsl-with-jpa-tutorial\">QueryDSL</a>.</p>\n<p><strong>Criteria API offers a programmatic way to create typed queries</strong>, which helps us avoid syntax errors. Furthermore, when we use it with Metamodel API, it makes compile-time-checks to confirm if we used the correct field names and types.</p>\n<p>However, it has its downsides; we have to write verbose logic bloated with boilerplate code.</p>\n<p><strong>In this tutorial, we'll learn how to implement our custom DAO logic using criteria queries. We'll also illustrate how Spring helps to reduce boilerplate code.\u00a0</strong></p>\n<h2  id=\"bd-sample-code\" data-id=\"sample-code\">2. Sample Application</h2>\n<div class=\"bd-anchor\" id=\"sample-code\"></div>\n<p>For the sake of simplicity in the examples, we'll implement the same query in multiple ways: finding books by the name of the author and the title containing a <em>String</em>.</p>\n<p>Here's the <em>Book</em> entity:</p>\n<pre><code class=\"language-java\">@Entity\nclass Book {\n\n    @Id\n    Long id;\n    String title;\n    String author;\n\n    // getters and setters\n\n}</code></pre>\n<p>Because we want to keep things simple, we won't use Metamodel API in this tutorial.</p>\n<h2  id=\"bd-repository\" data-id=\"repository\">3. <em>@Repository</em> Class</h2>\n<div class=\"bd-anchor\" id=\"repository\"></div>\n<p>As we know, in the Spring component model, <strong>we should place our data access logic in <em>@Repository</em> beans</strong>. Of course, this logic can use any implementation, like Criteria API.</p>\n<p>To do this, we only need an <em>EntityManager</em> instance, which we can autowire:</p>\n<pre><code class=\"language-java\">@Repository\nclass BookDao {\n\n    EntityManager em;\n\n    // constructor\n\n    List&lt;Book&gt; findBooksByAuthorNameAndTitle(String authorName, String title) {\n        CriteriaBuilder cb = em.getCriteriaBuilder();\n        CriteriaQuery&lt;Book&gt; cq = cb.createQuery(Book.class);\n\n        Root&lt;Book&gt; book = cq.from(Book.class);\n        Predicate authorNamePredicate = cb.equal(book.get(&quot;author&quot;), authorName);\n        Predicate titlePredicate = cb.like(book.get(&quot;title&quot;), &quot;%&quot; + title + &quot;%&quot;);\n        cq.where(authorNamePredicate, titlePredicate);\n\n        TypedQuery&lt;Book&gt; query = em.createQuery(cq);\n        return query.getResultList();\n    }\n\n}</code></pre>\n<p>The code above follows a standard Criteria API workflow:</p>\n<ul>\n<li>First, we get a <em>CriteriaBuilder</em> reference, which we can use to create different parts of the query.</li>\n<li>Using the <em>CriteriaBuilder</em>, we create a <em>CriteriaQuery&lt;Book&gt;</em>, which describes what we want to do in the query. It also declares the type of a row in the result.</li>\n<li>With\u00a0<em>CriteriaQuery&lt;Book&gt;,</em> we declare the starting point of the query (<em>Book</em> entity), and store it in the <em>book</em> variable for later use.</li>\n<li>Next, with <em>CriteriaBuilder,</em>\u00a0we create predicates against our <em>Book</em> entity. Note that these predicates don't have any effect yet.</li>\n<li>We apply both predicates to our <em>CriteriaQuery.</em> <em>CriteriaQuery.where(Predicate&#8230;)</em> combines its arguments in a logical <em>and</em>. This is the point when we tie these predicates to the query.</li>\n<li>After that, we create a <em>TypedQuery&lt;Book&gt;</em> instance from our <em>CriteriaQuery.</em></li>\n<li>Finally, we return all matching <em>Book</em> entities.</li>\n</ul>\n<p>Note that since we marked the DAO class with <em>@Repository</em>, <strong>Spring enables exception translation</strong> for this class.</p>\n<h2  id=\"bd-repository-custom\" data-id=\"repository-custom\">4. Extending Repository With Custom Methods</h2>\n<div class=\"bd-anchor\" id=\"repository-custom\"></div>\n<p>Having <a href=\"/the-persistence-layer-with-spring-data-jpa#customquery\">automatic custom queries</a> is a powerful Spring Data feature. However, sometimes we need more sophisticated logic, which we can't create with automatic query methods.</p>\n<p>We can implement these queries in separate DAO classes (like in the previous section).</p>\n<p>Or, <strong>if we want a <em>@Repository</em> interface to have a method with a custom implementation, we can use <a href=\"/spring-data-composable-repositories\">composable repositories</a></strong>.</p>\n<p>The custom interface looks like this:</p>\n<pre><code class=\"language-java\">interface BookRepositoryCustom {\n    List&lt;Book&gt; findBooksByAuthorNameAndTitle(String authorName, String title);\n}</code></pre>\n<p>And here's the <em>@Repository</em> interface:</p>\n<pre><code class=\"language-java\">interface BookRepository extends JpaRepository&lt;Book, Long&gt;, BookRepositoryCustom {}</code></pre>\n<p>We also have to modify our previous DAO class to implement <em>BookRepositoryCustom,</em> and rename it to <em>BookRepositoryImpl</em>:</p>\n<pre><code class=\"language-java\">@Repository\nclass BookRepositoryImpl implements BookRepositoryCustom {\n\n    EntityManager em;\n\n    // constructor\n\n    @Override\n    List&lt;Book&gt; findBooksByAuthorNameAndTitle(String authorName, String title) {\n        // implementation\n    }\n\n}</code></pre>\n<p>When we declare <em>BookRepository</em> as a dependency, Spring finds <em>BookRepositoryImpl</em> and uses it when we invoke the custom methods.</p>\n<p>Let's say we want to select which predicates to use in our query. For example, when we don't want to find the books by author and title, we only need the author to match.</p>\n<p>There are multiple ways to do this, like applying a predicate only if the passed argument isn't <em>null</em>:</p>\n<pre><code class=\"language-java\">@Override\nList&lt;Book&gt; findBooksByAuthorNameAndTitle(String authorName, String title) {\n    CriteriaBuilder cb = em.getCriteriaBuilder();\n    CriteriaQuery&lt;Book&gt; cq = cb.createQuery(Book.class);\n\n    Root&lt;Book&gt; book = cq.from(Book.class);\n    List&lt;Predicate&gt; predicates = new ArrayList&lt;&gt;();\n    \n    if (authorName != null) {\n        predicates.add(cb.equal(book.get(&quot;author&quot;), authorName));\n    }\n    if (title != null) {\n        predicates.add(cb.like(book.get(&quot;title&quot;), &quot;%&quot; + title + &quot;%&quot;));\n    }\n    cq.where(predicates.toArray(new Predicate[0]));\n\n    return em.createQuery(cq).getResultList();\n}</code></pre>\n<p>However, this approach <strong>makes the code hard to maintain</strong>, especially if we have many predicates and want to make them optional.</p>\n<p>It would be a practical solution to externalize these predicates. With JPA specifications, we can do exactly that, and much more.</p>\n<h2  id=\"bd-specifications\" data-id=\"specifications\">5. Using JPA Specifications</h2>\n<div class=\"bd-anchor\" id=\"specifications\"></div>\n<p>Spring Data introduced the <em>org.springframework.data.jpa.domain.Specification</em> interface to encapsulate a single predicate:</p>\n<pre><code class=\"language-java\">interface Specification&lt;T&gt; {\n    Predicate toPredicate(Root&lt;T&gt; root, CriteriaQuery query, CriteriaBuilder cb);\n}</code></pre>\n<p>We can provide methods to create <em>Specification</em> instances:</p>\n<pre><code class=\"language-java\">static Specification&lt;Book&gt; hasAuthor(String author) {\n    return (book, cq, cb) -&gt; cb.equal(book.get(&quot;author&quot;), author);\n}\n\nstatic Specification&lt;Book&gt; titleContains(String title) {\n    return (book, cq, cb) -&gt; cb.like(book.get(&quot;title&quot;), &quot;%&quot; + title + &quot;%&quot;);\n}\n</code></pre>\n<p>To use them, we need our repository to extend <em>org.springframework.data.jpa.repository.JpaSpecificationExecutor&lt;T&gt;</em>:</p>\n<pre><code class=\"language-java\">interface BookRepository extends JpaRepository&lt;Book, Long&gt;, JpaSpecificationExecutor&lt;Book&gt; {}</code></pre>\n<p>This interface <strong>declares handy methods to work with specifications</strong>. For example, now we can find all <em>Book</em> instances with the specified author with this one-liner:</p>\n<pre><code class=\"language-java\">bookRepository.findAll(hasAuthor(author));</code></pre>\n<p>Unfortunately, we don't get any methods that we can pass multiple <em>Specification</em> arguments to. Rather, we get utility methods in the <em>org.springframework.data.jpa.domain.Specification</em>\u00a0interface.</p>\n<p>For example, we can combine two <em>Specification</em> instances with a logical <em>and</em>:</p>\n<pre><code class=\"language-java\">bookRepository.findAll(where(hasAuthor(author)).and(titleContains(title)));</code></pre>\n<p>In the example above, <em>where()</em> is a static method of the <em>Specification</em>\u00a0class.</p>\n<p><strong>This way we can make our queries modular. Besides, we didn't have to write the Criteria API boilerplate because Spring provided it for us.</strong></p>\n<p>Note that it doesn't mean we won't have to write criteria boilerplate anymore; this approach is only capable of handling the workflow we saw, namely selecting entities that satisfy the provided condition(s).</p>\n<p><strong>A query can have many structures it doesn't support, including grouping, returning a different class than we're selecting from, or subqueries.</strong></p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we discusssed three ways to use criteria queries in our Spring application:</p>\n<ul>\n<li>creating a DAO class is the most straightforward and flexible way.</li>\n<li>extending a <em>@Repository</em> interface to seamless integration with automatic queries</li>\n<li>using predicates in <em>Specification</em> instances to make the simple cases cleaner and less verbose</li>\n</ul>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-query-2\" target=\"_blank\" rel=\"noopener noreferrer\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A quick tutorial to using JPA Criteria Queries using Spring Data JPA.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49881,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [202],
    "tags": [375, 34, 575],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/39943" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=39943"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/39943/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/49881"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=39943" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=39943"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=39943"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 38605,
    "date": "2018-08-07T09:40:17",
    "date_gmt": "2018-08-07T07:40:17",
    "guid": { "rendered": "/?p=38605" },
    "modified": "2019-07-19T16:11:32",
    "modified_gmt": "2019-07-19T14:11:32",
    "slug": "remove-all-occurrences-of-a-specific-value-from-a-list",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/java-remove-value-from-list",
    "title": {
      "rendered": "Remove All Occurrences of a Specific Value from a List"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>In Java, it's straightforward to remove a specific value from a <em>List</em> using <em>List.remove()</em>. However, <strong>efficiently removing all occurrences of a value</strong> is much harder.</p>\n<p>In this tutorial, we'll see multiple solutions to this problem, describing the pros and cons.</p>\n<p>For the sake of readability, we use a custom <em>list(int&#8230;)</em> method in the tests, which returns an <em>ArrayList</em> containing the elements we passed.</p>\n<h2  id=\"bd-while-loop\" data-id=\"while-loop\">2. Using a\u00a0<em>while</em> Loop</h2>\n<div class=\"bd-anchor\" id=\"while-loop\"></div>\n<p>Since we know how to<strong> remove a single element, doing it repeatedly in a loop</strong> looks simple enough:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    while (list.contains(element)) {\n        list.remove(element);\n    }\n}</code></pre>\n<p>However, it doesn't work as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 2, 3);\nint valueToRemove = 1;\n\n// when\nassertThatThrownBy(() -&gt; removeAll(list, valueToRemove))\n  .isInstanceOf(IndexOutOfBoundsException.class);</code></pre>\n<p>The problem is in the 3rd line: we call <strong><em>List.remove(int),</em> which treats its argument as the index, not the value we want to remove.</strong></p>\n<p>In the test above we always call <em>list.remove(1)</em>, but the element's index we want to remove is <em>0.</em> Calling <em>List.remove()</em> shifts all elements after the removed one to smaller indices.</p>\n<p>In this scenario, it means that we delete all elements, except the first.</p>\n<p>When only the first remains, the index <em>1</em> will be illegal. Hence we get an <em>Exception</em>.</p>\n<p>Note, that we face this problem only if we call <em>List.remove()</em> with a primitive <em>byte</em>, <em>short, char</em> or <em>int</em> argument, since the first thing the compiler does when it tries to find the matching overloaded method, is widening.</p>\n<p>We can correct it by passing the value as <em>Integer:</em></p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, Integer element) {\n    while (list.contains(element)) {\n        list.remove(element);\n    }\n}</code></pre>\n<p>Now the code works as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>Since <em>List.contains()</em> and <em>List.remove()</em> both have to find the first occurrence of the element, this code causes unnecessary element traversal.</p>\n<p>We can do better if we store the index of the first occurrence:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, Integer element) {\n    int index;\n    while ((index = list.indexOf(element)) &gt;= 0) {\n        list.remove(index);\n    }\n}</code></pre>\n<p>We can verify that it works:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>While these solutions produce short and clean code, <strong>they still have poor performance</strong>: because we don't keep track of the progress, <em>List.remove()</em> has to find the first occurrence of the provided value to delete it.</p>\n<p>Also, when we use an <em>ArrayList</em>, element shifting can cause many reference copying, even reallocating the backing array several times.</p>\n<h2  id=\"bd-removing-until-changes\" data-id=\"removing-until-changes\">3. Removing Until the <em>List</em> Changes</h2>\n<div class=\"bd-anchor\" id=\"removing-until-changes\"></div>\n<p><strong><em>List.remove(E element)</em></strong> has a feature we didn't mention yet: it <strong>returns a <em>boolean</em> value, which is <em>true</em> if the <em>List</em> changed because of the operation, therefore it contained the element</strong>.</p>\n<p>Note, that <em>List.remove(int index)</em> returns void, because if the provided index is valid, the <em>List</em> always removes it. Otherwise, it throws <em>IndexOutOfBoundsException</em>.</p>\n<p>With this, we can perform removals until the <em>List</em> changes:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    while (list.remove(element));\n}</code></pre>\n<p>It works as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>Despite being short, this implementation suffers from the same problems we described in the previous section.</p>\n<h2  id=\"bd-for-loop\" data-id=\"for-loop\">3. Using a\u00a0<em>for</em> Loop</h2>\n<div class=\"bd-anchor\" id=\"for-loop\"></div>\n<p>We can keep track of our progress by traversing through the elements with a <em>for</em> loop and remove the current one if it matches:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    for (int i = 0; i &lt; list.size(); i++) {\n        if (Objects.equals(element, list.get(i))) {\n            list.remove(i);\n        }\n    }\n}</code></pre>\n<p>It works as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>However, if we try it with a different input, it provides an incorrect output:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(1, 2, 3));</code></pre>\n<p>Let's analyze how the code works, step-by-step:</p>\n<ul>\n<li><em>i = 0</em>\n<ul>\n<li><em>element</em> and <em>list.get(i)</em> are both equal to <em>1</em> at line 3, so Java enters the body of the <em>if</em> statement,</li>\n<li>we remove the element at index <em>0</em>,</li>\n<li>so <em>list</em> now contains <em>1</em>, <em>2</em> and <em>3</em></li>\n</ul>\n</li>\n<li><em>i = 1</em>\n<ul>\n<li><em>list.get(i)</em> returns <em>2</em> because <strong>when we remove an element from a <em>List</em>, it shifts all proceeding elements to smaller indices</strong></li>\n</ul>\n</li>\n</ul>\n<p>So we face this problem when <strong>we have two adjacent values, which we want to remove</strong>. To solve this, we should maintain the loop variable.</p>\n<p>Decreasing it when we remove the element:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    for (int i = 0; i &lt; list.size(); i++) {\n        if (Objects.equals(element, list.get(i))) {\n            list.remove(i);\n            i--;\n        }\n    }\n}</code></pre>\n<p>Increasing it only when we don't remove the element:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    for (int i = 0; i &lt; list.size();) {\n        if (Objects.equals(element, list.get(i))) {\n            list.remove(i);\n        } else {\n            i++;\n        }\n    }\n}</code></pre>\n<p>Note, that in the latter, we removed the statement <em>i++</em> at line 2.</p>\n<p>Both solutions work as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>This implementation seems right for the first sight. However, it still has <strong>serious performance problems</strong>:</p>\n<ul>\n<li>removing an element from an <em>ArrayList</em>, shifts all items after it</li>\n<li>accessing elements by index in a <em>LinkedList</em> means traversing through the elements one-by-one until we find the index</li>\n</ul>\n<h2  id=\"bd-for-each-loop\" data-id=\"for-each-loop\">4. Using a\u00a0<em>for-each</em> Loop</h2>\n<div class=\"bd-anchor\" id=\"for-each-loop\"></div>\n<p>Since Java 5 we can use the <em>for-each</em> loop to iterate through a <em>List</em>. Let's use it to remove elements:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    for (Integer number : list) {\n        if (Objects.equals(number, element)) {\n            list.remove(number);\n        }\n    }\n}</code></pre>\n<p>Note, that we use <em>Integer</em> as the loop variable's type. Therefore we won't get a <em>NullPointerException</em>.</p>\n<p>Also, this way we invoke <em>List.remove(E element)</em>, which expects the value we want to remove, not the index.</p>\n<p>As clean as it looks, unfortunately, it doesn't work:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nassertThatThrownBy(() -&gt; removeWithForEachLoop(list, valueToRemove))\n  .isInstanceOf(ConcurrentModificationException.class);</code></pre>\n<p>The <em>for-each</em> loop uses <em>Iterator</em> to traverse through the elements. However, <strong>when we modify the <em>List</em>, the <em>Iterator</em> gets into an inconsistent state. Hence it throws <em>ConcurrentModificationException</em></strong>.</p>\n<p>The lesson is: we shouldn't modify a <em>List</em>, while we're accessing its elements in a <em>for-each</em> loop.</p>\n<h2  id=\"bd-iterator\" data-id=\"iterator\">5. Using an\u00a0<em>Iterator</em></h2>\n<div class=\"bd-anchor\" id=\"iterator\"></div>\n<p>We can use the <em>Iterator</em> directly to traverse and modify the <em>List</em> with it:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    for (Iterator&lt;Integer&gt; i = list.iterator(); i.hasNext();) {\n        Integer number = i.next();\n        if (Objects.equals(number, element)) {\n            i.remove();\n        }\n    }\n}</code></pre>\n<p>This way, <strong>the <em>Iterator</em> can track the state of the <em>List</em></strong> (because it makes the modification). As a result, the code above works as expected:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>Since every <em>List</em> class can provide their own <em>Iterator</em> implementation, we can safely assume, that <strong>it implements element traversing and removal the most efficient way possible. </strong></p>\n<p><strong>However, using <em>ArrayList</em> still means lots of element shifting</strong> (and maybe array reallocating). Also, the code above is slightly harder to read, because it differs from the standard <em>for</em> loop, that most developers are familiar with.</p>\n<h2  id=\"bd-collecting\" data-id=\"collecting\">6. Collecting</h2>\n<div class=\"bd-anchor\" id=\"collecting\"></div>\n<p>Until this, we modified the original <em>List</em> object by removing the items we didn't need. Rather, we can <strong>create a new <em>List</em> and collect the items we want to keep</strong>:</p>\n<pre><code class=\"language-java\">List&lt;Integer&gt; removeAll(List&lt;Integer&gt; list, int element) {\n    List&lt;Integer&gt; remainingElements = new ArrayList&lt;&gt;();\n    for (Integer number : list) {\n        if (!Objects.equals(number, element)) {\n            remainingElements.add(number);\n        }\n    }\n    return remainingElements;\n}</code></pre>\n<p>Since we provide the result in a new <em>List</em> object, we have to return it from the method. Therefore we need to use the method in another way:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nList&lt;Integer&gt; result = removeAll(list, valueToRemove);\n\n// then\nassertThat(result).isEqualTo(list(2, 3));</code></pre>\n<p>Note, that now we can use the <em>for-each</em> loop since we don't modify the <em>List</em> we're currently iterating through.</p>\n<p>Because there aren't any removals, there's no need to shift the elements. Therefore this implementation performs well when we use an <em>ArrayList.</em></p>\n<p>This implementation behaves differently in some ways than the earlier ones:</p>\n<ul>\n<li>it doesn't modify the original <em>List</em> but <strong>returns a new</strong> one</li>\n<li><strong>the method decides what the returned <em>List</em>&#8216;s implementation is</strong>, it may be different than the original</li>\n</ul>\n<p>Also, we can modify our implementation to <strong>get the old behavior</strong>; we clear the original <em>List</em> and add the collected elements to it:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    List&lt;Integer&gt; remainingElements = new ArrayList&lt;&gt;();\n    for (Integer number : list) {\n        if (!Objects.equals(number, element)) {\n            remainingElements.add(number);\n        }\n    }\n\n    list.clear();\n    list.addAll(remainingElements);\n}</code></pre>\n<p>It works the same way the ones before:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>Since we don't modify the <em>List</em> continually, we don't have to access elements by position or shift them. Also, there're only two possible array reallocations: when we call <em>List.clear()</em> and <em>List.addAll()</em>.</p>\n<h2  id=\"bd-stream-filter\" data-id=\"stream-filter\">7. Using the Stream API</h2>\n<div class=\"bd-anchor\" id=\"stream-filter\"></div>\n<p>Java 8 introduced lambda expressions and stream API. With these powerful features, we can solve our problem with a very clean code:</p>\n<pre><code class=\"language-java\">List&lt;Integer&gt; removeAll(List&lt;Integer&gt; list, int element) {\n    return list.stream()\n      .filter(e -&gt; !Objects.equals(e, element))\n      .collect(Collectors.toList());\n}</code></pre>\n<p>This solution <strong>works the same way, like when we were collecting the remaining elements. </strong></p>\n<p><strong>As a result, it has the same characteristics</strong>, and we should use it to return the result:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nList&lt;Integer&gt; result = removeAll(list, valueToRemove);\n\n// then\nassertThat(result).isEqualTo(list(2, 3));</code></pre>\n<p>Note, that we can convert it to work like the other solutions with the same approach we did with the original &#8216;collecting' implementation.</p>\n<h2  id=\"bd-remove-if\" data-id=\"remove-if\">8. Using <em>removeIf</em></h2>\n<div class=\"bd-anchor\" id=\"remove-if\"></div>\n<p>With lambdas and functional interfaces, Java 8 introduced some API extensions, too. For example, the <strong><em>List.removeIf()</em> method, which implements what we saw in the last section</strong>.</p>\n<p>It expects a <em>Predicate</em>, which should return <strong><em>true</em> when we want to remove</strong> the element, in contrast to the previous example, where we had to return <em>true</em> when we wanted to keep the element:</p>\n<pre><code class=\"language-java\">void removeAll(List&lt;Integer&gt; list, int element) {\n    list.removeIf(n -&gt; Objects.equals(n, element));\n}</code></pre>\n<p>It works like the other solutions above:</p>\n<pre><code class=\"language-java\">// given\nList&lt;Integer&gt; list = list(1, 1, 2, 3);\nint valueToRemove = 1;\n\n// when\nremoveAll(list, valueToRemove);\n\n// then\nassertThat(list).isEqualTo(list(2, 3));</code></pre>\n<p>Due to the fact, that the <em>List</em> itself implements this method, we can safely assume, that it has the best performance available. On top of that, this solution provides the cleanest code of all.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">9. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw many ways to solve a simple problem, including incorrect ones. We analyzed them to find the best solution for every scenario.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/core-java-modules/core-java-collections-list\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this tutorial, we\u2019ll see multiple solutions to efficiently removing all occurrences of a value, describing the pros and cons.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 22633,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [8, 278],
    "tags": [271],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/38605" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=38605"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/38605/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/22633"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=38605" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=38605"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=38605"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 36022,
    "date": "2018-07-03T21:50:58",
    "date_gmt": "2018-07-03T19:50:58",
    "guid": { "rendered": "/?p=36022" },
    "modified": "2022-10-23T14:14:25",
    "modified_gmt": "2022-10-23T12:14:25",
    "slug": "using-spring-responseentity-to-manipulate-the-http-response",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-response-entity",
    "title": {
      "rendered": "Using Spring ResponseEntity to Manipulate the HTTP Response"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Using Spring, we usually have many ways to achieve the same goal, including fine-tuning HTTP responses.</p>\n<p>In this short tutorial, we'll see how to set the body, status, and headers of an HTTP response using <em>ResponseEntity</em>.</p>\n\n<h2  id=\"bd-response-entity\" data-id=\"response-entity\">2. <em>ResponseEntity</em></h2>\n<div class=\"bd-anchor\" id=\"response-entity\"></div>\n<p><em>ResponseEntity</em> <strong>represents the whole HTTP response: status code, headers, and body</strong>. As a result, we can use it to fully configure the HTTP response.</p>\n<p>If we want to use it, we have to return it from the endpoint; Spring takes care of the rest.</p>\n<p><em>ResponseEntity</em> is a generic type. Consequently, we can use any type as the response body:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/hello&quot;)\nResponseEntity&lt;String&gt; hello() {\n    return new ResponseEntity&lt;&gt;(&quot;Hello World!&quot;, HttpStatus.OK);\n}</code></pre>\n<p>Since we specify the response status programmatically, we can return with different status codes for different scenarios:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/age&quot;)\nResponseEntity&lt;String&gt; age(\n  @RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) {\n \n    if (isInFuture(yearOfBirth)) {\n        return new ResponseEntity&lt;&gt;(\n          &quot;Year of birth cannot be in the future&quot;, \n          HttpStatus.BAD_REQUEST);\n    }\n\n    return new ResponseEntity&lt;&gt;(\n      &quot;Your age is &quot; + calculateAge(yearOfBirth), \n      HttpStatus.OK);\n}</code></pre>\n<p>Additionally, we can set HTTP headers:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/customHeader&quot;)\nResponseEntity&lt;String&gt; customHeader() {\n    HttpHeaders headers = new HttpHeaders();\n    headers.add(&quot;Custom-Header&quot;, &quot;foo&quot;);\n        \n    return new ResponseEntity&lt;&gt;(\n      &quot;Custom header set&quot;, headers, HttpStatus.OK);\n}</code></pre>\n<p>Furthermore, <em>ResponseEntity</em> <strong>provides two nested builder interfaces</strong>: <em>HeadersBuilder</em> and its subinterface, <em>BodyBuilder</em>. Therefore, we can access their capabilities through the static methods of <em>ResponseEntity</em>.</p>\n<p>The simplest case is a response with a body and HTTP 200 response code:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/hello&quot;)\nResponseEntity&lt;String&gt; hello() {\n    return ResponseEntity.ok(&quot;Hello World!&quot;);\n}</code></pre>\n<p>For the most popular <a href=\"/cs/http-status-codes\">HTTP status codes</a> we get static methods:</p>\n<pre><code class=\"language-java no-repo\">BodyBuilder accepted();\nBodyBuilder badRequest();\nBodyBuilder created(java.net.URI location);\nHeadersBuilder&lt;?&gt; noContent();\nHeadersBuilder&lt;?&gt; notFound();\nBodyBuilder ok();</code></pre>\n<p>In addition, we can use the <em>BodyBuilder status(HttpStatus status)</em> and the <em>BodyBuilder status(int status)</em> methods to set any HTTP status.</p>\n<p>Finally, with <em>ResponseEntity&lt;T&gt; BodyBuilder.body(T body)</em> we can set the HTTP response body:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/age&quot;)\nResponseEntity&lt;String&gt; age(@RequestParam(&quot;yearOfBirth&quot;) int yearOfBirth) {\n    if (isInFuture(yearOfBirth)) {\n        return ResponseEntity.badRequest()\n            .body(&quot;Year of birth cannot be in the future&quot;);\n    }\n\n    return ResponseEntity.status(HttpStatus.OK)\n        .body(&quot;Your age is &quot; + calculateAge(yearOfBirth));\n}</code></pre>\n<p>We can also set custom headers:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/customHeader&quot;)\nResponseEntity&lt;String&gt; customHeader() {\n    return ResponseEntity.ok()\n        .header(&quot;Custom-Header&quot;, &quot;foo&quot;)\n        .body(&quot;Custom header set&quot;);\n}</code></pre>\n<p>Since<em> BodyBuilder.body()</em> returns a <em>ResponseEntity</em> instead of <em>BodyBuilder,</em> it should be the last call.</p>\n<p>Note that with <em>HeaderBuilder</em> we can't set any properties of the response body.</p>\n<p>While returning <em>ResponseEntity&lt;T&gt; </em>object from the controller, we might get an exception or error while processing the request and would like to <strong>return error-related information to the user represented as some other type, let's say E</strong>.</p>\n<p>Spring 3.2\u00a0brings support for a global\u00a0<strong><em>@ExceptionHandler\u00a0</em>with the new\u00a0<em>@ControllerAdvice\u00a0</em>annotation, </strong>which handles these kinds of scenarios. For in-depth details, refer to our existing article <a href=\"/exception-handling-for-rest-with-spring\">here</a>.</p>\n<p><strong>While <em>ResponseEntity</em> is very powerful, we shouldn't overuse it.</strong> In simple cases, there are other options that satisfy our needs and they result in much cleaner code.</p>\n<h2  id=\"bd-alternatives\" data-id=\"alternatives\">3. Alternatives</h2>\n<div class=\"bd-anchor\" id=\"alternatives\"></div>\n<h3  id=\"bd-response-body\" data-id=\"response-body\">3.1. <em>@ResponseBody</em></h3>\n<div class=\"bd-anchor\" id=\"response-body\"></div>\n<p>In classic Spring MVC applications, endpoints usually return rendered HTML pages. Sometimes we only need to return the actual data; for example, when we use the endpoint with AJAX.</p>\n<p>In such cases, we can mark the request handler method with <em>@ResponseBody</em>,\u00a0and <strong>Spring treats the result value of the method as the HTTP response body</strong> itself.</p>\n<p>For more information, <a href=\"/spring-request-response-body\">this article is a good place to start</a>.</p>\n<h3  id=\"bd-response-status\" data-id=\"response-status\">3.2. <em>@ResponseStatus</em></h3>\n<div class=\"bd-anchor\" id=\"response-status\"></div>\n<p>When an endpoint returns successfully, Spring provides an HTTP 200 (OK) response. If the endpoint throws an exception, Spring looks for an exception handler that tells which HTTP status to use.</p>\n<p>We can mark these methods with @ResponseStatus, and therefore, Spring <strong>returns with a custom HTTP status</strong>.</p>\n<p>For more examples, please visit our article about <a href=\"/spring-response-status\">custom status codes</a>.</p>\n<h3  id=\"bd-direct-manipulation\" data-id=\"direct-manipulation\">3.3. Manipulate the Response Directly</h3>\n<div class=\"bd-anchor\" id=\"direct-manipulation\"></div>\n<p>Spring also lets us access the <em>javax.servlet.http.HttpServletResponse</em> object directly; we only have to declare it as a method argument:</p>\n<pre><code class=\"language-java\">@GetMapping(&quot;/manual&quot;)\nvoid manual(HttpServletResponse response) throws IOException {\n    response.setHeader(&quot;Custom-Header&quot;, &quot;foo&quot;);\n    response.setStatus(200);\n    response.getWriter().println(&quot;Hello World!&quot;);\n}</code></pre>\n<p>Since Spring provides abstractions and additional capabilities above the underlying implementation, <strong>we shouldn't manipulate the response this way</strong>.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">4. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we discussed multiple ways to manipulate the HTTP response in Spring, and examined their benefits and drawbacks.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-mvc\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn how to manipulate the HTTP response using the ResponseEntity class.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14856,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [13, 69],
    "tags": [375, 318, 265],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/36022" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=36022"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/36022/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 134264,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/36022/revisions/134264"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14856"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=36022" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=36022"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=36022"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 36019,
    "date": "2018-07-03T21:49:23",
    "date_gmt": "2018-07-03T19:49:23",
    "guid": { "rendered": "/?p=36019" },
    "modified": "2021-12-13T09:53:20",
    "modified_gmt": "2021-12-13T07:53:20",
    "slug": "using-spring-responsestatus-to-set-http-status-code",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-response-status",
    "title": {
      "rendered": "Using Spring @ResponseStatus to Set HTTP Status Code"
    },
    "content": {
      "rendered": "<h2  id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>In Spring MVC, we have many ways to <strong>set the status code of an HTTP response</strong>.</p>\n<p>In this short tutorial, we will see the most straightforward way: using the <em>@ResponseStatus</em> annotation.</p>\n<h2  id=\"bd-controller\" data-id=\"controller\">2. On Controller Methods</h2>\n<div class=\"bd-anchor\" id=\"controller\"></div>\n<p>When an endpoint returns successfully, Spring provides an HTTP 200 (OK) response.</p>\n<p>If we want to specify the <strong>response status of a controller method</strong>, we can mark that method with <em>@ResponseStatus. </em>It has two interchangeable arguments for the desired response status: <em>code,</em> and <em>value.</em> For example, we can <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418\">indicate that the server refuses to brew coffee because it is a teapot</a>:</p>\n<pre><code class=\"language-java\">@ResponseStatus(HttpStatus.I_AM_A_TEAPOT)\nvoid teaPot() {}</code></pre>\n<p>When we want to signal an error, we can provide an error message via the <em>reason</em> argument:</p>\n<pre><code class=\"language-java\">@ResponseStatus(HttpStatus.BAD_REQUEST, reason = &quot;Some parameters are invalid&quot;)\nvoid onIllegalArgumentException(IllegalArgumentException exception) {}</code></pre>\n<p>Note, that when we set <em>reason</em>, Spring calls <em>HttpServletResponse.sendError()</em>. Therefore, it will send an <strong>HTML error page to the client, which makes it a bad fit for REST endpoints</strong>.</p>\n<p>Also note, that Spring only uses <em>@ResponseStatus</em>, when <strong>the marked method completes successfully</strong> (without throwing an <em>Exception</em>).</p>\n<h2  id=\"bd-error-handling\" data-id=\"error-handling\">3. With Error Handlers</h2>\n<div class=\"bd-anchor\" id=\"error-handling\"></div>\n<p>We have three ways to use <em>@ResponseStatus</em> to convert an <em>Exception</em> to an HTTP response status:</p>\n<ul>\n<li>using <em>@ExceptionHandler</em></li>\n<li>using <em>@ControllerAdvice</em></li>\n<li>marking the <em>Exception</em> class</li>\n</ul>\n<p>In order to use the first two solutions, we have to define an error handler method. You can read more about this topic in <a href=\"/exception-handling-for-rest-with-spring\">this article</a>.</p>\n<p>We can use <em>@ResponseStatus</em> with these error handler methods <strong>the same way we did with regular MVC methods</strong> in the previous section.</p>\n<p>When we don't need dynamic error responses, the most straightforward solution is the third one: marking the Exception class with <em>@ResponseStatus:</em></p>\n<pre><code class=\"language-java\">@ResponseStatus(code = HttpStatus.BAD_REQUEST)\nclass CustomException extends RuntimeException {}</code></pre>\n<p>When Spring catches this <em>Exception</em>, it uses the settings we provided in <em>@ResponseStatus</em>.</p>\n<p>Note, that when we mark an <em>Exception</em> class with <em>@ResponseStatus</em>, Spring always calls <em>HttpServletResponse.sendError()</em><em>,</em> whether we set <em>reason</em> or not.</p>\n<p>Also note, that Spring uses the same configuration for subclasses, unless we mark them with <em>@ResponseStatus</em>, too.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">4. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw how we can use <em>@ResponseStatus</em> to set HTTP response code in different scenarios, including error handling.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-web-modules/spring-mvc-basics-5\">over on GitHub</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Have a look at the @ResponseStatus annotation and how to use it to set the response status code.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 22825,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [13, 69],
    "tags": [265],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/36019" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=36019"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/36019/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/22825"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=36019" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=36019"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=36019"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 34804,
    "date": "2018-06-07T08:19:49",
    "date_gmt": "2018-06-07T06:19:49",
    "guid": { "rendered": "http://www.baeldung.com/?p=34804" },
    "modified": "2020-02-19T06:54:12",
    "modified_gmt": "2020-02-19T04:54:12",
    "slug": "spring-core-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-core-annotations",
    "title": { "rendered": "Spring Core Annotations" },
    "content": {
      "rendered": "<div class=\"article-series article-series-list expandable\" data-toggle=\"collapse\" data-target=\"#article-series-links-3664\">\t\t<a class=\"article-series-header\" href=\"javascript:void(0);\"><span class=\"carousel-icon carousel-plus\"></span>This article is part of a series:</a>\t<div id=\"article-series-links-3664\" class=\"article-series-links collapse row\">\t\t<div class=\"article-series-inner\"><div class=\"current-article\">&bull; Spring Core Annotations <span class=\"current-article-label\">(current article)</span></div><a href=\"/spring-mvc-annotations\">&bull; Spring Web Annotations</a><br><a href=\"/spring-boot-annotations\">&bull; Spring Boot Annotations</a><br><a href=\"/spring-scheduling-annotations\">&bull; Spring Scheduling Annotations</a><br><a href=\"/spring-data-annotations\">&bull; Spring Data Annotations</a><br><a href=\"/spring-bean-annotations\">&bull; Spring Bean Annotations</a><br></div><!-- end of article series inner --></div><!-- .article-series-links --></div><!-- end of article series section -->\n<h2  id=\"bd-overview\" data-id=\"overview\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"overview\"></div>\n<p>We can leverage the capabilities of Spring DI engine using the annotations in the <em>org.springframework.beans.factory.annotation\u00a0</em>and\u00a0<em>org.springframework.context.annotation</em> packages.</p>\n<p>We often call these &#8220;Spring core annotations&#8221; and we'll review them in this tutorial.</p>\n<h2  id=\"bd-wiring\" data-id=\"wiring\">2. DI-Related Annotations</h2>\n<div class=\"bd-anchor\" id=\"wiring\"></div>\n<h3  id=\"bd-autowired\" data-id=\"autowired\">2.1. <em>@Autowired</em></h3>\n<div class=\"bd-anchor\" id=\"autowired\"></div>\n<p>We can use the <em>@Autowired</em> to <strong>mark a dependency which Spring is going to resolve and inject</strong>. We can use this annotation with a constructor, setter, or field injection.</p>\n<p>Constructor injection:</p>\n<pre><code class=\"language-java\">class Car {\n    Engine engine;\n\n    @Autowired\n    Car(Engine engine) {\n        this.engine = engine;\n    }\n}</code></pre>\n<p>Setter injection:</p>\n<pre><code class=\"language-java\">class Car {\n    Engine engine;\n\n    @Autowired\n    void setEngine(Engine engine) {\n        this.engine = engine;\n    }\n}</code></pre>\n<p>Field injection:</p>\n<pre><code class=\"language-java\">class Car {\n    @Autowired\n    Engine engine;\n}</code></pre>\n<p><em>@Autowired</em> has a <em>boolean</em> argument called <em>required</em> with a default value of <em>true</em>. It tunes Spring's behavior when it doesn't find a suitable bean to wire. When <em>true</em>, an exception is thrown, otherwise, nothing is wired.</p>\n<p>Note, that if we use constructor injection, all constructor arguments are mandatory.</p>\n<p>Starting with version 4.3, we don't need to annotate constructors with <em>@Autowired</em> explicitly unless we declare at least two constructors.</p>\n<p>For more details visit our articles about <a href=\"/spring-autowire\"><em>@Autowired</em></a> and <a href=\"/constructor-injection-in-spring\">constructor injection</a>.</p>\n<h3  id=\"bd-bean\" data-id=\"bean\">2.2. <em>@Bean</em></h3>\n<div class=\"bd-anchor\" id=\"bean\"></div>\n<p><em>@Bean</em> marks a factory method which instantiates a Spring bean:</p>\n<pre><code class=\"language-java\">@Bean\nEngine engine() {\n    return new Engine();\n}</code></pre>\n<p><strong>Spring calls these methods</strong> when a new instance of the return type is required.</p>\n<p>The resulting bean has the same name as the factory method. If we want to name it differently, we can do so with the <em>name</em> or the <em>value</em> arguments of this annotation (the argument <em>value</em> is an alias for the argument <em>name</em>):</p>\n<pre><code class=\"language-java\">@Bean(&quot;engine&quot;)\nEngine getEngine() {\n    return new Engine();\n}</code></pre>\n<p>Note, that all methods annotated with <em>@Bean</em> must be in <em>@Configuration</em> classes.</p>\n<h3  id=\"bd-qualifier\" data-id=\"qualifier\">2.3. <em>@Qualifier</em></h3>\n<div class=\"bd-anchor\" id=\"qualifier\"></div>\n<p>We use<em> @Qualifier</em> along with <em>@Autowired</em> to <strong>provide the bean id or bean name</strong> we want to use in ambiguous situations.</p>\n<p>For example, the following two beans implement the same interface:</p>\n<pre><code class=\"language-java\">class Bike implements Vehicle {}\n\nclass Car implements Vehicle {}</code></pre>\n<p>If Spring needs to inject a <em>Vehicle</em> bean, it ends up with multiple matching definitions. In such cases, we can provide a bean's name explicitly using the <em>@Qualifier</em> annotation.</p>\n<p>Using constructor injection:</p>\n<pre><code class=\"language-java\">@Autowired\nBiker(@Qualifier(&quot;bike&quot;) Vehicle vehicle) {\n    this.vehicle = vehicle;\n}</code></pre>\n<p>Using setter injection:</p>\n<pre><code class=\"language-java\">@Autowired\nvoid setVehicle(@Qualifier(&quot;bike&quot;) Vehicle vehicle) {\n    this.vehicle = vehicle;\n}</code></pre>\n<p>Alternatively:</p>\n<pre><code class=\"language-java\">@Autowired\n@Qualifier(&quot;bike&quot;)\nvoid setVehicle(Vehicle vehicle) {\n    this.vehicle = vehicle;\n}</code></pre>\n<p>Using field injection:</p>\n<pre><code class=\"language-java\">@Autowired\n@Qualifier(&quot;bike&quot;)\nVehicle vehicle;</code></pre>\n<p>For a more detailed description, please read <a href=\"/spring-autowire\">this article</a>.</p>\n<h3  id=\"bd-required\" data-id=\"required\">2.4. <em>@Required</em></h3>\n<div class=\"bd-anchor\" id=\"required\"></div>\n<p><em>@Required</em> on setter methods to mark dependencies that we want to populate through XML:</p>\n<pre><code class=\"language-java\">@Required\nvoid setColor(String color) {\n    this.color = color;\n}</code></pre>\n<pre><code class=\"language-xml\">&lt;bean class=&quot;com.baeldung.annotations.Bike&quot;&gt;\n    &lt;property name=&quot;color&quot; value=&quot;green&quot; /&gt;\n&lt;/bean&gt;</code></pre>\n<p>Otherwise, <em>BeanInitializationException</em> will be thrown.</p>\n<h3  id=\"bd-value\" data-id=\"value\">2.5. <em>@Value</em></h3>\n<div class=\"bd-anchor\" id=\"value\"></div>\n<p>We can use <a href=\"/spring-value-annotation\"><i>@Value</i></a> for injecting property values into beans. It's compatible with constructor, setter, and field injection.</p>\n<p>Constructor injection:</p>\n<pre><code class=\"language-java\">Engine(@Value(&quot;8&quot;) int cylinderCount) {\n    this.cylinderCount = cylinderCount;\n}</code></pre>\n<p>Setter injection:</p>\n<pre><code class=\"language-java\">@Autowired\nvoid setCylinderCount(@Value(&quot;8&quot;) int cylinderCount) {\n    this.cylinderCount = cylinderCount;\n}</code></pre>\n<p>Alternatively:</p>\n<pre><code class=\"language-java\">@Value(&quot;8&quot;)\nvoid setCylinderCount(int cylinderCount) {\n    this.cylinderCount = cylinderCount;\n}</code></pre>\n<p>Field injection:</p>\n<pre><code class=\"language-java\">@Value(&quot;8&quot;)\nint cylinderCount;</code></pre>\n<p>Of course, injecting static values isn't useful. Therefore, we can use <strong>placeholder strings</strong> in <em>@Value</em> to wire values <strong>defined in external sources</strong>, for example, in <em>.properties</em> or <em>.yaml</em> files.</p>\n<p>Let's assume the following <em>.properties</em> file:</p>\n<pre><code class=\"language-plaintext\">engine.fuelType=petrol</code></pre>\n<p>We can inject the value of <em>engine.fuelType</em> with the following:</p>\n<pre><code class=\"language-java\">@Value(&quot;${engine.fuelType}&quot;)\nString fuelType;</code></pre>\n<p>We can use <em>@Value</em> even with SpEL. More advanced examples can be found in our <a href=\"/spring-value-annotation\">article about <em>@Value</em></a>.</p>\n<h3  id=\"bd-depends-on\" data-id=\"depends-on\">2.6. <em>@DependsOn</em></h3>\n<div class=\"bd-anchor\" id=\"depends-on\"></div>\n<p>We can use this annotation to make Spring <strong>initialize other beans before the annotated one</strong>. Usually, this behavior is automatic, based on the explicit dependencies between beans.</p>\n<p>We only need this annotation <strong>when the dependencies are implicit</strong>, for example, JDBC driver loading or static variable initialization.</p>\n<p>We can use <em>@DependsOn</em> on the dependent class specifying the names of the dependency beans. The annotation's <em>value</em> argument needs an array containing the dependency bean names:</p>\n<pre><code class=\"language-java\">@DependsOn(&quot;engine&quot;)\nclass Car implements Vehicle {}</code></pre>\n<p>Alternatively, if we define a bean with the <em>@Bean</em> annotation, the factory method should be annotated with <em>@DependsOn</em>:</p>\n<pre><code class=\"language-java\">@Bean\n@DependsOn(&quot;fuel&quot;)\nEngine engine() {\n    return new Engine();\n}</code></pre>\n<h3  id=\"bd-lazy\" data-id=\"lazy\">2.7. <em>@Lazy</em></h3>\n<div class=\"bd-anchor\" id=\"lazy\"></div>\n<p>We use <a href=\"/spring-lazy-annotation\"><em>@Lazy</em></a> when we want to initialize our bean lazily. By default, Spring creates all singleton beans eagerly at the startup/bootstrapping of the application context.</p>\n<p>However, there are cases when<strong> we need to create a bean when we request it, not at application startup</strong>.</p>\n<p>This annotation behaves differently depending on where we exactly place it. We can put it on:</p>\n<ul>\n<li>a <em>@Bean</em> annotated bean factory method, to delay the method call (hence the bean creation)</li>\n<li>a @<em>Configuration</em> class and all contained <em>@Bean</em> methods will be affected</li>\n<li>a <em>@Component</em> class, which is not a <em>@Configuration</em> class, this bean will be initialized lazily</li>\n<li>an <em>@Autowired</em> constructor, setter, or field, to load the dependency itself lazily (via proxy)</li>\n</ul>\n<p>This annotation has an argument named <em>value</em> with the default value of <em>true</em>. It is useful to override the default behavior.</p>\n<p>For example, marking beans to be eagerly loaded when the global setting is lazy, or configure specific <em>@Bean</em> methods to eager loading in a <em>@Configuration</em> class marked with <em>@Lazy</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@Lazy\nclass VehicleFactoryConfig {\n\n    @Bean\n    @Lazy(false)\n    Engine engine() {\n        return new Engine();\n    }\n}</code></pre>\n<p>For further reading, please visit <a href=\"/spring-lazy-annotation\">this article</a>.</p>\n<h3  id=\"bd-look-up\" data-id=\"look-up\">2.8. <em>@Lookup</em></h3>\n<div class=\"bd-anchor\" id=\"look-up\"></div>\n<p>A method annotated with <em>@Lookup</em> tells Spring to return an instance of the method\u2019s return type when we invoke it.</p>\n<p>Detailed information about the annotation <a href=\"/spring-lookup\">can be found in this article</a>.</p>\n<h3  id=\"bd-primary\" data-id=\"primary\">2.9. <em>@Primary</em></h3>\n<div class=\"bd-anchor\" id=\"primary\"></div>\n<p>Sometimes we need to define multiple beans of the same type. In these cases, the injection will be unsuccessful because Spring has no clue which bean we need.</p>\n<p>We already saw an option to deal with this scenario: marking all the wiring points with <em>@Qualifier</em> and specify the name of the required bean.</p>\n<p>However, most of the time we need a specific bean and rarely the others. We can use <em>@Primary</em> to simplify this case: if <strong>we mark the most frequently used bean with <em>@Primary</em></strong> it will be chosen on unqualified injection points:</p>\n<pre><code class=\"language-java\">@Component\n@Primary\nclass Car implements Vehicle {}\n\n@Component\nclass Bike implements Vehicle {}\n\n@Component\nclass Driver {\n    @Autowired\n    Vehicle vehicle;\n}\n\n@Component\nclass Biker {\n    @Autowired\n    @Qualifier(&quot;bike&quot;)\n    Vehicle vehicle;\n}</code></pre>\n<p>In the previous example <em>Car</em> is the primary vehicle. Therefore, in the <em>Driver</em> class, Spring injects a <em>Car</em> bean. Of course, in the <em>Biker</em> bean, the value of the field <em>vehicle</em> will be a <em>Bike</em> object because it's qualified.</p>\n<h3  id=\"bd-scope\" data-id=\"scope\">2.10. <em>@Scope</em></h3>\n<div class=\"bd-anchor\" id=\"scope\"></div>\n<p>We use <em>@Scope</em> to define the <a href=\"/spring-bean-scopes\">scope</a> of a <em>@Component</em> class or a <em>@Bean</em> definition<em>. </em>It can be either <em>singleton, prototype, request, session, globalSession</em> or some custom scope.</p>\n<p>For example:</p>\n<pre><code class=\"language-java\">@Component\n@Scope(&quot;prototype&quot;)\nclass Engine {}</code></pre>\n<h2  id=\"bd-context-configuration\" data-id=\"context-configuration\">3. Context Configuration Annotations</h2>\n<div class=\"bd-anchor\" id=\"context-configuration\"></div>\n<p>We can configure the application context with the annotations described in this section.</p>\n<h3  id=\"bd-profile\" data-id=\"profile\">3.1. <em>@Profile</em></h3>\n<div class=\"bd-anchor\" id=\"profile\"></div>\n<p>If we want Spring to <strong>use a <em>@Component</em> class or a <em>@Bean</em> method only when a specific profile is active</strong>, we can mark it with <em>@Profile</em>. We can configure the name of the profile with the <em>value</em> argument of the annotation:</p>\n<pre><code class=\"language-java\">@Component\n@Profile(&quot;sportDay&quot;)\nclass Bike implements Vehicle {}</code></pre>\n<p>You can read more about profiles in <a href=\"/spring-profiles\">this article</a>.</p>\n<h3  id=\"bd-import\" data-id=\"import\">3.2. <em>@Import</em></h3>\n<div class=\"bd-anchor\" id=\"import\"></div>\n<p>We can use <strong>specific <em>@Configuration</em> classes without component scanning</strong> with this annotation. We can provide those classes with <em>@Import</em>&#8216;s <em>value</em> argument:</p>\n<pre><code class=\"language-java\">@Import(VehiclePartSupplier.class)\nclass VehicleFactoryConfig {}</code></pre>\n<h3  id=\"bd-import-resource\" data-id=\"import-resource\">3.3. <em>@ImportResource</em></h3>\n<div class=\"bd-anchor\" id=\"import-resource\"></div>\n<p>We can <strong>import XML configurations</strong> with this annotation. We can specify the XML file locations with the <em>locations</em> argument, or with its alias, the <em>value</em> argument:</p>\n<pre><code class=\"language-java\">@Configuration\n@ImportResource(&quot;classpath:/annotations.xml&quot;)\nclass VehicleFactoryConfig {}</code></pre>\n<h3  id=\"bd-property-source\" data-id=\"property-source\">3.4. <em>@PropertySource</em></h3>\n<div class=\"bd-anchor\" id=\"property-source\"></div>\n<p>With this annotation, we can <strong>define property files for application settings</strong>:</p>\n<pre><code class=\"language-java\">@Configuration\n@PropertySource(&quot;classpath:/annotations.properties&quot;)\nclass VehicleFactoryConfig {}</code></pre>\n<p><em>@PropertySource</em> leverages the Java 8 repeating annotations feature, which means we can mark a class with it multiple times:</p>\n<pre><code class=\"language-java\">@Configuration\n@PropertySource(&quot;classpath:/annotations.properties&quot;)\n@PropertySource(&quot;classpath:/vehicle-factory.properties&quot;)\nclass VehicleFactoryConfig {}</code></pre>\n<h3  id=\"bd-property-sources\" data-id=\"property-sources\">3.5. <em>@PropertySources</em></h3>\n<div class=\"bd-anchor\" id=\"property-sources\"></div>\n<p>We can use this annotation to specify multiple <em>@PropertySource </em>configurations:</p>\n<pre><code class=\"language-java\">@Configuration\n@PropertySources({ \n    @PropertySource(&quot;classpath:/annotations.properties&quot;),\n    @PropertySource(&quot;classpath:/vehicle-factory.properties&quot;)\n})\nclass VehicleFactoryConfig {}</code></pre>\n<p>Note, that since Java 8 we can achieve the same with the repeating annotations feature as described above.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">4. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw an overview of the most common Spring core annotations. We saw how to configure bean wiring and application context, and how to mark classes for component scanning.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-annotations\">over on GitHub</a>.</p>\n<div class=\"article-series-nav row\" style=\"background-color: #fff;\"><div class=\"article-series-nav-link article-series-next-link\"><div class=\"article-series-nav-label\">Next <strong>&raquo;</strong></div><a href=\"/spring-mvc-annotations\">Spring Web Annotations</a></div><div class=\"article-series-nav-link article-series-prev-link\"></div><div style='clear:both;'></div></div><!-- end of article series nav -->\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the most commonly used Spring core annotations.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14856,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [16],
    "tags": [174, 281, 201],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34804" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=34804"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34804/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14856"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=34804" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=34804"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=34804"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 34353,
    "date": "2018-06-02T10:18:23",
    "date_gmt": "2018-06-02T08:18:23",
    "guid": { "rendered": "http://www.baeldung.com/?p=34353" },
    "modified": "2020-02-19T06:53:58",
    "modified_gmt": "2020-02-19T04:53:58",
    "slug": "spring-scheduling-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-scheduling-annotations",
    "title": { "rendered": "Spring Scheduling Annotations" },
    "content": {
      "rendered": "<div class=\"article-series article-series-list expandable\" data-toggle=\"collapse\" data-target=\"#article-series-links-4428\">\t\t<a class=\"article-series-header\" href=\"javascript:void(0);\"><span class=\"carousel-icon carousel-plus\"></span>This article is part of a series:</a>\t<div id=\"article-series-links-4428\" class=\"article-series-links collapse row\">\t\t<div class=\"article-series-inner\"><a href=\"/spring-core-annotations\">&bull; Spring Core Annotations</a><br><a href=\"/spring-mvc-annotations\">&bull; Spring Web Annotations</a><br><a href=\"/spring-boot-annotations\">&bull; Spring Boot Annotations</a><br><div class=\"current-article\">&bull; Spring Scheduling Annotations <span class=\"current-article-label\">(current article)</span></div><a href=\"/spring-data-annotations\">&bull; Spring Data Annotations</a><br><a href=\"/spring-bean-annotations\">&bull; Spring Bean Annotations</a><br></div><!-- end of article series inner --></div><!-- .article-series-links --></div><!-- end of article series section -->\n<h2  id=\"bd-overview\" data-id=\"overview\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"overview\"></div>\n<p>When single-threaded execution isn't enough, we can use annotations from the <em>org.springframework.scheduling.annotation</em> package.</p>\n<p>In this quick tutorial, we're going to explore the Spring Scheduling Annotations.</p>\n<h2  id=\"bd-enable-async\" data-id=\"enable-async\">2. <em>@EnableAsync</em></h2>\n<div class=\"bd-anchor\" id=\"enable-async\"></div>\n<p>With this annotation, we can enable asynchronous functionality in Spring.</p>\n<p>We must use it with <em>@Configuration</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableAsync\nclass VehicleFactoryConfig {}</code></pre>\n<p>Now, that we enabled asynchronous calls, we can use <em>@Async</em> to define the methods supporting it.</p>\n<h2  id=\"bd-enable-scheduling\" data-id=\"enable-scheduling\">3. <em>@EnableScheduling</em></h2>\n<div class=\"bd-anchor\" id=\"enable-scheduling\"></div>\n<p>With this annotation, we can enable scheduling in the application.</p>\n<p>We also have to use it in conjunction with <em>@Configuration</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableScheduling\nclass VehicleFactoryConfig {}</code></pre>\n<p>As a result, we can now run methods periodically with <em>@Scheduled</em>.</p>\n<h2  id=\"bd-async\" data-id=\"async\">4. <em>@Async</em></h2>\n<div class=\"bd-anchor\" id=\"async\"></div>\n<p>We can define methods we want to <strong>execute on a different thread</strong>, hence run them asynchronously.</p>\n<p>To achieve this, we can annotate the method with <em>@Async</em>:</p>\n<pre><code class=\"language-java\">@Async\nvoid repairCar() {\n    // ...\n}</code></pre>\n<p>If we apply this annotation to a class, then all methods will be called asynchronously.</p>\n<p>Note, that we need to enable the asynchronous calls for this annotation to work, with <em>@EnableAsync</em> or XML configuration.</p>\n<p>More information about <em>@Async</em> can be found in <a href=\"/spring-async\">this article</a>.</p>\n<h2  id=\"bd-scheduled\" data-id=\"scheduled\">5. <em>@Scheduled</em></h2>\n<div class=\"bd-anchor\" id=\"scheduled\"></div>\n<p>If we need a method to <strong>execute periodically</strong>, we can use this annotation:</p>\n<pre><code class=\"language-java\">@Scheduled(fixedRate = 10000)\nvoid checkVehicle() {\n    // ...\n}</code></pre>\n<p>We can use it to execute a method at <strong>fixed intervals</strong>, or we can fine-tune it with <strong>cron-like expressions</strong>.</p>\n<p><em>@Scheduled</em> leverages the Java 8 repeating annotations feature, which means we can mark a method with it multiple times:</p>\n<pre><code class=\"language-java\">@Scheduled(fixedRate = 10000)\n@Scheduled(cron = &quot;0 * * * * MON-FRI&quot;)\nvoid checkVehicle() {\n    // ...\n}</code></pre>\n<p>Note, that the method annotated with <em>@Scheduled</em> should have a <em>void</em> return type.</p>\n<p>Moreover, we have to enable scheduling for this annotation to work for example with <em>@EnableScheduling</em> or XML configuration.</p>\n<p>For more information about scheduling read <a href=\"/spring-scheduled-tasks\">this article</a>.</p>\n<h2  id=\"bd-schedules\" data-id=\"schedules\">6. <em>@Schedules</em></h2>\n<div class=\"bd-anchor\" id=\"schedules\"></div>\n<p>We can use this annotation to specify multiple <em>@Scheduled</em> rules:</p>\n<pre><code class=\"language-java\">@Schedules({ \n  @Scheduled(fixedRate = 10000), \n  @Scheduled(cron = &quot;0 * * * * MON-FRI&quot;)\n})\nvoid checkVehicle() {\n    // ...\n}</code></pre>\n<p>Note, that since Java 8 we can achieve the same with the repeating annotations feature as described above.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">7. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw an overview of the most common Spring scheduling annotations.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-annotations\">over on GitHub</a>.</p>\n<div class=\"article-series-nav row\" style=\"background-color: #fff;\"><div class=\"article-series-nav-link article-series-next-link\"><div class=\"article-series-nav-label\">Next <strong>&raquo;</strong></div><a href=\"/spring-data-annotations\">Spring Data Annotations</a></div><div class=\"article-series-nav-link article-series-prev-link\"><div class=\"article-series-nav-label\"><strong>&laquo;</strong> Previous</div><a href=\"/spring-boot-annotations\">Spring Boot Annotations</a></div><div style='clear:both;'></div></div><!-- end of article series nav -->\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the most common Spring scheduling annotations.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49881,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [16],
    "tags": [],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34353" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=34353"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34353/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/49881"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=34353" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=34353"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=34353"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 34343,
    "date": "2018-06-01T19:36:39",
    "date_gmt": "2018-06-01T17:36:39",
    "guid": { "rendered": "http://www.baeldung.com/?p=34343" },
    "modified": "2020-02-19T06:54:01",
    "modified_gmt": "2020-02-19T04:54:01",
    "slug": "spring-web-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-mvc-annotations",
    "title": { "rendered": "Spring Web Annotations" },
    "content": {
      "rendered": "<div class=\"article-series article-series-list expandable\" data-toggle=\"collapse\" data-target=\"#article-series-links-3351\">\t\t<a class=\"article-series-header\" href=\"javascript:void(0);\"><span class=\"carousel-icon carousel-plus\"></span>This article is part of a series:</a>\t<div id=\"article-series-links-3351\" class=\"article-series-links collapse row\">\t\t<div class=\"article-series-inner\"><a href=\"/spring-core-annotations\">&bull; Spring Core Annotations</a><br><div class=\"current-article\">&bull; Spring Web Annotations <span class=\"current-article-label\">(current article)</span></div><a href=\"/spring-boot-annotations\">&bull; Spring Boot Annotations</a><br><a href=\"/spring-scheduling-annotations\">&bull; Spring Scheduling Annotations</a><br><a href=\"/spring-data-annotations\">&bull; Spring Data Annotations</a><br><a href=\"/spring-bean-annotations\">&bull; Spring Bean Annotations</a><br></div><!-- end of article series inner --></div><!-- .article-series-links --></div><!-- end of article series section -->\n<h2  id=\"bd-overview\" data-id=\"overview\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"overview\"></div>\n<p>In this tutorial, we'll explore Spring Web annotations from the <em>org.springframework.web.bind.annotation</em> package.</p>\n<h2  id=\"bd-request-mapping\" data-id=\"request-mapping\">2. <em>@RequestMapping</em></h2>\n<div class=\"bd-anchor\" id=\"request-mapping\"></div>\n<p>Simply put, <a href=\"/spring-requestmapping\"><em>@RequestMapping</em></a> <strong>marks request handler methods</strong> inside <em>@Controller</em> classes; it can be configured using:</p>\n<ul>\n<li><em>path,</em> or its aliases, <em>name,</em> and <em>value:</em> which URL the method is mapped to</li>\n<li><em>method:</em> compatible HTTP methods</li>\n<li><em>params:</em> filters requests based on presence, absence, or value of HTTP parameters</li>\n<li><em>headers:</em> filters requests based on presence, absence, or value of HTTP headers</li>\n<li><em>consumes:</em> which media types the method can consume in the HTTP request body</li>\n<li><em>produces:</em> which media types the method can produce in the HTTP response body</li>\n</ul>\n<p>Here's a quick example of what that looks like:</p>\n<pre><code class=\"language-java\">@Controller\nclass VehicleController {\n\n    @RequestMapping(value = &quot;/vehicles/home&quot;, method = RequestMethod.GET)\n    String home() {\n        return &quot;home&quot;;\n    }\n}</code></pre>\n<p>We can provide <strong>default settings for all handler methods in a <em>@Controller</em> class</strong> if we apply this annotation on the class level. The only <strong>exception is the URL which Spring won't override</strong> with method level settings but appends the two path parts.</p>\n<p>For example, the following configuration has the same effect as the one above:</p>\n<pre><code class=\"language-java\">@Controller\n@RequestMapping(value = &quot;/vehicles&quot;, method = RequestMethod.GET)\nclass VehicleController {\n\n    @RequestMapping(&quot;/home&quot;)\n    String home() {\n        return &quot;home&quot;;\n    }\n}</code></pre>\n<p>Moreover, <em>@GetMapping</em>, <em>@PostMapping</em>, <em>@PutMapping</em>, <em>@DeleteMapping</em>, and <em>@PatchMapping</em> are different variants of <em>@RequestMapping </em>with the HTTP method already set to GET, POST, PUT, DELETE, and PATCH respectively.</p>\n<p>These are available since Spring 4.3 release.</p>\n<h2  id=\"bd-request-body\" data-id=\"request-body\">3. <em>@RequestBody</em></h2>\n<div class=\"bd-anchor\" id=\"request-body\"></div>\n<p>Let's move on to <a href=\"/spring-request-response-body\"><em>@RequestBody</em></a> &#8211; which maps the <strong>body of the HTTP request to an object</strong>:</p>\n<pre><code class=\"language-java\">@PostMapping(&quot;/save&quot;)\nvoid saveVehicle(@RequestBody Vehicle vehicle) {\n    // ...\n}</code></pre>\n<p>The deserialization is automatic and depends on the content type of the request.</p>\n<h2  id=\"bd-path-variable\" data-id=\"path-variable\">4. <em>@PathVariable</em></h2>\n<div class=\"bd-anchor\" id=\"path-variable\"></div>\n<p>Next, let's talk about <em>@PathVariable</em>.</p>\n<p>This annotation indicates that a <strong>method argument is bound to a URI template variable</strong>. We can specify the URI template with the <em>@RequestMapping</em> annotation and bind a method argument to one of the template parts with <em>@PathVariable</em>.</p>\n<p>We can achieve this with the <em>name</em> or its alias, the <em>value</em> argument:</p>\n<pre><code class=\"language-java\">@RequestMapping(&quot;/{id}&quot;)\nVehicle getVehicle(@PathVariable(&quot;id&quot;) long id) {\n    // ...\n}</code></pre>\n<p>If the name of the part in the template matches the name of the method argument, we don't have to specify it in the annotation:</p>\n<pre><code class=\"language-java\">@RequestMapping(&quot;/{id}&quot;)\nVehicle getVehicle(@PathVariable long id) {\n    // ...\n}</code></pre>\n<p>Moreover, we can mark a path variable optional by setting the argument <em>required</em> to false:</p>\n<pre><code class=\"language-java\">@RequestMapping(&quot;/{id}&quot;)\nVehicle getVehicle(@PathVariable(required = false) long id) {\n    // ...\n}</code></pre>\n<h2  id=\"bd-request-param\" data-id=\"request-param\">5. <em>@RequestParam</em></h2>\n<div class=\"bd-anchor\" id=\"request-param\"></div>\n<p>We use <em>@RequestParam</em> for <strong>accessing HTTP request parameters</strong>:</p>\n<pre><code class=\"language-java\">@RequestMapping\nVehicle getVehicleByParam(@RequestParam(&quot;id&quot;) long id) {\n    // ...\n}</code></pre>\n<p>It has the same configuration options as the <em>@PathVariable</em> annotation.</p>\n<p>In addition to those settings, with <em>@RequestParam</em> we can specify an injected value when Spring finds no or empty value in the request. To achieve this, we have to set the <em>defaultValue</em> argument.</p>\n<p>Providing a default value implicitly sets <em>required</em> to <em>false:</em></p>\n<pre><code class=\"language-java\">@RequestMapping(&quot;/buy&quot;)\nCar buyCar(@RequestParam(defaultValue = &quot;5&quot;) int seatCount) {\n    // ...\n}</code></pre>\n<p>Besides parameters, there are <strong>other HTTP request parts we can access: cookies and headers</strong>. We can access them with the annotations <strong><em>@CookieValue</em> and <em>@RequestHeader</em></strong> respectively.</p>\n<p>We can configure them the same way as <em>@RequestParam</em>.</p>\n<h2  id=\"bd-response-handling\" data-id=\"response-handling\">6. Response Handling Annotations</h2>\n<div class=\"bd-anchor\" id=\"response-handling\"></div>\n<p>In the next sections, we will see the most common annotations to manipulate HTTP responses in Spring MVC.</p>\n<h3  id=\"bd-response-body\" data-id=\"response-body\">6.1. <em>@ResponseBody</em></h3>\n<div class=\"bd-anchor\" id=\"response-body\"></div>\n<p>If we mark a request handler method with <em><a href=\"/spring-request-response-body\">@ResponseBody</a>,</em> <strong>Spring treats the result of the method as the response itself</strong>:</p>\n<pre><code class=\"language-java\">@ResponseBody\n@RequestMapping(&quot;/hello&quot;)\nString hello() {\n    return &quot;Hello World!&quot;;\n}</code></pre>\n<p>If we annotate a <em>@Controller</em> class with this annotation, all request handler methods will use it.</p>\n<h3  id=\"bd-exception-handler\" data-id=\"exception-handler\">6.2. <em>@ExceptionHandler</em></h3>\n<div class=\"bd-anchor\" id=\"exception-handler\"></div>\n<p>With this annotation, we can declare a <strong>custom error handler method</strong>. Spring calls this method when a request handler method throws any of the specified exceptions.</p>\n<p>The caught exception can be passed to the method as an argument:</p>\n<pre><code class=\"language-java\">@ExceptionHandler(IllegalArgumentException.class)\nvoid onIllegalArgumentException(IllegalArgumentException exception) {\n    // ...\n}</code></pre>\n<h3  id=\"bd-response-status\" data-id=\"response-status\">6.3. <em>@ResponseStatus</em></h3>\n<div class=\"bd-anchor\" id=\"response-status\"></div>\n<p>We can specify the <strong>desired HTTP status of the response</strong> if we annotate a request handler method with this annotation. We can declare the status code with the <em>code</em> argument, or its alias, the <em>value</em> argument.</p>\n<p>Also, we can provide a reason using the <em>reason</em> argument.</p>\n<p>We also can use it along with <em>@ExceptionHandler</em>:</p>\n<pre><code class=\"language-java\">@ExceptionHandler(IllegalArgumentException.class)\n@ResponseStatus(HttpStatus.BAD_REQUEST)\nvoid onIllegalArgumentException(IllegalArgumentException exception) {\n    // ...\n}</code></pre>\n<p>For more information about HTTP response status, please visit <a href=\"/spring-mvc-controller-custom-http-status-code\">this article</a>.</p>\n<h2  id=\"bd-other\" data-id=\"other\">7. Other Web Annotations</h2>\n<div class=\"bd-anchor\" id=\"other\"></div>\n<p>Some annotations don't manage HTTP requests or responses directly. In the next sections, we'll introduce the most common ones.</p>\n<h3 id=\"bd-1-controller\" data-id=\"1-controller\">7.1. <em>@Controller</em></h3>\n<div class=\"bd-anchor\" id=\"1-controller\"></div>\n<p>We can define a Spring MVC controller with <em>@Controller</em>. For more information, please visit <a href=\"/spring-bean-annotations\">our article about Spring Bean Annotations</a>.</p>\n<h3  id=\"bd-rest-controller\" data-id=\"rest-controller\">7.2. <em>@RestController</em></h3>\n<div class=\"bd-anchor\" id=\"rest-controller\"></div>\n<p>The <em>@RestController</em> <strong>combines <em>@Controller</em> and <em>@ResponseBody</em></strong>.</p>\n<p>Therefore, the following declarations are equivalent:</p>\n<pre><code class=\"language-java\">@Controller\n@ResponseBody\nclass VehicleRestController {\n    // ...\n}</code></pre>\n<pre><code class=\"language-java\">@RestController\nclass VehicleRestController {\n    // ...\n}</code></pre>\n<h3  id=\"bd-model-attribute\" data-id=\"model-attribute\">7.3. <em>@ModelAttribute</em></h3>\n<div class=\"bd-anchor\" id=\"model-attribute\"></div>\n<p>With this annotation we can <strong>access elements that are already in the model</strong> of an MVC <em>@Controller,</em> by providing the model key:</p>\n<pre><code class=\"language-java\">@PostMapping(&quot;/assemble&quot;)\nvoid assembleVehicle(@ModelAttribute(&quot;vehicle&quot;) Vehicle vehicleInModel) {\n    // ...\n}</code></pre>\n<p>Like with <em>@PathVariable</em> and <em>@RequestParam</em>, we don't have to specify the model key if the argument has the same name:</p>\n<pre><code class=\"language-java\">@PostMapping(&quot;/assemble&quot;)\nvoid assembleVehicle(@ModelAttribute Vehicle vehicle) {\n    // ...\n}</code></pre>\n<p>Besides, <em>@ModelAttribute</em> has another use: if we annotate a method with it, Spring will <strong>automatically add the method's return value to the model</strong>:</p>\n<pre><code class=\"language-java\">@ModelAttribute(&quot;vehicle&quot;)\nVehicle getVehicle() {\n    // ...\n}</code></pre>\n<p>Like before, we don't have to specify the model key, Spring uses the method's name by default:</p>\n<pre><code class=\"language-java\">@ModelAttribute\nVehicle vehicle() {\n    // ...\n}</code></pre>\n<p>Before Spring calls a request handler method, it invokes all <em>@ModelAttribute</em> annotated methods in the class.</p>\n<p>More information about <em>@ModelAttribute</em> can be found in <a href=\"/spring-mvc-and-the-modelattribute-annotation\">this article</a>.</p>\n<h3  id=\"bd-cross-origin\" data-id=\"cross-origin\">7.4. <em>@CrossOrigin</em></h3>\n<div class=\"bd-anchor\" id=\"cross-origin\"></div>\n<p><em>@CrossOrigin</em> <strong>enables cross-domain communication</strong> for the annotated request handler methods:</p>\n<pre><code class=\"language-java\">@CrossOrigin\n@RequestMapping(&quot;/hello&quot;)\nString hello() {\n    return &quot;Hello World!&quot;;\n}</code></pre>\n<p>If we mark a class with it, it applies to all request handler methods in it.</p>\n<p>We can fine-tune CORS behavior with this annotation's arguments.</p>\n<p>For more details, please visit <a href=\"/spring-cors\">this article</a>.</p>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">8. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw how we can handle HTTP requests and responses with Spring MVC.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-annotations\">over on GitHub</a>.</p>\n<div class=\"article-series-nav row\" style=\"background-color: #fff;\"><div class=\"article-series-nav-link article-series-next-link\"><div class=\"article-series-nav-label\">Next <strong>&raquo;</strong></div><a href=\"/spring-boot-annotations\">Spring Boot Annotations</a></div><div class=\"article-series-nav-link article-series-prev-link\"><div class=\"article-series-nav-label\"><strong>&laquo;</strong> Previous</div><a href=\"/spring-core-annotations\">Spring Core Annotations</a></div><div style='clear:both;'></div></div><!-- end of article series nav -->\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the main annotations you can use to handle HTTP requests and responses in Spring MVC.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 22825,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [69],
    "tags": [174, 265],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34343" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=34343"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34343/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/22825"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=34343" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=34343"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=34343"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 34331,
    "date": "2018-06-01T12:05:08",
    "date_gmt": "2018-06-01T10:05:08",
    "guid": { "rendered": "http://www.baeldung.com/?p=34331" },
    "modified": "2020-02-19T06:53:55",
    "modified_gmt": "2020-02-19T04:53:55",
    "slug": "spring-boot-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-boot-annotations",
    "title": { "rendered": "Spring Boot Annotations" },
    "content": {
      "rendered": "<div class=\"article-series article-series-list expandable\" data-toggle=\"collapse\" data-target=\"#article-series-links-5857\">\t\t<a class=\"article-series-header\" href=\"javascript:void(0);\"><span class=\"carousel-icon carousel-plus\"></span>This article is part of a series:</a>\t<div id=\"article-series-links-5857\" class=\"article-series-links collapse row\">\t\t<div class=\"article-series-inner\"><a href=\"/spring-core-annotations\">&bull; Spring Core Annotations</a><br><a href=\"/spring-mvc-annotations\">&bull; Spring Web Annotations</a><br><div class=\"current-article\">&bull; Spring Boot Annotations <span class=\"current-article-label\">(current article)</span></div><a href=\"/spring-scheduling-annotations\">&bull; Spring Scheduling Annotations</a><br><a href=\"/spring-data-annotations\">&bull; Spring Data Annotations</a><br><a href=\"/spring-bean-annotations\">&bull; Spring Bean Annotations</a><br></div><!-- end of article series inner --></div><!-- .article-series-links --></div><!-- end of article series section -->\n<h2  id=\"bd-overview\" data-id=\"overview\">1. Overview</h2>\n<div class=\"bd-anchor\" id=\"overview\"></div>\n<p>Spring Boot made configuring Spring easier with its auto-configuration feature.</p>\n<p>In this quick tutorial, we'll explore the annotations from the <em>org.springframework.boot.autoconfigure</em> and <em>org.springframework.boot.autoconfigure.condition</em> packages.</p>\n<h2  id=\"bd-spring-boot-application\" data-id=\"spring-boot-application\">2. <em>@SpringBootApplication</em></h2>\n<div class=\"bd-anchor\" id=\"spring-boot-application\"></div>\n<p>We use this annotation to <strong>mark the main class of a Spring Boot application</strong>:</p>\n<pre><code class=\"language-java\">@SpringBootApplication\nclass VehicleFactoryApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(VehicleFactoryApplication.class, args);\n    }\n}</code></pre>\n<p><em>@SpringBootApplication</em> encapsulates <strong><em>@Configuration</em>, <em>@EnableAutoConfiguration</em>, and <em>@ComponentScan</em></strong> annotations with their default attributes.</p>\n<h2  id=\"bd-enable-autoconfiguration\" data-id=\"enable-autoconfiguration\">3. <em>@EnableAutoConfiguration</em></h2>\n<div class=\"bd-anchor\" id=\"enable-autoconfiguration\"></div>\n<p><em>@EnableAutoConfiguration</em>, as its name says, enables auto-configuration. It means that <strong>Spring Boot looks for auto-configuration beans</strong> on its classpath and automatically applies them.</p>\n<p>Note, that we have to use this annotation with <em>@Configuration</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableAutoConfiguration\nclass VehicleFactoryConfig {}</code></pre>\n<h2  id=\"bd-autoconfiguration-conditions\" data-id=\"autoconfiguration-conditions\">4. Auto-Configuration Conditions</h2>\n<div class=\"bd-anchor\" id=\"autoconfiguration-conditions\"></div>\n<p>Usually, when we write our <strong>custom auto-configurations</strong>, we want Spring to <strong>use them conditionally</strong>. We can achieve this with the annotations in this section.</p>\n<p>We can place the annotations in this section on <em>@Configuration</em> classes or <em>@Bean</em> methods.</p>\n<p>In the next sections, we'll only introduce the basic concept behind each condition. For further information, please visit <a href=\"/spring-boot-custom-auto-configuration\">this article</a>.</p>\n<h3  id=\"bd-condition-class\" data-id=\"condition-class\">4.1. <em>@ConditionalOnClass</em> and <em>@ConditionalOnMissingClass</em></h3>\n<div class=\"bd-anchor\" id=\"condition-class\"></div>\n<p>Using these conditions, Spring will only use the marked auto-configuration bean if the class in the annotation's <strong>argument is present/absent</strong>:</p>\n<pre><code class=\"language-java\">@Configuration\n@ConditionalOnClass(DataSource.class)\nclass MySQLAutoconfiguration {\n    //...\n}</code></pre>\n<h3  id=\"bd-condition-bean\" data-id=\"condition-bean\">4.2. <em>@ConditionalOnBean</em> and <em>@ConditionalOnMissingBean</em></h3>\n<div class=\"bd-anchor\" id=\"condition-bean\"></div>\n<p>We can use these annotations when we want to define conditions based on the <strong>presence or absence of a specific bean</strong>:</p>\n<pre><code class=\"language-java\">@Bean\n@ConditionalOnBean(name = &quot;dataSource&quot;)\nLocalContainerEntityManagerFactoryBean entityManagerFactory() {\n    // ...\n}</code></pre>\n<h3  id=\"bd-condition-property\" data-id=\"condition-property\">4.3. <em>@ConditionalOnProperty</em></h3>\n<div class=\"bd-anchor\" id=\"condition-property\"></div>\n<p>With this annotation, we can make conditions on the <strong>values of properties</strong>:</p>\n<pre><code class=\"language-java\">@Bean\n@ConditionalOnProperty(\n    name = &quot;usemysql&quot;, \n    havingValue = &quot;local&quot;\n)\nDataSource dataSource() {\n    // ...\n}</code></pre>\n<h3  id=\"bd-condition-resource\" data-id=\"condition-resource\">4.4. <em>@ConditionalOnResource</em></h3>\n<div class=\"bd-anchor\" id=\"condition-resource\"></div>\n<p>We can make Spring to use a definition only when a specific <strong>resource is present</strong>:</p>\n<pre><code class=\"language-java\">@ConditionalOnResource(resources = &quot;classpath:mysql.properties&quot;)\nProperties additionalProperties() {\n    // ...\n}</code></pre>\n<h3  id=\"bd-condition-application\" data-id=\"condition-application\">4.5. <em>@ConditionalOnWebApplication</em> and <em>@ConditionalOnNotWebApplication</em></h3>\n<div class=\"bd-anchor\" id=\"condition-application\"></div>\n<p>With these annotations, we can create conditions based on if the current <strong>application is or isn't a web application</strong>:</p>\n<pre><code class=\"language-java\">@ConditionalOnWebApplication\nHealthCheckController healthCheckController() {\n    // ...\n}</code></pre>\n<h3  id=\"bd-condition-expression\" data-id=\"condition-expression\">4.6. <em>@ConditionalExpression</em></h3>\n<div class=\"bd-anchor\" id=\"condition-expression\"></div>\n<p>We can use this annotation in more complex situations. Spring will use the marked definition when the <strong>SpEL expression is evaluated to true</strong>:</p>\n<pre><code class=\"language-java\">@Bean\n@ConditionalOnExpression(&quot;${usemysql} && ${mysqlserver == &#039;local&#039;}&quot;)\nDataSource dataSource() {\n    // ...\n}</code></pre>\n<h3  id=\"bd-conditional\" data-id=\"conditional\">4.7. <em>@Conditional</em></h3>\n<div class=\"bd-anchor\" id=\"conditional\"></div>\n<p>For even more complex conditions, we can create a class evaluating the <strong>custom condition</strong>. We tell Spring to use this custom condition with <em>@Conditional</em>:</p>\n<pre><code class=\"language-java\">@Conditional(HibernateCondition.class)\nProperties additionalProperties() {\n    //...\n}</code></pre>\n<h2  id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw an overview of how can we fine-tune the auto-configuration process and provide conditions for custom auto-configuration beans.</p>\n<p>As usual, the examples are available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-annotations\">over on GitHub</a>.</p>\n<div class=\"article-series-nav row\" style=\"background-color: #fff;\"><div class=\"article-series-nav-link article-series-next-link\"><div class=\"article-series-nav-label\">Next <strong>&raquo;</strong></div><a href=\"/spring-scheduling-annotations\">Spring Scheduling Annotations</a></div><div class=\"article-series-nav-link article-series-prev-link\"><div class=\"article-series-nav-label\"><strong>&laquo;</strong> Previous</div><a href=\"/spring-mvc-annotations\">Spring Web Annotations</a></div><div style='clear:both;'></div></div><!-- end of article series nav -->\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Explore the Spring Boot Annotations.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 49881,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [222],
    "tags": [225, 174],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34331" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=34331"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34331/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/49881"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=34331" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=34331"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=34331"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 34264,
    "date": "2018-05-31T20:00:42",
    "date_gmt": "2018-05-31T18:00:42",
    "guid": { "rendered": "http://www.baeldung.com/?p=34264" },
    "modified": "2021-01-21T10:13:19",
    "modified_gmt": "2021-01-21T08:13:19",
    "slug": "spring-data-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/spring-data-annotations",
    "title": { "rendered": "Spring Data Annotations" },
    "content": {
      "rendered": "<div class=\"article-series article-series-list expandable\" data-toggle=\"collapse\" data-target=\"#article-series-links-7157\">\t\t<a class=\"article-series-header\" href=\"javascript:void(0);\"><span class=\"carousel-icon carousel-plus\"></span>This article is part of a series:</a>\t<div id=\"article-series-links-7157\" class=\"article-series-links collapse row\">\t\t<div class=\"article-series-inner\"><a href=\"/spring-core-annotations\">&bull; Spring Core Annotations</a><br><a href=\"/spring-mvc-annotations\">&bull; Spring Web Annotations</a><br><a href=\"/spring-boot-annotations\">&bull; Spring Boot Annotations</a><br><a href=\"/spring-scheduling-annotations\">&bull; Spring Scheduling Annotations</a><br><div class=\"current-article\">&bull; Spring Data Annotations <span class=\"current-article-label\">(current article)</span></div><a href=\"/spring-bean-annotations\">&bull; Spring Bean Annotations</a><br></div><!-- end of article series inner --></div><!-- .article-series-links --></div><!-- end of article series section -->\n<h2 id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>Spring Data provides an abstraction over data storage technologies. Therefore, our business logic code can be much more independent of the underlying persistence implementation. Also, Spring simplifies the handling of implementation-dependent details of data storage.</p>\n<p>In this tutorial, we'll see the most common annotations of the Spring Data, Spring Data JPA, and Spring Data MongoDB projects.</p>\n<h2 id=\"bd-common-spring-data-annotations\" data-id=\"common-spring-data-annotations\">2. Common Spring Data Annotations</h2>\n<div class=\"bd-anchor\" id=\"common-spring-data-annotations\"></div>\n<h3  id=\"bd-transactional\" data-id=\"transactional\">2.1. <em>@Transactional</em></h3>\n<div class=\"bd-anchor\" id=\"transactional\"></div>\n<p>When we want to <strong>configure the transactional behavior of a method</strong>, we can do it with:</p>\n<pre><code class=\"language-java\">@Transactional\nvoid pay() {}</code></pre>\n<p>If we apply this annotation on class level, then it works on all methods inside the class. However, we can override its effects by applying it to a specific method.</p>\n<p>It has many configuration options, which can be found in <a href=\"/transaction-configuration-with-jpa-and-spring\">this article</a>.</p>\n<h3 id=\"bd-2-norepositorybean\" data-id=\"2-norepositorybean\">2.2. <em>@NoRepositoryBean</em></h3>\n<div class=\"bd-anchor\" id=\"2-norepositorybean\"></div>\n<p><strong>Sometimes we want to create repository interfaces with the only goal of providing common methods for the child repositories</strong>.</p>\n<p>Of course, we don't want Spring to create a bean of these repositories since we won't inject them anywhere. <em>@NoRepositoryBean\u00a0</em>does exactly this: when we mark a child interface of <em>org.springframework.data.repository.Repository</em>, Spring won't create a bean out of it.</p>\n<p>For example, if we want an <em>Optional&lt;T&gt; findById(ID id)\u00a0</em>method in all of our repositories, we can create a base repository:</p>\n<pre><code class=\"language-java\">@NoRepositoryBean\ninterface MyUtilityRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt; {\n    Optional&lt;T&gt; findById(ID id);\n}</code></pre>\n<p>This annotation doesn't affect the child interfaces; hence Spring will create a bean for the following repository interface:</p>\n<pre><code class=\"language-java\">@Repository\ninterface PersonRepository extends MyUtilityRepository&lt;Person, Long&gt; {}</code></pre>\n<p>Note, that the example above isn't necessary since Spring Data version 2 which includes this method replacing the older <em>T findOne(ID id)</em>.</p>\n<h3 id=\"bd-3-param\" data-id=\"3-param\">2.3. <em>@Param</em></h3>\n<div class=\"bd-anchor\" id=\"3-param\"></div>\n<p>We can pass named parameters to our queries using <em>@Param</em>:</p>\n<pre><code class=\"language-java\">@Query(&quot;FROM Person p WHERE p.name = :name&quot;)\nPerson findByName(@Param(&quot;name&quot;) String name);</code></pre>\n<p>Note, that we refer to the parameter with the <em>:name\u00a0</em>syntax.</p>\n<p>For further examples, please visit <a href=\"/spring-data-jpa-query\">this article</a>.</p>\n<h3 id=\"bd-4-id\" data-id=\"4-id\">2.4. <em>@Id</em></h3>\n<div class=\"bd-anchor\" id=\"4-id\"></div>\n<p><em>@Id\u00a0</em>marks a field in a model class as the primary key:</p>\n<pre><code class=\"language-java\">class Person {\n\n    @Id\n    Long id;\n\n    // ...\n    \n}</code></pre>\n<p>Since it's implementation-independent, it makes a model class easy to use with multiple data store engines.</p>\n<h3 id=\"bd-5-transient\" data-id=\"5-transient\">2.5. <em>@Transient</em></h3>\n<div class=\"bd-anchor\" id=\"5-transient\"></div>\n<p>We can use this annotation to mark a field in a model class as transient. Hence the data store engine won't read or write this field's value:</p>\n<pre><code class=\"language-java\">class Person {\n\n    // ...\n\n    @Transient\n    int age;\n\n    // ...\n\n}</code></pre>\n<p>Like <em>@Id</em>, <em>@Transient\u00a0</em>is also implementation-independent, which makes it convenient to use with multiple data store implementations.</p>\n<h3 id=\"bd-6-createdby-lastmodifiedby-createddate-lastmodifieddate\" data-id=\"6-createdby-lastmodifiedby-createddate-lastmodifieddate\">2.6. <em>@CreatedBy</em>, <em>@LastModifiedBy</em>, <em>@CreatedDate</em>, <em>@LastModifiedDate</em></h3>\n<div class=\"bd-anchor\" id=\"6-createdby-lastmodifiedby-createddate-lastmodifieddate\"></div>\n<p>With these annotations, we can audit our model classes: Spring automatically populates the annotated fields with the principal who created the object, last modified it, and the date of creation, and last modification:</p>\n<pre><code class=\"language-java\">public class Person {\n\n    // ...\n\n    @CreatedBy\n    User creator;\n    \n    @LastModifiedBy\n    User modifier;\n    \n    @CreatedDate\n    Date createdAt;\n    \n    @LastModifiedDate\n    Date modifiedAt;\n\n    // ...\n\n}</code></pre>\n<p>Note, that if we want Spring to populate the principals, we need to use Spring Security as well.</p>\n<p>For a more thorough description, please visit <a href=\"/database-auditing-jpa\">this article</a>.</p>\n<h2 id=\"bd-spring-data-jpa-annotations\" data-id=\"spring-data-jpa-annotations\">3. Spring Data JPA Annotations</h2>\n<div class=\"bd-anchor\" id=\"spring-data-jpa-annotations\"></div>\n<h3 id=\"bd-1-query\" data-id=\"1-query\">3.1. <em>@Query</em></h3>\n<div class=\"bd-anchor\" id=\"1-query\"></div>\n<p>With <em>@Query</em>, we can provide a JPQL implementation for a repository method:</p>\n<pre><code class=\"language-java\">@Query(&quot;SELECT COUNT(*) FROM Person p&quot;)\nlong getPersonCount();</code></pre>\n<p>Also, we can use named parameters:</p>\n<pre><code class=\"language-java\">@Query(&quot;FROM Person p WHERE p.name = :name&quot;)\nPerson findByName(@Param(&quot;name&quot;) String name);</code></pre>\n<p>Besides, we can use native SQL queries, if we set the <em>nativeQuery\u00a0</em>argument to <em>true</em>:</p>\n<pre><code class=\"language-java\">@Query(value = &quot;SELECT AVG(p.age) FROM person p&quot;, nativeQuery = true)\nint getAverageAge();</code></pre>\n<p>For more information, please visit <a href=\"/spring-data-jpa-query\">this article</a>.</p>\n<h3 id=\"bd-2-procedure\" data-id=\"2-procedure\">3.2. <em>@Procedure</em></h3>\n<div class=\"bd-anchor\" id=\"2-procedure\"></div>\n<p><strong>With Spring Data JPA we can easily call stored procedures from repositories.</strong></p>\n<p>First, we need to declare the repository on the entity class using standard JPA annotations:</p>\n<pre><code class=\"language-java\">@NamedStoredProcedureQueries({ \n    @NamedStoredProcedureQuery(\n        name = &quot;count_by_name&quot;, \n        procedureName = &quot;person.count_by_name&quot;, \n        parameters = { \n            @StoredProcedureParameter(\n                mode = ParameterMode.IN, \n                name = &quot;name&quot;, \n                type = String.class),\n            @StoredProcedureParameter(\n                mode = ParameterMode.OUT, \n                name = &quot;count&quot;, \n                type = Long.class) \n            }\n    ) \n})\n\nclass Person {}</code></pre>\n<p>After this, we can refer to it in the repository with the name we declared in the <em>name\u00a0</em>argument:</p>\n<pre><code class=\"language-java\">@Procedure(name = &quot;count_by_name&quot;)\nlong getCountByName(@Param(&quot;name&quot;) String name);</code></pre>\n<h3 id=\"bd-3-lock\" data-id=\"3-lock\">3.3. <em>@Lock</em></h3>\n<div class=\"bd-anchor\" id=\"3-lock\"></div>\n<p>We can configure the lock mode when we execute a repository query method:</p>\n<pre><code class=\"language-java\">@Lock(LockModeType.NONE)\n@Query(&quot;SELECT COUNT(*) FROM Person p&quot;)\nlong getPersonCount();</code></pre>\n<p>The available lock modes:</p>\n<ul>\n<li><em>READ</em></li>\n<li><em>WRITE</em></li>\n<li><em>OPTIMISTIC</em></li>\n<li><em>OPTIMISTIC_FORCE_INCREMENT</em></li>\n<li><em>PESSIMISTIC_READ</em></li>\n<li><em>PESSIMISTIC_WRITE</em></li>\n<li><em>PESSIMISTIC_FORCE_INCREMENT</em></li>\n<li><em>NONE</em></li>\n</ul>\n<h3 id=\"bd-4-modifying\" data-id=\"4-modifying\">3.4. <em>@Modifying</em></h3>\n<div class=\"bd-anchor\" id=\"4-modifying\"></div>\n<p>We can modify data with a repository method if we annotate it with <em>@Modifying</em>:</p>\n<pre><code class=\"language-java\">@Modifying\n@Query(&quot;UPDATE Person p SET p.name = :name WHERE p.id = :id&quot;)\nvoid changeName(@Param(&quot;id&quot;) long id, @Param(&quot;name&quot;) String name);</code></pre>\n<p>For more information, please visit <a href=\"/spring-data-jpa-query\">this article</a>.</p>\n<h3 id=\"bd-5-enablejparepositories\" data-id=\"5-enablejparepositories\">3.5. <em>@EnableJpaRepositories</em></h3>\n<div class=\"bd-anchor\" id=\"5-enablejparepositories\"></div>\n<p>To use JPA repositories, we have to indicate it to Spring. We can do this with <em>@EnableJpaRepositories.</em></p>\n<p>Note, that we have to use this annotation with <em>@Configuration</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableJpaRepositories\nclass PersistenceJPAConfig {}</code></pre>\n<p>Spring will look for repositories in the sub packages of this <em>@Configuration\u00a0</em>class.</p>\n<p>We can alter this behavior with the <em>basePackages\u00a0</em>argument:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableJpaRepositories(basePackages = &quot;com.baeldung.persistence.dao&quot;)\nclass PersistenceJPAConfig {}</code></pre>\n<p>Also note, that Spring Boot does this automatically if it finds Spring Data JPA on the classpath.</p>\n<h2 id=\"bd-spring-data-mongo-annotations\" data-id=\"spring-data-mongo-annotations\">4. Spring Data Mongo Annotations</h2>\n<div class=\"bd-anchor\" id=\"spring-data-mongo-annotations\"></div>\n<p>Spring Data makes working with MongoDB much easier. In the next sections, we'll explore the most basic features of Spring Data MongoDB.</p>\n<p>For more information, please visit our <a href=\"/spring-data-mongodb-tutorial\">article about Spring Data MongoDB</a>.</p>\n<h3 id=\"bd-1-document\" data-id=\"1-document\">4.1. <em>@Document</em></h3>\n<div class=\"bd-anchor\" id=\"1-document\"></div>\n<p>This annotation marks a class as being a domain object that we want to persist to the database:</p>\n<pre><code class=\"language-java\">@Document\nclass User {}</code></pre>\n<p>It also allows us to choose the name of the collection we want to use:</p>\n<pre><code class=\"language-java\">@Document(collection = &quot;user&quot;)\nclass User {}</code></pre>\n<p>Note, that this annotation is the Mongo equivalent of <em>@Entity\u00a0</em>in JPA.</p>\n<h3 id=\"bd-2-field\" data-id=\"2-field\">4.2. <em>@Field</em></h3>\n<div class=\"bd-anchor\" id=\"2-field\"></div>\n<p>With <em>@Field</em>, we can configure the name of a field we want to use when MongoDB persists the document:</p>\n<pre><code class=\"language-java\">@Document\nclass User {\n\n    // ...\n\n    @Field(&quot;email&quot;)\n    String emailAddress;\n\n    // ...\n\n}</code></pre>\n<p>Note, that this annotation is the Mongo equivalent of <em>@Column\u00a0</em>in JPA.</p>\n<h3 id=\"bd-3-query\" data-id=\"3-query\">4.3. <em>@Query</em></h3>\n<div class=\"bd-anchor\" id=\"3-query\"></div>\n<p>With <em>@Query</em>, we can provide a finder query on a MongoDB repository method:</p>\n<pre><code class=\"language-java\">@Query(&quot;{ &#039;name&#039; : ?0 }&quot;)\nList&lt;User&gt; findUsersByName(String name);</code></pre>\n<h3 id=\"bd-4-enablemongorepositories\" data-id=\"4-enablemongorepositories\">4.4. <em>@EnableMongoRepositories</em></h3>\n<div class=\"bd-anchor\" id=\"4-enablemongorepositories\"></div>\n<p>To use MongoDB repositories, we have to indicate it to Spring. We can do this with <em>@EnableMongoRepositories.</em></p>\n<p>Note, that we have to use this annotation with <em>@Configuration</em>:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableMongoRepositories\nclass MongoConfig {}</code></pre>\n<p>Spring will look for repositories in the sub packages of this <em>@Configuration\u00a0</em>class. We can alter this behavior with the <em>basePackages\u00a0</em>argument:</p>\n<pre><code class=\"language-java\">@Configuration\n@EnableMongoRepositories(basePackages = &quot;com.baeldung.repository&quot;)\nclass MongoConfig {}</code></pre>\n<p>Also note, that Spring Boot does this automatically if it finds Spring Data MongoDB on the classpath.</p>\n<h2 id=\"bd-conclusion\" data-id=\"conclusion\">5. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we saw which are the most important annotations we need to deal with data in general, using Spring. In addition, we looked into the most common JPA and MongoDB annotations.</p>\n<p>As usual, examples are available over on GitHub <a href=\"https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-jpa\">here</a> for common and JPA annotations, and <a href=\"https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-mongodb\">here</a> for MongoDB annotations.</p>\n<div class=\"article-series-nav row\" style=\"background-color: #fff;\"><div class=\"article-series-nav-link article-series-next-link\"><div class=\"article-series-nav-label\">Next <strong>&raquo;</strong></div><a href=\"/spring-bean-annotations\">Spring Bean Annotations</a></div><div class=\"article-series-nav-link article-series-prev-link\"><div class=\"article-series-nav-label\"><strong>&laquo;</strong> Previous</div><a href=\"/spring-scheduling-annotations\">Spring Scheduling Annotations</a></div><div style='clear:both;'></div></div><!-- end of article series nav -->\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Learn about the most important annotations we need to handle persistence using the Spring Data project</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14856,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [202],
    "tags": [174],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34264" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=34264"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/34264/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14856"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=34264" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=34264"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=34264"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 32686,
    "date": "2018-04-25T20:15:19",
    "date_gmt": "2018-04-25T18:15:19",
    "guid": { "rendered": "http://www.baeldung.com/?p=32686" },
    "modified": "2020-12-28T15:07:19",
    "modified_gmt": "2020-12-28T13:07:19",
    "slug": "working-with-boolean-in-thymeleaf",
    "status": "publish",
    "type": "post",
    "link": "https://www.baeldung.com/thymeleaf-boolean",
    "title": { "rendered": "Working with Boolean in Thymeleaf" },
    "content": {
      "rendered": "<h2 id=\"bd-introduction\" data-id=\"introduction\">1. Introduction</h2>\n<div class=\"bd-anchor\" id=\"introduction\"></div>\n<p>In this quick tutorial,\u00a0we're going to look at how to work with boolean values in Thymeleaf.</p>\n<p>Before we dive into the details, Thymeleaf basics can be found in\u00a0<a href=\"/thymeleaf-in-spring-mvc\">this write-up</a>.</p>\n<h2 id=\"bd-evaluating-expressions-as-booleans\" data-id=\"evaluating-expressions-as-booleans\">2. Evaluating Expressions as Booleans</h2>\n<div class=\"bd-anchor\" id=\"evaluating-expressions-as-booleans\"></div>\n<p><strong>In Thymeleaf, any value can be evaluated to a boolean.\u00a0</strong>We have a few values interpreted as <em>false</em><i>:</i></p>\n<ul>\n<li><em>null</em></li>\n<li>the boolean value <em>false</em></li>\n<li>the number <em>0</em></li>\n<li>the character \\<em>0</em></li>\n<li>the strings <em>&#8220;false&#8221;</em>, <em>&#8220;off&#8221;</em>and <em>&#8220;no&#8221;</em></li>\n</ul>\n<p>Any other value is evaluated to <em>true</em>.</p>\n<h2 id=\"bd-using-booleans-as-a-rendering-conditions\" data-id=\"using-booleans-as-a-rendering-conditions\">3. Using Booleans as a Rendering Conditions</h2>\n<div class=\"bd-anchor\" id=\"using-booleans-as-a-rendering-conditions\"></div>\n<p>To render an HTML element conditionally, we have two options: the <em>th:if\u00a0</em>and the\u00a0<em>th:unless\u00a0</em>attributes.</p>\n<p>Their effect is exactly the opposite &#8211;\u00a0Thymeleaf will render an element with a <em>th:if\u00a0</em>attribute\u00a0only if the attribute's value is <em>true\u00a0</em>and with <em>th</em>:unless\u00a0attribute only if its value is <em>false:</em></p>\n<pre><code class=\"language-html\">&lt;span th:if=&quot;${true}&quot;&gt;will be rendered&lt;/span&gt;\n&lt;span th:unless=&quot;${true}&quot;&gt;won&#039;t be rendered&lt;/span&gt;\n&lt;span th:if=&quot;${false}&quot;&gt;won&#039;t be rendered&lt;/span&gt;\n&lt;span th:unless=&quot;${false}&quot;&gt;will be rendered&lt;/span&gt;</code></pre>\n<h2 id=\"bd-logical-and-conditional-operators\" data-id=\"logical-and-conditional-operators\">4. Logical and Conditional Operators</h2>\n<div class=\"bd-anchor\" id=\"logical-and-conditional-operators\"></div>\n<p>In addition, we can use the three classic logic operators in Thymeleaf:</p>\n<ul>\n<li><em>and</em></li>\n<li><em>or</em></li>\n<li>negation with the keyword <em>not\u00a0</em>or the &#8220;!&#8221;\u00a0symbol</li>\n</ul>\n<p><strong>We can use these operators inside variable expressions or combining multiple variable expressions with them:</strong></p>\n<pre><code class=\"language-html\">&lt;span th:if=&quot;${isRaining or isCold}&quot;&gt;The weather is bad&lt;/span&gt;\n&lt;span th:if=&quot;${isRaining} or ${isCold}&quot;&gt;The weather is bad&lt;/span&gt;\n&lt;span th:if=&quot;${isSunny and isWarm}&quot;&gt;The weather is good&lt;/span&gt;\n&lt;span th:if=&quot;${isSunny} and ${isWarm}&quot;&gt;The weather is good&lt;/span&gt;\n&lt;span th:if=&quot;${not isCold}&quot;&gt;It&#039;s warm&lt;/span&gt;\n&lt;span th:if=&quot;${!isCold}&quot;&gt;It&#039;s warm&lt;/span&gt;\n&lt;span th:if=&quot;not ${isCold}&quot;&gt;It&#039;s warm&lt;/span&gt;\n&lt;span th:if=&quot;!${isCold}&quot;&gt;It&#039;s warm&lt;/span&gt;</code></pre>\n<p>We can also use conditional operators: the <em>if-then</em>, <em>if-then-else</em>, and the default operators.</p>\n<p>The <em>if-then-else\u00a0</em>operator is the usual ternary, or <em>?</em>: operator:</p>\n<pre><code class=\"language-html\">It&#039;s &lt;span th:text=&quot;${isCold} ? &#039;cold&#039; : &#039;warm&#039;&quot;&gt;&lt;/span&gt;</code></pre>\n<p>Moreover, the <em>if-then\u00a0</em>operator is the simplified version where we don't have an else part:</p>\n<pre><code class=\"language-html\">&lt;span th:text=&quot;${isRaining or isCold} ? &#039;The weather is bad&#039;&quot;&gt;&lt;/span&gt;</code></pre>\n<p>The default operator returns the first operand if it's not <em>null\u00a0</em>and the second otherwise:</p>\n<pre><code class=\"language-html\">&lt;span th:text=&quot;&#039;foo&#039; ?: &#039;bar&#039;&quot;&gt;&lt;/span&gt; &lt;!-- foo --&gt;\n&lt;span th:text=&quot;null ?: &#039;bar&#039;&quot;&gt;&lt;/span&gt; &lt;!-- bar --&gt;\n&lt;span th:text=&quot;0 ?: &#039;bar&#039;&quot;&gt;&lt;/span&gt; &lt;!-- 0 --&gt;\n&lt;span th:text=&quot;1 ?: &#039;bar&#039;&quot;&gt;&lt;/span&gt; &lt;!-- 1 --&gt;</code></pre>\n<p>The default operator is also called the Elvis operator because of its strong resemblance to Elvis' hairstyle.</p>\n<p>Note, that the Elvis operator only does a <em>null\u00a0</em>check, it doesn't evaluate\u00a0the first operand as boolean.</p>\n<h2 id=\"bd-boolsutility-object\" data-id=\"boolsutility-object\">5. <em>#bools\u00a0</em>Utility Object</h2>\n<div class=\"bd-anchor\" id=\"boolsutility-object\"></div>\n<p>The <em>#bools\u00a0</em>is a utility object which is available in expressions by default and has some handy methods:</p>\n<ul>\n<li><em>#bools.isTrue(obj)\u00a0</em>returns whether the argument is evaluated to <em>true</em></li>\n<li><em>#bools.isFalse(obj)\u00a0</em>returns whether the argument is evaluated to <em>false</em></li>\n<li><em>#bools.xxxIsTrue(collection)\u00a0</em>converts the elements of the argument to booleans with <em>#bools.isTrue()\u00a0</em>then collects them to the same type of collection</li>\n<li><em>#bools.xxxIsFalse(collection)\u00a0</em>converts the elements of the argument to booleans with <em>#bools.isFalse()\u00a0</em>then collects them to the same type of collection</li>\n<li><em>#bools.xxxAnd(collection)\u00a0</em>returns <em>true</em>\u00a0if all elements in the argument is evaluated to <em>true</em></li>\n<li><em>#bools.xxxOr(collection)\u00a0</em>returns <em>true\u00a0</em>if any element in the argument is evaluated to <em>true</em></li>\n</ul>\n<p>In the methods above <em>xxx\u00a0</em>can be either\u00a0<em>array</em>, <em>list\u00a0</em>or <em>set</em>, depending on the method's argument (and return value in case of <em>xxxIsTrue()\u00a0</em>and <em>xxxIsFalse()</em>).</p>\n<h2 id=\"bd-conclusion\" data-id=\"conclusion\">6. Conclusion</h2>\n<div class=\"bd-anchor\" id=\"conclusion\"></div>\n<p>In this article, we've seen how Thymeleaf interprets values as booleans, also how we can render\u00a0elements conditionally and work with boolean expressions.</p>\n<p>As usual, the code (with more examples) is available <a href=\"https://github.com/eugenp/tutorials/tree/master/spring-web-modules/spring-thymeleaf-2\">over on Github</a>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Take a look at how to work with boolean values in Thymeleaf.</p>\n",
      "protected": false
    },
    "author": 110,
    "featured_media": 14849,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [69],
    "tags": [75],
    "acf": [],
    "aioseo_notices": [],
    "_links": {
      "self": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts/32686" }
      ],
      "collection": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/users/110"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/comments?post=32686"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://www.baeldung.com/wp-json/wp/v2/posts/32686/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/media/14849"
        }
      ],
      "wp:attachment": [
        { "href": "https://www.baeldung.com/wp-json/wp/v2/media?parent=32686" }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/categories?post=32686"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://www.baeldung.com/wp-json/wp/v2/tags?post=32686"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
